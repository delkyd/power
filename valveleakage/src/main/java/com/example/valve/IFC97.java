package com.example.valve;

import java.lang.*;

public class IFC97 {

	final static double Pai = 3.1415926;
	final static double DeltaVal = 1E-8;

	final static double RGas_Water = 461.526;
	final static double Tc_Water = 647.096;
	final static double Pc_Water = 220.64;
	final static double Sc_Water = 4.412;
	final static double Hc_Water = 2087.55;
	final static double Dc_Water = 322;
	final static double Vc_Water = 1.0 / 322.0;

	final static double T350C = 273.15 + 350;
	final static double T000C = 273.15;

	private static int[] IReg1 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32 };

	private static int[] JReg1 = { 0, -2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0,
			1, 3, -3, 0, 1, 3, 17, -4, 0, 6, -5, -2, 10, -8, -11, -6, -29, -31,
			-38, -39, -40, -41 };

	private static double[] NReg1 = { 0.0, 0.14632971213167, -0.84548187169114,
			-3.756360367204, 3.3855169168385, -0.95791963387872,
			0.15772038513228, -0.016616417199501, 8.1214629983568E-4,
			2.8319080123804E-4, -6.0706301565874E-4, -0.018990068218419,
			-0.032529748770505, -0.021841717175414, -5.283835796993E-5,
			-4.7184321073267E-4, -3.0001780793026E-4, 4.7661393906987E-5,
			-4.4141845330846E-6, -7.2694996297594E-16, -3.1679644845054E-5,
			-2.8270797985312E-6, -8.5205128120103E-10, -2.2425281908E-6,
			-6.5171222895601E-7, -1.4341729937924E-13, -4.0516996860117E-7,
			-1.2734301741641E-9, -1.7424871230634E-10, -6.8762131295531E-19,
			1.4478307828521E-20, 2.6335781662795E-23, -1.1947622640071E-23,
			1.8228094581404E-24, -9.3537087292458E-26 };

	private static int[] IReg1PH = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
			2, 2, 3, 3, 4, 5, 6 };

	private static int[] JReg1PH = { 0, 0, 1, 2, 6, 22, 32, 0, 1, 2, 3, 4, 10,
			32, 10, 32, 10, 32, 32, 32, 32 };

	private static double[] NReg1PH = { 0.0, -0.23872489924521E3,
			0.40421188637945E3, 0.11349746881718E3, -0.58457616048039E1,
			-0.1528548241314E-3, -0.10866707695377E-5, -0.13391744872602E2,
			0.43211039183559E2, -0.54010067170506E2, 0.30535892203916E2,
			-0.65964749423638E1, 0.93965400878363E-2, 0.1157364750534E-6,
			-0.25858641282073E-4, -0.40644363084799E-8, 0.66456186191635E-7,
			0.80670734103027E-10, -0.93477771213947E-12, 0.58265442020601E-14,
			-0.15020185953503E-16 };

	private static int[] IReg1ps = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2,
			2, 2, 2, 2, 3, 3, 4 };

	private static int[] JReg1ps = { 0, 0, 1, 2, 3, 11, 31, 0, 1, 2, 3, 12, 31,
			0, 1, 2, 9, 31, 10, 32, 32 };

	private static double[] NReg1ps = { 0.0, 0.17478268058307E3,
			0.34806930892873E2, 0.65292584978455E1, 0.33039981775489,
			-0.19281382923196E-6, -0.24909197244573E-22, -0.261076364893322,
			0.22592965981586, -0.64256463395226E-1, 0.78876289270526E-2,
			0.35672110607366E-9, 0.17332496994895E-23, 0.56608900654837E-3,
			-0.32635483139717E-3, 0.44778286690632E-4, -0.51322156908507E-9,
			-0.42522657042207E-25, 0.26400441360689E-12, 0.78124600459723E-28,
			-0.30732199903668E-30 };

	private static int[] IReg1HS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2,
			2, 2, 3, 4, 4, 5 };

	private static int[] JReg1HS = { 0, 0, 1, 2, 4, 5, 6, 8, 14, 0, 1, 4, 6, 0,
			1, 10, 4, 1, 4, 0 };

	private static double[] NReg1HS = { 0, -0.691997014660582,
			-0.18361254878756E2, -0.928332409297335E1, 0.659639569909906E2,
			-0.162060388912024E2, 0.450620017338667E3, 0.85468067822417E3,
			0.607523214001162E4, 0.326487682621856E2, -0.269408844582931E2,
			-0.3199478483343E3, -0.92835430704332E3, 0.303634537455249E2,
			-0.650540422444146E2, -0.43099131651613E4, -0.747512324096068E3,
			0.730000345529245E3, 0.114284032569021E4, -0.436407041874559E3 };

	private static int[] J0Reg2 = { 0, 0, 1, -5, -4, -3, -2, -1, 2, 3 };

	private static double[] N0Reg2 = { 0.0, -9.6927686500217, 10.086655968018,
			-0.005608791128302, 0.071452738081455, -0.40710498223928,
			1.4240819171444, -4.383951131945, -0.28408632460772,
			0.021268463753307 };

	private static int[] IReg2 = { 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3,
			3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18,
			20, 20, 20, 21, 22, 23, 24, 24, 24 };

	private static int[] JReg2 = { 0, 0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3,
			6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29,
			50, 57, 20, 35, 48, 21, 53, 39, 26, 40, 58 };

	private static double[] NReg2 = { 0, -1.7731742473213E-3,
			-0.017834862292358, -0.045996013696365, -0.057581259083432,
			-0.05032527872793, -3.3032641670203E-5, -1.8948987516315E-4,
			-3.9392777243355E-3, -0.043797295650573, -2.6674547914087E-5,
			2.0481737692309E-8, 4.3870667284435E-7, -3.227767723857E-5,
			-1.5033924542148E-3, -0.040668253562649, -7.8847309559367E-10,
			1.2790717852285E-8, 4.8225372718507E-7, 2.2922076337661E-6,
			-1.6714766451061E-11, -2.1171472321355E-3, -23.895741934104,
			-5.905956432427E-18, -1.2621808899101E-6, -0.038946842435739,
			1.1256211360459E-11, -8.2311340897998, 1.9809712802088E-8,
			1.0406965210174E-19, -1.0234747095929E-13, -1.0018179379511E-9,
			-8.0882908646985E-11, 0.10693031879409, -0.33662250574171,
			8.9185845355421E-25, 3.0629316876232E-13, -4.2002467698208E-6,
			-5.9056029685639E-26, 3.7826947613457E-6, -1.2768608934681E-15,
			7.3087610595061E-29, 5.5414715350778E-17, -9.436970724121E-7 };

	private static int[] IReg2aPH = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7 };

	private static int[] JReg2aPH = { 0, 0, 1, 2, 3, 7, 20, 0, 1, 2, 3, 7, 9,
			11, 18, 44, 0, 2, 7, 36, 38, 40, 42, 44, 24, 44, 12, 32, 44, 32,
			36, 42, 34, 44, 28 };

	private static double[] NReg2aPH = { 0.0, 0.10898952318288E4,
			0.84951654495535E3, -0.1078174809183E3, 0.33153654801263E2,
			-0.74232016790248E1, 0.11765048724356E2, 0.1844574935579E1,
			-0.41792700549624E1, 0.62478196935812E1, -0.17344563108114E2,
			-0.20058176862096E3, 0.27196065473796E3, -0.45511318285818E3,
			0.30919688604755E4, 0.25226640357872E6, -0.61707422868339E-2,
			-0.31078046629583, 0.11670873077107E2, 0.12812798404046E9,
			-0.98554909623276E9, 0.28224546973002E10, -0.35948971410703E10,
			0.17227349913197E10, -0.13551334240775E5, 0.1284873466465E8,
			0.13865724283226E1, 0.23598832556514E6, -0.13105236545054E8,
			0.73999835474766E4, -0.5519669703006E6, 0.37154085996233E7,
			0.1912772923966E5, -0.41535164835634E6, -0.62459855192507E2 };

	private static int[] IReg2bPH = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
			1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 7,
			7, 9, 9 };

	private static int[] JReg2bPH = { 0, 0, 1, 2, 12, 18, 24, 28, 40, 0, 2, 6,
			12, 18, 24, 28, 40, 2, 8, 18, 40, 1, 2, 12, 24, 2, 12, 18, 24, 28,
			40, 18, 24, 40, 28, 2, 28, 1, 40 };

	private static double[] NReg2bPH = { 0.0, 0.14895041079516E4,
			0.74307798314034E3, -0.97708318797837E2, 0.24742464705674E1,
			-0.63281320016026, 0.11385952129658E1, -0.47811863648625,
			0.85208123431544E-2, 0.93747147377932, 0.33593118604916E1,
			0.33809355601454E1, 0.16844539671904, 0.73875745236695,
			-0.47128737436186, 0.15020273139707, -0.2176411421975E-2,
			-0.21810755324761E-1, -0.10829784403677, -0.46333324635812E-1,
			0.71280351959551E-4, 0.11032831789999E-3, 0.18955248387902E-3,
			0.30891541160537E-2, 0.13555504554949E-2, 0.28640237477456E-6,
			-0.10779857357512E-4, -0.76462712454814E-4, 0.14052392818316E-4,
			-0.31083814331434E-4, -0.10302738212103E-5, 0.2821728163504E-6,
			0.12704902271945E-5, 0.73803353468292E-7, -0.11030139238909E-7,
			-0.81456365207833E-13, -0.25180545682962E-10,
			-0.17565233969407E-17, 0.86934156344163E-14 };

	private static int[] IReg2cPH = { 0, -7, -7, -6, -6, -5, -5, -2, -2, -1,
			-1, 0, 0, 1, 1, 2, 6, 6, 6, 6, 6, 6, 6, 6 };

	private static int[] JReg2cPH = { 0, 0, 4, 0, 2, 0, 2, 0, 1, 0, 2, 0, 1, 4,
			8, 4, 0, 1, 4, 10, 12, 16, 20, 22 };

	private static double[] NReg2cPH = { 0.0, -0.32368398555242E13,
			0.73263350902181E13, 0.35825089945447E12, -0.5834013185159E12,
			-0.1078306821747E11, 0.20825544563171E11, 0.61074783564516E6,
			0.8597772253558E6, -0.2574572360417E5, 0.31081088422714E5,
			0.12082315865936E4, 0.48219755109255E3, 0.37966001272486E1,
			-0.10842984880077E2, -0.4536417267666E-1, 0.14559115658698E-12,
			0.1126159740723E-11, -0.17804982240686E-10, 0.12324579690832E-6,
			-0.11606921130984E-5, 0.27846367088554E-4, -0.59270038474176E-3,
			0.12918582991878E-2 };

	private static double[] IReg2aPS = { 0.0, -1.5, -1.5, -1.5, -1.5, -1.5,
			-1.5, -1.25, -1.25, -1.25, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
			-0.75, -0.75, -0.5, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25, -0.25,
			0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.75,
			0.75, 0.75, 0.75, 1.0, 1.0, 1.25, 1.25, 1.5, 1.5 };

	private static int[] JReg2aPS = { 0, -24, -23, -19, -13, -11, -10, -19,
			-15, -6, -26, -21, -17, -16, -9, -8, -15, -14, -26, -13, -9, -7,
			-27, -25, -11, -6, 1, 4, 8, 11, 0, 1, 5, 6, 10, 14, 16, 0, 4, 9,
			17, 7, 18, 3, 15, 5, 18 };

	private static double[] NReg2aPS = { 0.0, -0.39235983861984E6,
			0.5152657382727E6, 0.40482443161048E5, -0.32193790923902E3,
			0.96961424218694E2, -0.22867846371773E2, -0.44942914124357E6,
			-0.50118336020166E4, 0.35684463560015, 0.4423533584819E5,
			-0.13673388811708E5, 0.42163260207864E6, 0.22516925837475E5,
			0.47442144865646E3, -0.14931130797647E3, -0.19781126320452E6,
			-0.2355439947076E5, -0.19070616302076E5, 0.55375669883164E5,
			0.38293691437363E4, -0.60391860580567E3, 0.19363102620331E4,
			0.4266064369861E4, -0.59780638872718E4, -0.70401463926862E3,
			0.33836784107553E3, 0.20862786635187E2, 0.33834172656196E-1,
			-0.43124428414893E-4, 0.16653791356412E3, -0.13986292055898E3,
			-0.78849547999872, 0.72132411753872E-1, -0.59754839398283E-2,
			-0.12141358953904E-4, 0.23227096733871E-6, -0.10538463566194E2,
			0.20718925496502E1, -0.72193155260427E-1, 0.2074988708112E-6,
			-0.18340657911379E-1, 0.29036272348696E-6, 0.21037527893619,
			0.25681239729999E-3, -0.12799002933781E-1, -0.82198102652018E-5 };

	private static int[] IReg2bPS = { 0, -6, -6, -5, -5, -4, -4, -4, -3, -3,
			-3, -3, -2, -2, -2, -2, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5 };

	private static int[] JReg2bPS = { 0, 0, 11, 0, 11, 0, 1, 11, 0, 1, 11, 12,
			0, 1, 6, 10, 0, 1, 5, 8, 9, 0, 1, 2, 4, 5, 6, 9, 0, 1, 2, 3, 7, 8,
			0, 1, 5, 0, 1, 3, 0, 1, 0, 1, 2 };

	private static double[] NReg2bPS = { 0.0, 0.31687665083497E6,
			0.20864175881858E2, -0.39859399803599E6, -0.21816058518877E2,
			0.22369785194242E6, -0.27841703445817E4, 0.9920743607148E1,
			-0.75197512299157E5, 0.29708605951158E4, -0.34406878548526E1,
			0.38815564249115, 0.1751129508575E5, -0.14237112854449E4,
			0.10943803364167E1, 0.89971619308495, -0.33759740098958E4,
			0.47162885818355E3, -0.19188241993679E1, 0.41078580492196,
			-0.33465378172097, 0.13870034777505E4, -0.40663326195838E3,
			0.4172734715961E2, 0.21932549434532E1, -0.10320050009077E1,
			0.35882943516703, 0.52511453726066E-2, 0.12838916450705E2,
			-0.28642437219381E1, 0.56912683664855, -0.99962954584931E-1,
			-0.32632037778459E-2, 0.23320922576723E-3, -0.1533480985745,
			0.29072288239902E-1, 0.37534702741167E-3, 0.17296691702411E-2,
			-0.38556050844504E-3, -0.35017712292608E-4, -0.14566393631492E-4,
			0.56420857267269E-5, 0.41286150074605E-7, -0.20684671118824E-7,
			0.16409393674725E-8 };

	private static int[] IReg2cPS = { 0, -2, -2, -1, 0, 0, 0, 0, 1, 1, 1, 1, 2,
			2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7 };

	private static int[] JReg2cPS = { 0, 0, 1, 0, 0, 1, 2, 3, 0, 1, 3, 4, 0, 1,
			2, 0, 1, 5, 0, 1, 4, 0, 1, 2, 0, 1, 0, 1, 3, 4, 5 };

	private static double[] NReg2cPS = { 0.0, 0.90968501005365E3,
			0.2404566708842E4, -0.5916232638713E3, 0.54145404128074E3,
			-0.27098308411192E3, 0.97976525097926E3, -0.46966772959435E3,
			0.14399274604723E2, -0.19104204230429E2, 0.53299167111971E1,
			-0.21252975375934E2, -0.3114733441376, 0.60334840894623,
			-0.42764839702509E-1, 0.58185597255259E-2, -0.14597008284753E-1,
			0.56631175631027E-2, -0.76155864584577E-4, 0.22440342919332E-3,
			-0.12561095013413E-4, 0.63323132660934E-6, -0.20541989675375E-5,
			0.36405370390082E-7, -0.29759897789215E-8, 0.10136618529763E-7,
			0.59925719692351E-11, -0.20677870105164E-10, -0.20874278181886E-10,
			0.10162166825089E-9, -0.16429828281347E-9 };

	private static int[] IReg2aHS = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 6, 7 };

	private static int[] JReg2aHS = { 0, 1, 3, 6, 16, 20, 22, 0, 1, 2, 3, 5, 6,
			10, 16, 20, 22, 3, 16, 20, 0, 2, 3, 6, 16, 16, 3, 16, 3, 1 };

	private static double[] NReg2aHS = { 0.0, -0.182575361923032E-1,
			-0.125229548799536, 0.592290437320145, 0.604769706185122E1,
			0.238624965444474E3, -0.298639090222922E3, 0.51225081304075E-1,
			-0.437266515606486, 0.413336902999504, -0.516468254574773E1,
			-0.557014838445711E1, 0.128555037824478E2, 0.11414410895329E2,
			-0.119504225652714E3, -0.28477798596156E4, 0.431757846408006E4,
			0.11289404080265E1, 0.197409186206319E4, 0.151612444706087E4,
			0.141324451421235E-1, 0.585501282219601, -0.297258075863012E1,
			0.594567314847319E1, -0.623656565798905E4, 0.965986235133332E4,
			0.681500934948134E1, -0.633207286824489E4, -0.55891922446576E1,
			0.400645798472063E-1 };

	private static int[] IReg2bHS = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2,
			2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 12, 14 };

	private static int[] JReg2bHS = { 0, 0, 1, 2, 4, 8, 0, 1, 2, 3, 5, 12, 1,
			6, 18, 0, 1, 7, 12, 1, 16, 1, 12, 1, 8, 18, 1, 16, 1, 3, 14, 18,
			10, 16 };

	private static double[] NReg2bHS = { 0.0, 0.801496989929495E-1,
			-0.543862807146111, 0.337455597421283, 0.89055545115745E1,
			0.313840736431485E3, 0.797367065977789, -0.12161697355624E1,
			0.872803386937477E1, -0.169769781757602E2, -0.186552827328416E3,
			0.951159274344237E5, -0.189168510120494E2, -0.43340703719484E4,
			0.543212633012715E9, 0.144793408386013, 0.128024559637516E3,
			-0.672309534071268E5, 0.336972380095287E8, -0.58663419676272E3,
			-0.221403224769889E11, 0.171606668708389E4, -0.570817595806302E9,
			-0.312109693178482E4, -0.20784138463301E7, 0.305605946157786E13,
			0.322157004314333E4, 0.326810259797295E12, -0.144104158934487E4,
			0.410694867802691E3, 0.109077066873024E12, -0.247964654258893E14,
			0.188801906865134E10, -0.123651009018773E15 };

	private static int[] IReg2cHS = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2,
			2, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 10, 12, 16 };

	private static int[] JReg2cHS = { 0, 0, 1, 2, 3, 4, 8, 0, 2, 5, 8, 14, 2,
			3, 7, 10, 18, 0, 5, 8, 16, 18, 18, 1, 4, 6, 14, 8, 18, 7, 7, 10 };

	private static double[] NReg2cHS = { 0.0, 0.112225607199012,
			-0.339005953606712E1, -0.320503911730094E2, -0.1975973051049E3,
			-0.407693861553446E3, 0.132943775222331E5, 0.170846839774007E1,
			0.373694198142245E2, 0.358144365815434E4, 0.423014446424664E6,
			-0.751071025760063E9, 0.523446127607898E2, -0.228351290812417E3,
			-0.960652417056937E6, -0.807059292526074E8, 0.162698017225669E13,
			0.772465073604171, 0.463929973837746E5, -0.137317885134128E8,
			0.170470392630512E13, -0.251104628187308E14, 0.31774883083552E14,
			0.538685623675312E2, -0.553089094625169E5, -0.102861522421405E7,
			0.204249418756234E13, 0.273918446626977E9, -0.263963146312685E16,
			-0.107890854108088E10, -0.296492620980124E11, -0.111754907323424E16 };

	private static int[] IReg3 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2,
			2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9,
			9, 10, 10, 11 };

	private static int[] JReg3 = { 0, 0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17,
			0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2,
			26, 2, 26, 2, 26, 0, 1, 26 };

	private static double[] NReg3 = { 0.0, 1.0658070028513, -15.732845290239,
			20.944396974307, -7.6867707878716, 2.6185947787954,
			-2.808078114862, 1.2053369696517, -8.4566812812502E-3,
			-1.2654315477714, -1.1524407806681, 0.88521043984318,
			-0.64207765181607, 0.38493460186671, -0.85214708824206,
			4.8972281541877, -3.0502617256965, 0.039420536879154,
			0.12558408424308, -0.2799932969871, 1.389979956946,
			-2.018991502357, -8.2147637173963E-3, -0.47596035734923,
			0.0439840744735, -0.44476435428739, 0.90572070719733,
			0.70522450087967, 0.10770512626332, -0.32913623258954,
			-0.50871062041158, -0.022175400873096, 0.094260751665092,
			0.16436278447961, -0.013503372241348, -0.014834345352472,
			5.7922953628084E-4, 3.2308904703711E-03, 8.0964802996215E-5,
			-1.6557679795037E-4, -4.4923899061815E-5 };

	private static double[] NH3ABReg3 = { 0.0, 0.201464004206875E4,
			0.374696550136983E1, -0.219921901054187E-1, 0.875131686009950E-4 };

	private static int[] IReg3aPH2T = { 0, -12, -12, -12, -12, -12, -12, -12,
			-12, -10, -10, -10, -8, -8, -8, -8, -5, -3, -2, -2, -2, -1, -1, 0,
			0, 1, 3, 3, 4, 4, 10, 12 };

	private static int[] JReg3aPH2T = { 0, 0, 1, 2, 6, 14, 16, 20, 22, 1, 5,
			12, 0, 2, 4, 10, 2, 0, 1, 3, 4, 0, 2, 0, 1, 1, 0, 1, 0, 3, 4, 5 };

	private static double[] NReg3aPH2T = { 0.0, -0.133645667811215E-6,
			0.455912656802978E-5, -0.146294640700979E-4, 0.639341312970080E-2,
			0.372783927268847E3, -0.718654377460447E4, 0.573494752103400E6,
			-0.267569329111439E7, -0.334066283302614E-4, -0.245479214069597E-1,
			0.478087847764996E2, 0.764664131818904E-5, 0.128350627676972E-2,
			0.171219081377331E-1, -0.851007304583213E1, -0.136513461629781E-1,
			-0.384460997596657E-5, 0.337423807911655E-2, -0.551624873066791,
			0.729202277107470, -0.992522757376041E-2, -0.119308831407288,
			0.793929190615421, 0.454270731799386, 0.209998591259910,
			-0.642109823904738E-2, -0.235155868604540E-1, 0.252233108341612E-2,
			-0.764885133368119E-2, 0.136176427574291E-1, -0.133027883575669E-1 };

	private static int[] IReg3bPH2T = { 0, -12, -12, -10, -10, -10, -10, -10,
			-8, -8, -8, -8, -8, -6, -6, -6, -4, -4, -3, -2, -2, -1, -1, -1, -1,
			-1, -1, 0, 0, 1, 3, 5, 6, 8 };

	private static int[] JReg3bPH2T = { 0, 0, 1, 0, 1, 5, 10, 12, 0, 1, 2, 4,
			10, 0, 1, 2, 0, 1, 5, 0, 4, 2, 4, 6, 10, 14, 16, 0, 2, 1, 1, 1, 1,
			1 };

	private static double[] NReg3bPH2T = { 0.0, 0.323254573644920E-4,
			-0.127575556587181E-3, -0.475851877356068E-3, 0.156183014181602E-2,
			0.105724860113781, -0.858514221132534E2, 0.724140095480911E3,
			0.296475810273257E-2, -0.592721983365988E-2, -0.126305422818666E-1,
			-0.115716196364853, 0.849000969739595E2, -0.108602260086615E-1,
			0.154304475328851E-1, 0.750455441524466E-1, 0.252520973612982E-1,
			-0.602507901232996E-1, -0.307622221350501E1, -0.574011959864879E-1,
			0.503471360939849E1, -0.925081888584834, 0.391733882917546E1,
			-0.773146007130190E2, 0.949308762098587E4, -0.141043719679409E7,
			0.849166230819026E7, 0.861095729446704, 0.323346442811720,
			0.873281936020439, -0.436653048526683, 0.286596714529479,
			-0.131778331276228, 0.676682064330275E-2 };

	private static int[] IReg3aPH2V = { 0, -12, -12, -12, -12, -10, -10, -10,
			-8, -8, -6, -6, -6, -4, -4, -3, -2, -2, -1, -1, -1, -1, 0, 0, 1, 1,
			1, 2, 2, 3, 4, 5, 8 };

	private static int[] JReg3aPH2V = { 0, 6, 8, 12, 18, 4, 7, 10, 5, 12, 3, 4,
			22, 2, 3, 7, 3, 16, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0, 2, 0, 2, 2, 2 };

	private static double[] NReg3aPH2V = { 0.0, 0.529944062966028E-2,
			-0.170099690234461, 0.111323814312927E2, -0.217898123145125E4,
			-0.506061827980875E-3, 0.556495239685324, -0.943672726094016E1,
			-0.297856807561527, 0.939353943717186E2, 0.192944939465981E-1,
			0.421740664704763, -0.368914126282330E7, -0.737566847600639E-2,
			-0.354753242424366, -0.199768169338727E1, 0.115456297059049E1,
			0.568366875815960E4, 0.808169540124668E-2, 0.172416341519307,
			0.104270175292927E1, -0.297691372792847, 0.560394465163593,
			0.275234661176914, -0.148347894866012, -0.651142513478515E-1,
			-0.292468715386302E1, 0.664876096952665E-1, 0.352335014263844E1,
			-0.146340792313332E-1, -0.224503486668184E1, 0.110533464706142E1,
			-0.408757344495612E-1 };

	private static int[] IReg3bPH2V = { 0, -12, -12, -8, -8, -8, -8, -8, -8,
			-6, -6, -6, -6, -6, -6, -4, -4, -4, -3, -3, -2, -2, -1, -1, -1, -1,
			0, 1, 1, 2, 2 };

	private static int[] JReg3bPH2V = { 0, 0, 1, 0, 1, 3, 6, 7, 8, 0, 1, 2, 5,
			6, 10, 3, 6, 10, 0, 2, 1, 2, 0, 1, 4, 5, 0, 0, 1, 2, 6 };

	private static double[] NReg3bPH2V = { 0.0, -0.225196934336318E-8,
			0.140674363313486E-7, 0.233784085280560E-5, -0.331833715229001E-4,
			0.107956778514318E-2, -0.271382067378863, 0.107202262490333E1,
			-0.853821329075382, -0.215214194340526E-4, 0.769656088222730E-3,
			-0.431136580433864E-2, 0.453342167309331, -0.507749535873652,
			-0.100475154528389E3, -0.219201924648793, -0.321087965668917E1,
			0.607567815637771E3, 0.557686450685932E-3, 0.187499040029550,
			0.905368030448107E-2, 0.285417173048685, 0.329924030996098E-1,
			0.239897419685483, 0.482754995951394E1, -0.118035753702231E2,
			0.169490044091791, -0.179967222507787E-1, 0.371810116332674E-1,
			-0.536288335065096E-1, 0.160697101092520E1 };

	private static int[] IReg3aPS2T = { 0, -12, -12, -10, -10, -10, -10, -8,
			-8, -8, -8, -6, -6, -6, -5, -5, -5, -4, -4, -4, -2, -2, -1, -1, 0,
			0, 0, 1, 2, 2, 3, 8, 8, 10 };

	private static int[] JReg3aPS2T = { 0, 28, 32, 4, 10, 12, 14, 5, 7, 8, 28,
			2, 6, 32, 0, 14, 32, 6, 10, 36, 1, 4, 1, 6, 0, 1, 4, 0, 0, 3, 2, 0,
			1, 2 };

	private static double[] NReg3aPS2T = { 0.0, 0.150042008263875E10,
			-0.159397258480424E12, 0.502181140217975E-3, -0.672057767855466E2,
			0.145058545404456E4, -0.823889534888890E4, -0.154852214233853,
			0.112305046746695E2, -0.297000213482822E2, 0.438565132635495E11,
			0.137837838635464E-2, -0.297478527157462E1, 0.971777947349413E13,
			-0.571527767052398E-4, 0.288307949778420E5, -0.744428289262703E14,
			0.128017324848921E2, -0.368275545889071E3, 0.664768904779177E16,
			0.449359251958880E-1, -0.422897836099655E1, -0.240614376434179,
			-0.474341365254924E1, 0.724093999126110, 0.923874349695897,
			0.399043655281015E1, 0.384066651868009E-1, -0.359344365571848E-2,
			-0.735196448821653, 0.188367048396131, 0.141064266818704E-3,
			-0.257418501496337E-2, 0.123220024851555E-2 };

	private static int[] IReg3bPS2T = { 0, -12, -12, -12, -12, -8, -8, -8, -6,
			-6, -6, -5, -5, -5, -5, -5, -4, -3, -3, -2, 0, 2, 3, 4, 5, 6, 8,
			12, 14 };

	private static int[] JReg3bPS2T = { 0, 1, 3, 4, 7, 0, 1, 3, 0, 2, 4, 0, 1,
			2, 4, 6, 12, 1, 6, 2, 0, 1, 1, 0, 24, 0, 3, 1, 2 };

	private static double[] NReg3bPS2T = { 0.0, 0.527111701601660,
			-0.401317830052742E2, 0.153020073134484E3, -0.224799398218827E4,
			-0.193993484669048, -0.140467557893768E1, 0.426799878114024E2,
			0.752810643416743, 0.226657238616417E2, -0.622873556909932E3,
			-0.660823667935396, 0.841267087271658, -0.253717501764397E2,
			0.485708963532948E3, 0.880531517490555E3, 0.265015592794626E7,
			-0.35928715025783, -0.656991567673753E3, 0.241768149185367E1,
			0.856873461222588, 0.655143675313458, -0.213535213206406,
			0.562974957606348E-2, -0.316955725450471E15, -0.699997000152457E-3,
			0.119845803210767E-1, 0.193848122022095E-4, -0.215095749182309E-4 };

	private static int[] IReg3aPS2V = { 0, -12, -12, -12, -10, -10, -10, -10,
			-8, -8, -8, -8, -6, -5, -4, -3, -3, -2, -2, -1, -1, 0, 0, 0, 1, 2,
			4, 5, 6 };

	private static int[] JReg3aPS2V = { 0, 10, 12, 14, 4, 8, 10, 20, 5, 6, 14,
			16, 28, 1, 5, 2, 4, 3, 8, 1, 2, 0, 1, 3, 0, 0, 2, 2, 0 };

	private static double[] NReg3aPS2V = { 0.0, 0.795544074093975E2,
			-0.238261242984590E4, 0.176813100617787E5, -0.110524727080379E-2,
			-0.153213833655326E2, 0.297544599376982E3, -0.350315206871242E8,
			0.277513761062119, -0.523964271036888, -0.148011182995403E6,
			0.160014899374266E7, 0.170802322663427E13, 0.246866996006494E-3,
			0.165326084797980E1, -0.118008384666987, 0.253798642355900E1,
			0.965127704669424, -0.282172420532826E2, 0.203224612353823,
			0.110648186063513E1, 0.526127948451280, 0.277000018736321,
			0.108153340501132E1, -0.744127885357893E-1, 0.164094443541384E-1,
			-0.680468275301065E-1, 0.257988576101640E-1, -0.145749861944416E-3 };

	private static int[] IReg3bPS2V = { 0, -12, -12, -12, -12, -12, -12, -10,
			-10, -10, -10, -8, -5, -5, -5, -4, -4, -4, -4, -3, -2, -2, -2, -2,
			-2, -2, 0, 0, 0, 1, 1, 2 };
	private static int[] JReg3bPS2V = { 0, 0, 1, 2, 3, 5, 6, 0, 1, 2, 4, 0, 1,
			2, 3, 0, 1, 2, 3, 1, 0, 1, 2, 3, 4, 12, 0, 1, 2, 0, 2, 2 };

	private static double[] NReg3bPS2V = { 0.0, 0.591599780322238E-4,
			-0.185465997137856E-2, 0.104190510480013E-1, 0.598647302038590E-2,
			-0.771391189901699, 0.172549765557036E1, -0.467076079846526E-3,
			0.134533823384439E-1, -0.808094336805495E-1, 0.508139374365767,
			0.128584643361683E-2, -0.163899353915435E1, 0.586938199318063E1,
			-0.292466667918613E1, -0.614076301499537E-2, 0.576199014049172E1,
			-0.121613320606788E2, 0.167637540957944E1, -0.744135838773463E1,
			0.378168091437659E-1, 0.401432203027688E1, 0.160279837479185E2,
			0.317848779347728E1, -0.358362310304853E1, -0.115995260446827E7,
			0.199256573577909, -0.122270624794624, -0.191449143716586E2,
			-0.150448002905284E-1, 0.146407900162154E2, -0.327477787188230E1 };

	private static int[] IReg3aPT2V = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0 };

	private static int[] JReg3aPT2V = { 0, 1, 2, 0, 1, 2, 1, 2, 1, 2, 0, 1, 0,
			1, 0, 0, 3, 0, 4 };

	private static int[] KReg3aPT2V = { 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5,
			5, 6, 8, 8, 12, 12 };

	private static double[] NReg3aPT2V = { 0.0, 0.748874448725080E-2,
			0.348351238844209E-3, -0.118427102787648E-3, -0.332156380721166E-1,
			-0.797144480049465E-3, 0.608359392259313E-1, 0.617493752916276E-3,
			-0.564778221803544E-1, -0.161628813019544E-3,
			-0.876842774061156E-2, 0.263271308078056E-1, 0.172887471616688E-1,
			-0.490643103428227E-2, -0.106812857513379E-1, 0.153431224177324E-2,
			-0.383218936572771E-8, -0.455907876060086E-4,
			-0.251644090693395E-11 };

	private static int[] IReg3bPT2V = { 0, 0, 1, 2, 0, 0, 1, 1, 2, 4, 0, 0, 0,
			1, 2, 0, 1, 0, 2, 3, 0, 5, 0, 0, 1, 2, 6, 6 };

	private static int[] JReg3bPT2V = { 0, 2, 2, 0, 2, 3, 0, 5, 0, 1, 2, 0, 2,
			0, 0, 1, 1, 0, 2, 0, 1, 2, 0, 1, 0, 3, 3, 5 };

	private static int[] KReg3bPT2V = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 3, 3,
			3, 3, 4, 5, 6, 8, 8, 10, 10, 12, 12, 12, 12, 12, 12 };

	private static double[] NReg3bPT2V = { 0.0, -0.487687959756292E-1,
			0.135336193587336E-2, 0.413013399556249, 0.122945704230431,
			-0.141140213612559E-3, 0.178357790645547E-1, 0.395174104863528E-7,
			-0.585398228522495, 0.594938907295817E-4, -0.119057019174713,
			-0.194570794816001E-2, 0.427529172119353E-1, -0.760561375637742E-1,
			0.299546836134716, 0.139391657221250E-1, -0.278468126229603E-1,
			0.195041855369227E-2, 0.375831122504734E-4, 0.125685384163741E-3,
			-0.762583183784896E-2, -0.938937201479048E-6, 0.134876477124427E-1,
			0.634557820845727E-2, -0.291792573898258E-1, -0.136017045350123E-5,
			0.454845318075243E-7, -0.239512088942747E-9 };

	private static int[] IReg3cPT2V = { 0, 0, 0, 0, 1, 1, 2, 4, 0, 0, 0, 2, 1,
			2, 2, 0, 0, 1, 1, 2, 3, 0, 0, 1, 2, 0, 0, 0, 0, 0, 2, 3 };

	private static int[] JReg3cPT2V = { 0, 2, 3, 4, 0, 3, 0, 0, 2, 4, 5, 0, 3,
			0, 4, 0, 2, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 4, 5, 6, 2, 1 };

	private static int[] KReg3cPT2V = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2,
			2, 2, 3, 3, 3, 3, 3, 3, 5, 6, 6, 8, 10, 10, 10, 12, 12, 12, 12 };

	private static double[] NReg3cPT2V = { 0.0, -0.151226672652382E-1,
			0.219075237766159E-3, 0.114144924756274E-4, -0.470815410341398E-2,
			0.105510662596481E-3, 0.487932009131791, 0.424198281757227E-3,
			0.305426466180436E-1, -0.174690467895005E-4, 0.509486478795057E-6,
			-0.143708991982910E1, -0.526750160303121E-4, 0.122116000890535E1,
			0.104163340234817E-6, 0.218460997189951E-2, -0.152017319222412E-1,
			-0.294106550573793E-1, 0.165284534427183E-1, -0.335234582911578,
			-0.212663865441498E-2, 0.753543651141502E-1, -0.769927079971342E-1,
			-0.247039860992736E-1, -0.223745526548978E-2,
			-0.113782324304171E-1, 0.122241653100711E-1, -0.163238458626065E-6,
			0.580172883857322E-9, -0.419492118766324E-11,
			-0.660478916724586E-6, -0.119419038095450E-5 };

	private static int[] IReg3dPT2V = { 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0,
			1, 0, 0, 1, 0, 1 };

	private static int[] JReg3dPT2V = { 0, 1, 3, 0, 1, 3, 5, 0, 0, 1, 0, 0, 1,
			0, 0, 1, 0, 1, 0 };

	private static int[] KReg3dPT2V = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3,
			3, 4, 4, 4, 5, 5 };

	private static double[] NReg3dPT2V = { 0.0, 0.664933791260178E-1,
			0.571985898251817E-6, -0.274711031859796, -0.252680942664202,
			-0.392289014485859E-6, 0.256374705633001E-10, 0.104023037508896E1,
			0.643907516287541E-3, 0.389907326497054, -0.160832918484839E1,
			0.713823865906627E-3, -0.303433314767063, 0.125833184484538E1,
			-0.792816174523651E-4, 0.118639803204261, -0.496046407723234,
			-0.185997001981635E-1, 0.785791469799311E-1 };

	private static int[] IReg3ePT2V = { 0, 0, 0, 1, 5, 0, 1, 5, 0, 0, 3, 4, 0,
			0, 0, 5, 4, 4, 0, 0, 0, 1, 2, 5, 0, 1, 1, 2, 2, 3, 3, 3, 0, 0, 1,
			4, 6, 0, 1, 2, 4, 6 };

	private static int[] JReg3ePT2V = { 0, 1, 2, 0, 6, 2, 0, 2, 3, 5, 4, 1, 3,
			4, 6, 0, 0, 1, 0, 1, 2, 1, 2, 1, 0, 0, 2, 0, 1, 0, 1, 2, 1, 5, 0,
			2, 1, 0, 1, 0, 0, 2 };

	private static int[] KReg3ePT2V = { 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 4,
			4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 10, 10,
			10, 10, 10, 12, 12, 12, 12, 12 };

	private static double[] NReg3ePT2V = { 0.0, 0.301448430808593E-1,
			-0.335916193888413E-3, -0.112702460700323, -0.877499173794533E-20,
			0.187152530917710E-3, 0.356911241995526E-2, -0.418986486825425E-11,
			0.322726674818840E-6, -0.120527379090314E-10,
			-0.817132957960820E-13, -0.289296115834392E-7,
			-0.194260348835721E-6, -0.813610292866497E-9,
			0.391792707971363E-13, -0.519162117274822E-7,
			-0.538255397523665E-6, 0.200848495263495E-7, -0.721941889977446E-2,
			-0.313609300142694E-2, 0.260485012629641E-4, -0.370031971083042E-3,
			0.759164825488741E-7, -0.169209023050985E-9, 0.396910783770869E-1,
			0.127931680641201E-1, 0.191456960283807E-6, 0.766425815924100E-3,
			-0.431282885175170E-5, 0.225545818343096E-4, 0.488412051812406E-7,
			-0.356918730340587E-9, 0.303625591962761E-3, 0.124536067659580E-12,
			-0.550701260682904E-2, 0.252719052207758E-11,
			0.133491926757520E-12, -0.607043036830454E-2, 0.287671539256386E-5,
			-0.958920650759504E-4, 0.102650393925122E-7, -0.155995837253683E-15 };

	private static int[] IReg3fPT2V = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 2, 0, 2, 3 };

	private static int[] JReg3fPT2V = { 0, 1, 2, 3, 1, 2, 1, 4, 0, 1, 3, 2, 0,
			1, 0, 0, 4, 1 };

	private static int[] KReg3fPT2V = { 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 5,
			5, 5, 6, 6, 6 };

	private static double[] NReg3fPT2V = { 0.0, 0.329890852403526E-4,
			0.379781955709120E-4, 0.252360667718127E-6, -0.407113420864393E-3,
			-0.357933830043717E-4, -0.245865969502991E-3, 0.525013249033141E-9,
			0.321621088787326E-2, 0.439053317238974E-3, -0.587768799763869E-7,
			0.262763491213355E-5, -0.214747822942469E-2, -0.635909964040088E-4,
			-0.115529419916092E-6, 0.785448130272979E-3,
			-0.259174703895765E-15, 0.184266268449228E-10 };

	private static int[] IReg3gPT2V = { 0, 0, 0, 0, 0, 1, 1, 2, 3, 3, 3, 5, 8,
			10, 14, 16, 24, 26, 28, 30, 32 };
	private static int[] JReg3gPT2V = { 0, 0, 1, 3, 6, 0, 2, 5, 1, 4, 8, 0, 6,
			10, 4, 22, 10, 12, 14, 16, 18 };

	private static double[] NReg3gPT2V = { 0.0, 0.125537070183712E-2,
			0.130245527248376E-2, 0.103367194207180E-1, -0.254795720214314E-1,
			-0.185955960512067E-3, -0.960082399513164E-2, 0.474944869074855,
			-0.503420527214133E-2, -0.687909934564732, 0.307310678953686E2,
			-0.168658389645091E-3, 0.654223452156635E3, -0.320317604761443E6,
			0.197974246206705E3, 0.114160422499244E14, -0.915669841312590E10,
			0.278339257740960E13, -0.281900719117892E15, 0.119502836257688E17,
			-0.183657231751509E18 };

	private static double[] NReg4 = { 0.0, 1167.0521452767, -724213.16703206,
			-17.073846940092, 12020.82470247, -3232555.0322333, 14.91510861353,
			-4823.2657361591, 405113.40542057, -0.23855557567849,
			650.17534844798 };

	private static double[] aReg4 = { 0.0, -7.85951783, 1.84408259,
			-11.7866497, 22.6807411, -15.9618719, 1.80122502 };

	private static double[] bReg4 = { 0.0, 1.99274064, 1.09965342,
			-0.510839303, -1.75493479, -45.5170352, -674694.45 };

	private static double[] cReg4 = { 0.0, -2.0315024, -2.6830294, -5.38626492,
			-17.2991605, -44.7586581, -63.9201063 };

	private static double[] dReg4 = { 0.0, -0.0000000565, 2690.66631,
			127.287297, -135.003439, 0.981825814 };

	private static int[] J0Reg5 = { 0, 0, 1, -3, -2, -1, 2 };
	private static double[] N0Reg5 = { 0.0, -0.13179983674201E2,
			0.68540841634434E1, -0.24805148933466E-1, 0.36901534980333,
			-0.31161318213925E1, -0.32961626538917 };
	private static int[] IReg5 = { 0, 1, 1, 1, 2, 3 };
	private static int[] JReg5 = { 0, 0, 1, 3, 9, 3 };
	private static double[] NReg5 = { 0.0, -0.12563183589592E-3,
			0.21774678714571E-2, -0.4594282089991E-2, -0.39724828359569E-5,
			0.12919228289784E-6 };

	private static double[] NBound23 = { 0.0, 348.05185628969,
			-1.1671859879975, 1.0192970039326E-03, 572.54459862746,
			13.91883977887 };

	private static double[] NBound2bc = { 0.0, 0.90584278514723E3,
			-0.67955786399241, 0.12809002730136E-3, 0.26526571908428E4,
			0.45257578905948E1 };

	private static double[] NBound2ab_S = { 0.0, -0.349898083432139E4,
			0.257560716905876E4, -0.421073558227969E3, 0.276349063799944E2 };

	// [0..3] liwai
	private static double[] N0Visc = { 1.0, 0.978197, 0.579829, -0.202354 };

	private static int[] IVisc = { 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3,
			3, 4, 4, 5, 6 };
	private static int[] JVisc = { 0, 0, 1, 4, 5, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2,
			3, 0, 3, 1, 3 };

	private static double[] NVisc = { 0.0, 0.5132047, 0.3205656, -0.7782567,
			0.1885447, 0.2151778, 0.7317883, 1.241044, 1.476783, -0.2818107,
			-1.070786, -1.263184, 0.1778064, 0.460504, 0.2340379, -0.4924179,
			-0.0417661, 0.1600435, -0.01578386, -0.003629481 };

	private static double[] N0ThCon = {// 0.0, [0..3] liwai
	1.0, 6.978267, 2.599096, -0.998254 };

	private static double[][] NThCon = {// 0.0,
			{ 1.3293046, -0.40452437, 0.2440949, 0.018660751, -0.12961068,
					0.044809953 },
			{ 1.7018363, -2.2156845, 1.6511057, -0.76736002, 0.37283344,
					-0.1120316 },
			{ 5.2246158, -10.124111, 4.9874687, -0.27297694, -0.43083393,
					0.13333849 },
			{ 8.7127675, -9.5000611, 4.3786606, -0.91783782, 0.0, 0.0 },
			{ -1.8525999, 0.9340469, 0.0, 0.0, 0.0, 0.0 } };

	private static int[] IEps = { 0, 1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 10 };

	private static double[] JEps = { 0.0, 0.25, 1, 2.5, 1.5, 1.5, 2.5, 2, 2, 5,
			0.5, 10 };

	private static double[] NEps = { 0.0, 0.978224486826, -0.957771379375,
			0.237511794148, 0.714692244396, -0.298217036956, -0.108863472196,
			0.949327488264E-1, -0.980469816509E-2, 0.165167634970E-4,
			0.937359795772E-4, -0.123179218720E-9, 0.196096504426E-2 };

	// double ZBRENT2(double X1, double X2, double TOL , double PrmA , double
	// PrmB ,int Nbr);
	// double ZBRENT1(double X1 , double X2 , double TOL ,double PrmA ,int Nbr);
	// double HMaxX(double X );
	// double HMaxX2T(double Temp_Min , double Temp_Max ,double X );
	// double TV2EPS(double Temperature,double Volume);
	// double TVLAMD2N(double Temperature,double Volume,double Lamd);
	// double T2P(double Temperature);
	// double T2PBound23(double Temperature);
	// double P2TBound23(double Pressure);
	// void SubRangeSatLiqByT(double Temperature , HInteger SubRange);
	// void SubRangeSatVapByT(double Temperature , HInteger SubRange);
	// void SubRangeSatLiqByP(double Pressure , HInteger SubRange);
	// void SubRangeSatVapByP(double Pressure , HInteger SubRange);
	//
	// void SubRange2abcByPH(double Pressure,double Enthalpy, HInteger SubRang);
	// void SubRange2abcByHS(double Enthalpy , double Entropy , HInteger
	// SubRang);
	// void SubRange3abcdefgByPT(double Pressure,double Temperature, HInteger
	// SubRang);
	// double PT2SReg2(double Pressure,double Temperature);
	// double TH2SReg1(double Temperature,double Enthalpy);
	// double TH2PReg1(double Temperature,double Enthalpy);
	// double PT2VReg2(double Pressure,double Temperature);
	// double PV2HReg2(double Pressure,double Volume);
	// double PV2SReg2(double Pressure,double Volume);

	// double VMinX(double X );
	// double VMaxX(double X );
	// void SubRangeByP(double Pressure, HInteger SubRange);

	// ///////////////////////////////////////////05 4.22 23:35 ��

	static double GammaReg1(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result + NReg1[I] * Math.pow((7.1 - Pi), IReg1[I])
					* Math.pow((Tau - 1.222), JReg1[I]);
		return Result;

	}

	static double GammaPiReg1(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result - NReg1[I] * IReg1[I]
					* Math.pow((7.1 - Pi), (IReg1[I] - 1))
					* Math.pow((Tau - 1.222), JReg1[I]);
		return Result;
	}

	static double GammaPiPiReg1(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result + NReg1[I] * IReg1[I] * (IReg1[I] - 1)
					* Math.pow((7.1 - Pi), (IReg1[I] - 2))
					* Math.pow((Tau - 1.222), JReg1[I]);
		return Result;
	}

	static double GammaTauReg1(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result + NReg1[I] * Math.pow((7.1 - Pi), IReg1[I])
					* JReg1[I] * Math.pow((Tau - 1.222), (JReg1[I] - 1));
		return Result;
	}

	static double GammaTauTauReg1(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result + NReg1[I] * Math.pow((7.1 - Pi), IReg1[I])
					* JReg1[I] * (JReg1[I] - 1)
					* Math.pow((Tau - 1.222), (JReg1[I] - 2));
		return Result;
	}

	static double GammaPiTauReg1(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result - NReg1[I] * IReg1[I]
					* Math.pow((7.1 - Pi), (IReg1[I] - 1)) * JReg1[I]
					* Math.pow((Tau - 1.222), (JReg1[I] - 1));
		return Result;
	}

	static double SetaReg1PH(double Eta, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 20; I++)
			Result = Result + NReg1PH[I] * Math.pow(Pi, IReg1PH[I])
					* Math.pow((Eta + 1), JReg1PH[I]);
		return Result;
	}

	static double SetaReg1PS(double Fai, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 20; I++)
			Result = Result + NReg1ps[I] * Math.pow(Pi, IReg1ps[I])
					* Math.pow((Fai + 2), JReg1ps[I]);
		return Result;
	}

	static double PiReg1HS(double Eta, double Fai) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 19; I++)
			Result = Result + NReg1HS[I] * Math.pow((Eta + 0.05), IReg1HS[I])
					* Math.pow((Fai + 0.05), JReg1HS[I]);
		return Result;
	}

	static double Gamma0Reg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = Math.log(Pi);
		for (I = 1; I <= 9; I++)
			Result = Result + N0Reg2[I] * Math.pow(Tau, J0Reg2[I]);
		return Result;
	}

	static double Gamma0PiReg2(double Tau, double Pi) {
		return 1 / Pi;
	}

	static double Gamma0PiPiReg2(double Tau, double Pi) {
		return -1 / (Pi * Pi);
	}

	static double Gamma0TauReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 9; I++)
			Result = Result + N0Reg2[I] * J0Reg2[I]
					* Math.pow(Tau, (J0Reg2[I] - 1));
		return Result;
	}

	static double Gamma0TauTauReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 9; I++)
			Result = Result + N0Reg2[I] * J0Reg2[I] * (J0Reg2[I] - 1)
					* Math.pow(Tau, (J0Reg2[I] - 2));
		return Result;
	}

	static double Gamma0PiTauReg2(double Tau, double Pi) {
		return 0;
	}

	static double GammarReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 43; I++)
			Result = Result + NReg2[I] * Math.pow(Pi, IReg2[I])
					* Math.pow((Tau - 0.5), JReg2[I]);
		return Result;
	}

	static double GammarPiReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 43; I++)
			Result = Result + NReg2[I] * IReg2[I]
					* Math.pow(Pi, (IReg2[I] - 1))
					* Math.pow((Tau - 0.5), JReg2[I]);
		return Result;
	}

	static double GammarPiPiReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 43; I++)
			Result = Result + NReg2[I] * IReg2[I] * (IReg2[I] - 1)
					* Math.pow(Pi, (IReg2[I] - 2))
					* Math.pow((Tau - 0.5), JReg2[I]);
		return Result;
	}

	static double GammarTauReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 43; I++)
			Result = Result + NReg2[I] * Math.pow(Pi, IReg2[I]) * JReg2[I]
					* Math.pow((Tau - 0.5), (JReg2[I] - 1));
		return Result;
	}

	static double GammarTauTauReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 43; I++)
			Result = Result + NReg2[I] * Math.pow(Pi, IReg2[I]) * JReg2[I]
					* (JReg2[I] - 1) * Math.pow((Tau - 0.5), (JReg2[I] - 2));
		return Result;
	}

	static double GammarPiTauReg2(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 43; I++)
			Result = Result + NReg2[I] * IReg2[I]
					* Math.pow(Pi, (IReg2[I] - 1)) * JReg2[I]
					* Math.pow((Tau - 0.5), (JReg2[I] - 1));
		return Result;
	}

	static double SetaReg2aPH(double Eta, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 34; I++)
			Result = Result + NReg2aPH[I] * Math.pow(Pi, IReg2aPH[I])
					* Math.pow((Eta - 2.1), JReg2aPH[I]);
		return Result;
	}

	static double SetaReg2bPH(double Eta, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 38; I++)
			Result = Result + NReg2bPH[I] * Math.pow((Pi - 2), IReg2bPH[I])
					* Math.pow((Eta - 2.6), JReg2bPH[I]);
		return Result;
	}

	static double SetaReg2cPH(double Eta, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 23; I++)
			Result = Result + NReg2cPH[I] * Math.pow((Pi + 25), IReg2cPH[I])
					* Math.pow((Eta - 1.8), JReg2cPH[I]);
		return Result;
	}

	static double SetaReg2aPS(double Fai, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 46; I++)
			Result = Result + NReg2aPS[I] * Math.pow(Pi, IReg2aPS[I])
					* Math.pow((Fai - 2), JReg2aPS[I]);
		return Result;
	}

	static double SetaReg2bPS(double Fai, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 44; I++)
			Result = Result + NReg2bPS[I] * Math.pow(Pi, IReg2bPS[I])
					* Math.pow((10 - Fai), JReg2bPS[I]);
		return Result;
	}

	static double SetaReg2cPS(double Fai, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 30; I++)
			Result = Result + NReg2cPS[I] * Math.pow(Pi, IReg2cPS[I])
					* Math.pow((2 - Fai), JReg2cPS[I]);
		return Result;
	}

	static double PiReg2aHS(double Eta, double Fai) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 29; I++)
			Result = Result + NReg2aHS[I] * Math.pow((Eta - 0.5), IReg2aHS[I])
					* Math.pow((Fai - 1.2), JReg2aHS[I]);
		return Math.pow(Result, 4);

	}

	static double PiReg2bHS(double Eta, double Fai) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 33; I++)
			Result = Result + NReg2bHS[I] * Math.pow((Eta - 0.6), IReg2bHS[I])
					* Math.pow((Fai - 1.01), JReg2bHS[I]);
		return Math.pow(Result, 4);

	}

	static double PiReg2cHS(double Eta, double Fai) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 31; I++)
			Result = Result + NReg2cHS[I] * Math.pow((Eta - 0.7), IReg2cHS[I])
					* Math.pow((Fai - 1.1), JReg2cHS[I]);
		return Math.pow(Result, 4);

	}

	static double FiReg3(double Tau, double Delta) {
		int I;
		double Result;

		Result = NReg3[1] * Math.log(Delta);
		for (I = 2; I <= 40; I++)
			Result = Result + NReg3[I] * Math.pow(Delta, IReg3[I])
					* Math.pow(Tau, JReg3[I]);
		return Result;
	}

	static double FiDeltaReg3(double Tau, double Delta) {
		int I;
		double Result;

		Result = NReg3[1] / Delta;
		for (I = 2; I <= 40; I++)
			Result = Result + NReg3[I] * IReg3[I]
					* Math.pow(Delta, (IReg3[I] - 1)) * Math.pow(Tau, JReg3[I]);
		return Result;
	}

	static double FiDeltaDeltaReg3(double Tau, double Delta) {
		int I;
		double Result;

		Result = -NReg3[1] / (Delta * Delta);
		for (I = 2; I <= 40; I++)
			Result = Result + NReg3[I] * IReg3[I] * (IReg3[I] - 1)
					* Math.pow(Delta, (IReg3[I] - 2)) * Math.pow(Tau, JReg3[I]);
		return Result;
	}

	static double FiTauReg3(double Tau, double Delta) {
		int I;
		double Result;

		Result = 0;
		for (I = 2; I <= 40; I++)
			Result = Result + NReg3[I] * Math.pow(Delta, IReg3[I]) * JReg3[I]
					* Math.pow(Tau, (JReg3[I] - 1));
		return Result;
	}

	static double FiTauTauReg3(double Tau, double Delta) {
		int I;
		double Result;

		Result = 0;
		for (I = 2; I <= 40; I++)
			Result = Result + NReg3[I] * Math.pow(Delta, IReg3[I]) * JReg3[I]
					* (JReg3[I] - 1) * Math.pow(Tau, (JReg3[I] - 2));
		return Result;
	}

	static double FiDeltaTauReg3(double Tau, double Delta) {
		int I;
		double Result;

		Result = 0;
		for (I = 2; I <= 40; I++)
			Result = Result + NReg3[I] * IReg3[I]
					* Math.pow(Delta, (IReg3[I] - 1)) * JReg3[I]
					* Math.pow(Tau, (JReg3[I] - 1));
		return Result;
	}

	static double Gamma0Reg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = Math.log(Pi);
		for (I = 1; I <= 6; I++)
			Result = Result + N0Reg5[I] * Math.pow(Tau, J0Reg5[I]);
		return Result;
	}

	static double Gamma0PiReg5(double Tau, double Pi) {
		return 1 / Pi;
	}

	static double Gamma0PiPiReg5(double Tau, double Pi) {
		return -1 / (Pi * Pi);
	}

	static double Gamma0TauReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 6; I++)
			Result = Result + N0Reg5[I] * J0Reg5[I]
					* Math.pow(Tau, (J0Reg5[I] - 1));
		return Result;
	}

	static double Gamma0TauTauReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 6; I++)
			Result = Result + N0Reg5[I] * J0Reg5[I] * (J0Reg5[I] - 1)
					* Math.pow(Tau, (J0Reg5[I] - 2));
		return Result;
	}

	static double Gamma0PiTauReg5(double Tau, double Pi) {
		return 0;
	}

	static double GammarReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 5; I++)
			Result = Result + NReg5[I] * Math.pow(Pi, IReg5[I])
					* Math.pow(Tau, JReg5[I]);
		return Result;
	}

	static double GammarPiReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 5; I++)
			Result = Result + NReg5[I] * IReg5[I]
					* Math.pow(Pi, (IReg5[I] - 1)) * Math.pow(Tau, JReg5[I]);
		return Result;
	}

	static double GammarPiPiReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 5; I++)
			Result = Result + NReg5[I] * IReg5[I] * (IReg5[I] - 1)
					* Math.pow(Pi, (IReg5[I] - 2)) * Math.pow(Tau, JReg5[I]);
		return Result;
	}

	static double GammarTauReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 5; I++)
			Result = Result + NReg5[I] * Math.pow(Pi, IReg5[I]) * JReg5[I]
					* Math.pow(Tau, (JReg5[I] - 1));
		return Result;
	}

	static double GammarTauTauReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 5; I++)
			Result = Result + NReg5[I] * Math.pow(Pi, IReg5[I]) * JReg5[I]
					* (JReg5[I] - 1) * Math.pow(Tau, (JReg5[I] - 2));
		return Result;
	}

	static double GammarPiTauReg5(double Tau, double Pi) {
		int I;
		double Result;

		Result = 0;
		for (I = 1; I <= 5; I++)
			Result = Result + NReg5[I] * IReg5[I]
					* Math.pow(Pi, (IReg5[I] - 1)) * JReg5[I]
					* Math.pow(Tau, (JReg5[I] - 1));
		return Result;
	}

	static double PsiVisc(double Tau, double Delta) {
		double Psi0, Psi1;
		int I;

		Psi0 = 0;
		for (I = 0; I <= 3; I++)
			Psi0 = Psi0 + N0Visc[I] * Math.pow(Tau, I);
		Psi0 = 1 / (Math.pow(Tau, 0.5) * Psi0);
		Psi1 = 0;
		for (I = 1; I <= 19; I++)
			Psi1 = Psi1 + NVisc[I] * Math.pow((Delta - 1.0), IVisc[I])
					* Math.pow((Tau - 1.0), JVisc[I]);
		Psi1 = Math.exp(Delta * Psi1);
		return Psi0 * Psi1;

	}

	static double LambThCon(double Temperature, double Pressure, double Tau,
			double Delta) {
		double lamb0, lamb1, lamb2;
		double taus, pis, dpidTau, ddeltadpi;
		double DeltaS;
		int I, J;

		lamb0 = 0;
		for (I = 0; I <= 3; I++)
			lamb0 = lamb0 + N0ThCon[I] * Math.pow(Tau, I);
		lamb0 = 1 / (Math.pow(Tau, 0.5) * lamb0);
		lamb1 = 0;
		for (I = 0; I <= 4; I++)
			for (J = 0; J <= 5; J++)
				lamb1 = lamb1 + NThCon[I][J] * Math.pow((Tau - 1.0), I)
						* Math.pow((Delta - 1.0), J);
		lamb1 = Math.exp(Delta * lamb1);
		if ((Temperature >= T000C) && (Temperature <= T350C)
				&& (Pressure >= T2P(Temperature)) && (Pressure <= 1000.0)) {
			taus = 1386.0 / Temperature;
			pis = Pressure / 165.3;

			dpidTau = (647.226 * 165.3 * (GammaPiTauReg1(taus, pis) * 1386.0 - GammaPiReg1(
					taus, pis) * Temperature))
					/ (221.15 * Temperature * Temperature * GammaPiPiReg1(taus,
							pis));
			ddeltadpi = -(22115000.0 * GammaPiPiReg1(taus, pis))
					/ (317.763 * RGas_Water * Temperature * Math.pow(
							GammaPiReg1(taus, pis), 2));
		} else if (((Temperature >= T000C) && (Temperature <= T350C)
				&& (Pressure > 0) && (Pressure <= T2P(Temperature)))
				|| ((Temperature >= T350C) && (Temperature <= 863.15)
						&& (Pressure > 0) && (Pressure <= T2PBound23(Temperature)))
				|| ((Temperature >= 863.15) && (Temperature <= 1073.15)
						&& (Pressure > 0) && (Pressure <= 1000.0))) {
			taus = 540.0 / Temperature;
			pis = Pressure / 10.0;
			dpidTau = (647.226 * 10.0 * ((Gamma0PiTauReg2(taus, pis) + GammarPiTauReg2(
					taus, pis)) * 540.0 - (Gamma0PiReg2(taus, pis) + GammarPiReg2(
					taus, pis)) * Temperature))
					/ (221.15 * Temperature * Temperature * (Gamma0PiPiReg2(
							taus, pis) + GammarPiPiReg2(taus, pis)));
			ddeltadpi = -(22115000.0 * (Gamma0PiPiReg2(taus, pis) + GammarPiPiReg2(
					taus, pis)))
					/ (317.763 * RGas_Water * Temperature * Math
							.pow((Gamma0PiReg2(taus, pis) + GammarPiReg2(taus,
									pis)), 2));
		} else if ((Temperature >= T350C)
				&& (Temperature <= P2TBound23(Pressure))
				&& (Pressure >= T2PBound23(Temperature))
				&& (Pressure <= 1000.0)) {
			taus = Tc_Water / Temperature;
			DeltaS = Delta * 317.763 / 322.0;
			dpidTau = (647.226 * RGas_Water * (Delta * 317.763)
					* (Delta * 317.763) * (FiDeltaReg3(taus, DeltaS) - (Tc_Water / Temperature)
					* FiDeltaTauReg3(taus, DeltaS)))
					/ (22115000.0 * 322.0);
			ddeltadpi = (22115000.0 * 322.0)
					/ (317.763 * Delta * 317.763 * RGas_Water * Temperature * (2 * FiDeltaReg3(
							taus, DeltaS) + (Delta * 317.763 / 322.0)
							* FiDeltaDeltaReg3(taus, DeltaS)));
		} else {
			dpidTau = 0;
			ddeltadpi = 0;
		}
		lamb2 = 0.0013848
				/ PsiVisc(Tau, Delta)
				* Math.pow((Tau * Delta), -2)
				* dpidTau
				* dpidTau
				* Math.pow(Math.abs(Delta * ddeltadpi), 0.4678)
				* Math.pow(Delta, 0.5)
				* Math.exp(-18.66 * Math.pow((1 / Tau - 1), 2)
						- Math.pow((Delta - 1), 4));
		return lamb0 * lamb1 + lamb2;
	}

	static double T2P(double Temperature) {
		double DEL, aco, bco, cco;

		if ((Temperature < T000C - DeltaVal)
				|| (Temperature > Tc_Water + DeltaVal))
			return -1.0;
		else {
			DEL = Temperature + NReg4[9] / (Temperature - NReg4[10]);
			aco = DEL * DEL + NReg4[1] * DEL + NReg4[2];
			bco = NReg4[3] * DEL * DEL + NReg4[4] * DEL + NReg4[5];
			cco = NReg4[6] * DEL * DEL + NReg4[7] * DEL + NReg4[8];
			return Math
					.pow(2 * cco
							/ (-bco + Math.pow(bco * bco - 4 * aco * cco, 0.5)),
							4) * 10;
		}

	}

	static double T2PBound23(double Temperature) {
		if ((Temperature < T350C - DeltaVal)
				|| (Temperature > 863.15 + DeltaVal))
			return -1.0;
		else {
			return (NBound23[1] + NBound23[2] * Temperature + NBound23[3]
					* Temperature * Temperature) * 10.0;
		}
	}

	static double P2HBound2bc(double Pressure) {
		if ((Pressure < 65.467 - DeltaVal) || (Pressure > 1000.0 + DeltaVal))
			return -1.0;
		else {
			return NBound2bc[4]
					+ Math.pow((0.1 * Pressure - NBound2bc[5]) / NBound2bc[3],
							0.5);
		}
	}

	static double P2T(double Pressure) {
		double bet, dco, eco, fco, gco;
		double Temp_Min, Temp_Max, TOL;
		double Result;

		if ((Pressure < 0.00611213 - DeltaVal)
				|| (Pressure > Pc_Water + DeltaVal))
			Result = -1.0;
		else {
			bet = Math.pow((0.1 * Pressure), 0.25);
			eco = bet * bet + NReg4[3] * bet + NReg4[6];
			fco = NReg4[1] * bet * bet + NReg4[4] * bet + NReg4[7];
			gco = NReg4[2] * bet * bet + NReg4[5] * bet + NReg4[8];
			dco = 2 * gco / (-fco - Math.pow((fco * fco - 4 * eco * gco), 0.5));
			Result = 0.5 * (NReg4[10] + dco - Math.pow(
					Math.pow(NReg4[10] + dco, 2) - 4
							* (NReg4[9] + NReg4[10] * dco), 0.5));
		}
		Temp_Min = Result - 1;
		Temp_Max = Result + 1;
		if (Temp_Min < T000C)
			Temp_Min = T000C;
		if (Temp_Max > Tc_Water)
			Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Pressure, 401);
	}

	static double P2TBound23(double Pressure) {
		if ((Pressure < 165.291643 - DeltaVal)
				|| (Pressure > 1000.0 + DeltaVal))
			return -1.0;
		else {
			return NBound23[4]
					+ Math.pow(((0.1 * Pressure - NBound23[5]) / NBound23[3]),
							0.5);
		}
	}

	static double H2TLPBound23(double H) {
		double Temp_Min, Temp_Max, TOL;

		if (H < 2605.53447593) {
			Temp_Min = 350 + 273.15;
			Temp_Max = 363.5762 + 273.15;
		} else if (H > 2626.27511698) {
			Temp_Min = 486.9158 + 273.15;
			Temp_Max = 590.0 + 273.15;
		} else {
			Temp_Min = 363.5762 + 273.15;
			Temp_Max = 389.224 + 273.15;
		}
		TOL = 1E-8 * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, H, 322);
	}

	static double H2TMPBound23(double H) {
		double Temp_Min, Temp_Max, TOL;

		if (H < 2605.53447593) {
			Temp_Min = 350 + 273.15;
			Temp_Max = 363.5762 + 273.15;
		} else if (H > 2626.27511698) {
			Temp_Min = 486.9158 + 273.15;
			Temp_Max = 590.0 + 273.15;
		} else {
			Temp_Min = 389.224 + 273.15;
			Temp_Max = 448.194 + 273.15;
		}
		TOL = 1E-8 * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, H, 322);
	}

	static double H2THPBound23(double H) {
		double Temp_Min, Temp_Max, TOL;

		if (H < 2605.53447593) {
			Temp_Min = 350 + 273.15;
			Temp_Max = 365.12 + 273.15;
		} else if (H > 2626.27511698) {
			Temp_Min = 490.32 + 273.15;
			Temp_Max = 590.0 + 273.15;
		} else {
			Temp_Min = 448.194 + 273.15;
			Temp_Max = 486.9158 + 273.15;
		}
		TOL = 1E-8 * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, H, 322);
	}

	static double H2TBound23(double H) {
		return H2THPBound23(H);
	}

	static double H2PLPBound23(double H) {
		return T2PBound23(H2TLPBound23(H));
	}

	static double H2PMPBound23(double H) {
		return T2PBound23(H2TMPBound23(H));
	}

	static double H2PHPBound23(double H) {
		return T2PBound23(H2THPBound23(H));
	}

	static double H2PBound23(double H) {
		return H2PHPBound23(H);
	}

	static double H2SLPBound23(double H) {
		double T;

		T = H2TLPBound23(H);
		return PT2SReg2(T2PBound23(T), T);
	}

	static double H2SMPBound23(double H) {
		double T;

		T = H2TMPBound23(H);
		return PT2SReg2(T2PBound23(T), T);
	}

	static double H2SHPBound23(double H) {
		double T;

		T = H2THPBound23(H);
		return PT2SReg2(T2PBound23(T), T);
	}

	static double H2SBound23(double H) {
		return H2SHPBound23(H);
	}

	static double H2VLPBound23(double H) {
		double T;

		T = H2TLPBound23(H);
		return PT2VReg2(T2PBound23(T), T);
	}

	static double H2VMPBound23(double H) {
		double T;

		T = H2TMPBound23(H);
		return PT2VReg2(T2PBound23(T), T);
	}

	static double H2VHPBound23(double H) {
		double T;

		T = H2THPBound23(H);
		return PT2VReg2(T2PBound23(T), T);
	}

	static double H2VBound23(double H) {
		return H2VHPBound23(H);
	}

	static double V2PBound23(double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = 100 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 325);
	}

	static double V2TBound23(double Volume) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T350C;
		Temp_Max = 863.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 326);
	}

	static double V2HBound23(double Volume) {
		double Pressure;

		Pressure = V2PBound23(Volume);
		return PV2HReg2(Pressure, Volume);
	}

	static double V2SBound23(double Volume) {
		double Pressure;

		Pressure = V2PBound23(Volume);
		return PV2SReg2(Pressure, Volume);
	}

	static double H2PBound2bc(double Enthalpy) {
		double Eta;

		if ((Enthalpy < 2778.2657 - DeltaVal)
				|| (Enthalpy > 3516.004323 + DeltaVal))
			return -1.0;
		else {
			Eta = Enthalpy / 1;
			return (NBound2bc[1] + NBound2bc[2] * Eta + NBound2bc[3] * Eta
					* Eta) * 10.0;
		}
	}

	static double S2HBound2ab_s(double Entropy) {
		double Fai;

		Fai = Entropy / 1;
		return NBound2ab_S[1] + NBound2ab_S[2] * Fai + NBound2ab_S[3] * Fai
				* Fai + NBound2ab_S[4] * Fai * Fai * Fai;
	}

	static double PT2VReg1NC(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return RGas_Water * Temperature * Pi * GammaPiReg1(Tau, Pi)
				/ (Pressure * 100000.0);
	}

	static void VMinP2T(double T_Min, double T_Max, double Pressure, HDouble T) {
		double T_mid, T_Mid_Plus, T_Mid_Minus;

		T_mid = (T_Max + T_Min) / 2;

		if ((T_Max - T_Min) <= 0.02) {
			T.d = (T_mid);
			return;
			// exit(1);
		}

		T_Mid_Plus = T_mid + 0.01;
		T_Mid_Minus = T_mid - 0.01;

		if (PT2VReg1NC(Pressure, T_Mid_Plus) > PT2VReg1NC(Pressure, T_Mid_Minus))
			T_Max = T_mid;
		else
			T_Min = T_mid;

		VMinP2T(T_Min, T_Max, Pressure, T);
	}

	static double T_VMinP(double Pressure) {
		HDouble T = new HDouble();
		if (Pressure <= 10)
			VMinP2T(276.5, 280, Pressure, T);
		else if (Pressure <= 100)
			VMinP2T(275, 277, Pressure, T);
		else if (Pressure <= 190)
			VMinP2T(T000C, 275.7, Pressure, T);
		else
			VMinP2T(T000C, 273.16, Pressure, T);
		return T.d;
	}

	static double PT2VReg1(double Pressure, double Temperature) {
		double TVMin, TU, TL, VU, VL;
		double Result;

		Result = PT2VReg1NC(Pressure, Temperature);
		TVMin = T_VMinP(Pressure);
		if (Temperature >= TVMin)
			return Result;

		TU = TVMin + 0.05;
		TL = TVMin;
		VU = PT2VReg1NC(Pressure, TU);
		VL = PT2VReg1NC(Pressure, TL);

		return VL + (VU - VL) * (Temperature - TL) / (TU - TL);
	}

	static double PT2EReg1(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return 0.001 * RGas_Water * Temperature
				* (Tau * GammaTauReg1(Tau, Pi) - Pi * GammaPiReg1(Tau, Pi));
	}

	static double PT2SReg1(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return 0.001 * RGas_Water
				* (Tau * GammaTauReg1(Tau, Pi) - GammaReg1(Tau, Pi));
	}

	static double PT2HReg1(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return 0.001 * RGas_Water * Temperature * Tau * GammaTauReg1(Tau, Pi);
	}

	static double PT2CpReg1(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return -0.001 * RGas_Water * Tau * Tau * GammaTauTauReg1(Tau, Pi);
	}

	static double PT2CvReg1(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return 0.001
				* RGas_Water
				* (-Tau * Tau * GammaTauTauReg1(Tau, Pi) + Math.pow(
						(GammaPiReg1(Tau, Pi) - Tau * GammaPiTauReg1(Tau, Pi)),
						2)
						/ GammaPiPiReg1(Tau, Pi));
	}

	static double PT2SSPReg1(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1386.0 / Temperature;
		Pi = (0.1 * Pressure) / 16.53;
		return Math
				.pow((RGas_Water * Temperature * (Math.pow(
						GammaPiReg1(Tau, Pi), 2) / (Math.pow(
						(GammaPiReg1(Tau, Pi) - Tau * GammaPiTauReg1(Tau, Pi)),
						2) / (Tau * Tau * GammaTauTauReg1(Tau, Pi)) - GammaPiPiReg1(
						Tau, Pi)))), 0.5);
	}

	static double H2PLReg1(double Enthalpy) {
		double Press_Max, Press_Min, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 165.291643;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 131);
	}

	static double H2TLReg1(double Enthalpy) {
		double Temp_Max, Temp_Min, TOL;

		Temp_Min = T000C;
		Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 132);
	}

	static double PH2TReg1(double Pressure, double Enthalpy) {
		double Eta, Pi;
		double Temp_Min, Temp_Max, TOL;
		double Result;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal)) {
			Result = -1.0;
			return Result;
		} else {
			Eta = Enthalpy / 2500;
			Pi = Pressure / 10;
			Result = SetaReg1PH(Eta, Pi) * 1;
		}

		Temp_Min = Result - 1;
		Temp_Max = Result + 1;
		if (Temp_Min < T000C)
			Temp_Min = T000C;
		if (Temp_Max > T350C)
			Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Enthalpy, 108);
	}

	static double PS2TReg1(double Pressure, double Entropy) {
		double Fai, Pi;
		double Temp_Min, Temp_Max, TOL;
		double Result;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal)) {
			Result = -1.0;
			return Result;
		} else {

			Fai = Entropy / 1;
			Pi = Pressure / 10;
			Result = SetaReg1PS(Fai, Pi) * 1;
		}

		Temp_Min = Result - 1;
		Temp_Max = Result + 1;
		if (Temp_Min < T000C)
			Temp_Min = T000C;
		if (Temp_Max > T350C)
			Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Entropy, 110);
	}

	static double HS2PReg1(double Enthalpy, double Entropy) {
		double Fai, Eta;
		double Press_Min, Press_Max, TOL;
		double PP, TC;

		Eta = Enthalpy / 3400;
		Fai = Entropy / 7.6;
		PP = PiReg1HS(Eta, Fai) * 1000;

		TC = PH2TReg1(PP, Enthalpy);
		if (Math.abs(TH2SReg1(TC, Enthalpy) - Entropy) < 1E-8) {
			return TH2PReg1(TC, Enthalpy);

		}

		Press_Min = PP * 0.99;
		Press_Max = PP * 1.01;
		if (Press_Min < H2PLReg1(Enthalpy))
			Press_Min = H2PLReg1(Enthalpy);
		if (Press_Max > 1000)
			Press_Max = 1000;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Enthalpy, Entropy, 109);
	}

	static double HS2TReg1(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg1(Enthalpy, Entropy);
		return PH2TReg1(Pressure, Enthalpy);
	}

	static double PT2VReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return RGas_Water * Temperature * Pi
				* (Gamma0PiReg2(Tau, Pi) + GammarPiReg2(Tau, Pi))
				/ (Pressure * 100000.0);
	}

	static double PT2DReg2(double Pressure, double Temperature) {
		return 1 / PT2VReg2(Pressure, Temperature);
	}

	static double PT2EReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return 0.001
				* RGas_Water
				* Temperature
				* (Tau * (Gamma0TauReg2(Tau, Pi) + GammarTauReg2(Tau, Pi)) - Pi
						* (Gamma0PiReg2(Tau, Pi) + GammarPiReg2(Tau, Pi)));
	}

	static double PT2SReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return 0.001
				* RGas_Water
				* (Tau * (Gamma0TauReg2(Tau, Pi) + GammarTauReg2(Tau, Pi)) - (Gamma0Reg2(
						Tau, Pi) + GammarReg2(Tau, Pi)));
	}

	static double PT2HReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return 0.001 * RGas_Water * Temperature * Tau
				* (Gamma0TauReg2(Tau, Pi) + GammarTauReg2(Tau, Pi));
	}

	static double PT2CpReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return -0.001 * RGas_Water * Tau * Tau
				* (Gamma0TauTauReg2(Tau, Pi) + GammarTauTauReg2(Tau, Pi));
	}

	static double PT2CvReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return 0.001
				* RGas_Water
				* (-Tau
						* Tau
						* (Gamma0TauTauReg2(Tau, Pi) + GammarTauTauReg2(Tau, Pi)) - Math
						.pow((1 + Pi * GammarPiReg2(Tau, Pi) - Tau * Pi
								* GammarPiTauReg2(Tau, Pi)), 2)
						/ (1 - Pi * Pi * GammarPiPiReg2(Tau, Pi)));
	}

	static double PT2SSPReg2(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 540.0 / Temperature;
		Pi = 0.1 * Pressure;
		return Math
				.pow((RGas_Water
						* Temperature
						* (1 + 2 * Pi * GammarPiReg2(Tau, Pi) + Pi * Pi
								* Math.pow(GammarPiReg2(Tau, Pi), 2)) / ((1 - Pi
						* Pi * GammarPiPiReg2(Tau, Pi)) + Math.pow(
						(1 + Pi * GammarPiReg2(Tau, Pi) - Tau * Pi
								* GammarPiTauReg2(Tau, Pi)), 2)
						/ (Tau * Tau * (Gamma0TauTauReg2(Tau, Pi) + GammarTauTauReg2(
								Tau, Pi))))), 0.5);
	}

	static double T2SGReg42(double Temperature) {
		double Pressure;

		Pressure = T2P(Temperature);
		return PT2SReg2(Pressure, Temperature);
	}

	double H2TGLPReg42(double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Max = HMaxX2T(T000C, Tc_Water, 1.0);
		Temp_Min = T000C;

		TOL = 1E-8 * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 232);
	}

	static double H2TGHPReg42(double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = HMaxX2T(T000C, Tc_Water, 1.0);
		Temp_Max = T350C;

		TOL = 1E-8 * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 232);
	}

	static double H2PGLPReg42(double Enthalpy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = T2P(HMaxX2T(T000C, Tc_Water, 1.0));

		TOL = 1E-8 * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 231);
	}

	static double H2PGHPReg42(double Enthalpy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = T2P(HMaxX2T(T000C, Tc_Water, 1.0));
		Press_Max = 165.291643;

		TOL = 1E-8 * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 231);
	}

	static double PH2TReg2a(double Pressure, double Enthalpy) {
		double Eta, Pi;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return -1.0;
		else {
			Eta = Enthalpy / 2000;
			Pi = Pressure / 10;
			return SetaReg2aPH(Eta, Pi) * 1;
		}
	}

	static double PH2TReg2b(double Pressure, double Enthalpy) {
		double Eta, Pi;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return -1.0;
		else {
			Eta = Enthalpy / 2000;
			Pi = Pressure / 10;
			return SetaReg2bPH(Eta, Pi) * 1;
		}
	}

	static double PH2TReg2c(double Pressure, double Enthalpy) {
		double Eta, Pi;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return -1.0;
		else {
			Eta = Enthalpy / 2000;
			Pi = Pressure / 10;
			return SetaReg2cPH(Eta, Pi) * 1;
		}
	}

	static double PH2TReg2(double Pressure, double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;
		HInteger SubRange = new HInteger();
		
		double TS;
		double Result;

		SubRange2abcByPH(Pressure, Enthalpy, SubRange);

		if (SubRange.i == 1)
			Result = PH2TReg2a(Pressure, Enthalpy);
		else if (SubRange.i == 2)
			Result = PH2TReg2b(Pressure, Enthalpy);
		else if (SubRange.i == 3)
			Result = PH2TReg2c(Pressure, Enthalpy);
		else {
			return -1.0;
			// exit(1);
		}

		Temp_Min = Result - 2;
		Temp_Max = Result + 2;
		if (Pressure < T2P(T350C))
			TS = P2T(Pressure);
		else
			TS = P2TBound23(Pressure);
		if (Temp_Min < TS)
			Temp_Min = TS;

		if (Temp_Max > 1073.15)
			Temp_Max = 1073.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Enthalpy, 208);
	}

	static double PS2TReg2a(double Pressure, double Entropy) {
		double Fai, Pi;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return -1.0;
		else {
			Fai = Entropy / 2;
			Pi = Pressure / 10;
			return SetaReg2aPS(Fai, Pi) * 1;
		}
	}

	static double PS2TReg2b(double Pressure, double Entropy) {
		double Fai, Pi;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return -1.0;
		else {
			Fai = Entropy / 0.7853;
			Pi = Pressure / 10;
			return SetaReg2bPS(Fai, Pi) * 1;
		}
	}

	static double PS2TReg2c(double Pressure, double Entropy) {
		double Fai, Pi;

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return -1.0;
		else {
			Fai = Entropy / 2.9251;
			Pi = Pressure / 10;
			return SetaReg2cPS(Fai, Pi) * 1;
		}
	}

	static double PS2TReg2(double Pressure, double Entropy) {
		double Temp_Min, Temp_Max, TOL, TS;
		double Result;

		if ((Pressure < 40))
			Result = PS2TReg2a(Pressure, Entropy);
		else if (Entropy >= 5.85)
			Result = PS2TReg2b(Pressure, Entropy);
		else
			Result = PS2TReg2c(Pressure, Entropy);

		Temp_Min = Result - 1;
		Temp_Max = Result + 1;

		if (Pressure < T2P(T350C))
			TS = P2T(Pressure);
		else
			TS = P2TBound23(Pressure);
		if (Temp_Min < TS)
			Temp_Min = TS;
		if (Temp_Max > 1073.15)
			Temp_Max = 1073.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Entropy, 209);
	}

	static double TS2PReg2(double Temperature, double Entropy) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > 1073.15 + DeltaVal)
				|| (Temperature < T000C - DeltaVal))
			return Result;

		Press_Min = 0.00611213;
		if (Temperature <= T350C)
			Press_Max = T2P(Temperature);
		else if (Temperature <= 863.15)
			Press_Max = T2PBound23(Temperature);
		else
			Press_Max = 1000;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Entropy, 203);
	}

	static double TS2HReg2(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PReg2(Temperature, Entropy);
		return PT2HReg2(Pressure, Temperature);
	}

	static double TS2VReg2(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PReg2(Temperature, Entropy);
		return PT2VReg2(Pressure, Temperature);
	}

	static double HS2PReg2a(double Enthalpy, double Entropy) {
		double Fai, Eta;

		Eta = Enthalpy / 4200;
		Fai = Entropy / 12;

		return PiReg2aHS(Eta, Fai) * 40;
	}

	static double HS2PReg2b(double Enthalpy, double Entropy) {
		double Fai, Eta;

		Eta = Enthalpy / 4100;
		Fai = Entropy / 7.9;

		return PiReg2bHS(Eta, Fai) * 1000;
	}

	static double HS2PReg2c(double Enthalpy, double Entropy) {
		double Fai, Eta;

		Eta = Enthalpy / 3500;
		Fai = Entropy / 5.9;

		return PiReg2cHS(Eta, Fai) * 1000;
	}

	static double HS2PReg2(double Enthalpy, double Entropy) {
		HInteger SubRange = new HInteger();
		double PS, TS, SS;
		double Press_Min, Press_Max, TOL;
		double SH, SM, SL;
		double Result;

		Result = -1.0;

		SubRange2abcByHS(Enthalpy, Entropy, SubRange);
		if (SubRange.i == 1)
			return HS2PReg2a(Enthalpy, Entropy);
		else if (SubRange.i == 2)
			return HS2PReg2b(Enthalpy, Entropy);
		else if (SubRange.i == 3)
			return HS2PReg2c(Enthalpy, Entropy);
		else
			return Result;

		/*
		 * Press_Min = Result * 0.99; Press_Max = Result * 1.01;
		 * 
		 * if ( Enthalpy > HMaxX(1.0) ) { if ( Entropy < PT2SReg2(100, 1073.15)
		 * ) if ( Press_Max > 1000 ) Press_Max = 1000; else { PS =
		 * TS2PReg2(1073.15, Entropy); if ( Press_Max > PS ) Press_Max = PS; }
		 * 
		 * PS = 0.00611213; if ( Press_Min < PS ) Press_Min = PS; } else { TS =
		 * HMaxX2T(T000C, Tc_Water, 1.0); SS = T2SGReg42(TS);
		 * 
		 * if ( Entropy > SS ) { PS = H2PGLPReg42(Enthalpy); if ( Press_Max > PS
		 * ) Press_Max = PS; PS = 0.00611213; if ( Press_Min < PS ) Press_Min =
		 * PS; } else { PS = H2PBound23(Enthalpy); if ( Press_Max > PS )
		 * Press_Max = PS; PS = H2PGHPReg42(Enthalpy); if ( Press_Min < PS )
		 * Press_Min = PS; } }
		 * 
		 * if ( (Enthalpy>=2605.53447593) && (Enthalpy<=2626.27511698) ) {
		 * SH.d=H2SHPBound23(Enthalpy); SM=H2SMPBound23(Enthalpy);
		 * SL=H2SLPBound23(Enthalpy);
		 * 
		 * if ( (Entropy>=SH*(1-10*DeltaVal)) && (Entropy<=SM*(1-10*DeltaVal)) )
		 * { Press_Max=H2PHPBound23(Enthalpy); Press_Min=H2PMPBound23(Enthalpy);
		 * } else if ( (Entropy>=SL*(1-10*DeltaVal)) ) {
		 * Press_Max=H2PLPBound23(Enthalpy); } }
		 * 
		 * TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0; return
		 * ZBRENT2(Press_Min, Press_Max, TOL, Enthalpy, Entropy, 210);
		 */
	}

	static double HS2TReg2(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg2(Enthalpy, Entropy);
		return PH2TReg2(Pressure, Enthalpy);
	}

	static double PT2VReg3a(double Pressure, double Temperature) {
		double Beta, Kese, X;
		int IFor;
		double a, b, c, d, e, f, g, i, j;

		Beta = (Pressure - Pc_Water) / 10;
		Kese = (Temperature - Tc_Water);
		X = 0.0;
		for (IFor = 1; IFor <= 18; IFor++) {
			a = NReg3aPT2V[IFor];
			b = IReg3aPT2V[IFor];
			c = JReg3aPT2V[IFor];
			d = KReg3aPT2V[IFor];
			e = a * Math.pow(Beta, b);
			f = e * Math.pow(Kese, c);
			g = -(Kese - 3.727888 * Beta) + 0.05 * Kese * Kese + 0.05 * Beta
					* Beta;
			i = Math.pow(g, d / 8);
			j = f * i;
			X = X + j;
			// X=X+NReg3aPT2V[IFor]*Math.pow(Beta,IReg3aPT2V[IFor])*Math.pow(Kese,JReg3aPT2V[IFor])*Math.pow(-(Kese-3.727888*Beta)+0.05*Kese*Kese+0.05*Beta*Beta,
			// KReg3aPT2V[IFor]/8);
		}
		return X + 1 / Dc_Water;
	}

	static double PT2VReg3b(double Pressure, double Temperature) {
		double Beta, Kese, X;
		int IFor;

		Beta = (Pressure - Pc_Water) / 10;
		Kese = (Temperature - Tc_Water);
		X = 0.0;
		for (IFor = 1; IFor <= 27; IFor++) {
			X = X
					+ NReg3bPT2V[IFor]
					* Math.pow(Beta, IReg3bPT2V[IFor])
					* Math.pow(Kese, JReg3bPT2V[IFor])
					* Math.pow(-(Kese - 3.727888 * Beta) + 0.02 * Kese * Kese
							+ 0.02 * Beta * Beta, KReg3bPT2V[IFor] / 8);
		}
		return X + 1 / Dc_Water;
	}

	static double PT2VReg3c(double Pressure, double Temperature) {
		double Beta, Kese, X;
		int IFor;

		Beta = (Pressure - Pc_Water) / 10;
		Kese = (Temperature - Tc_Water);
		X = 0.0;
		for (IFor = 1; IFor <= 31; IFor++) {
			X = X
					+ NReg3cPT2V[IFor]
					* Math.pow(Beta, IReg3cPT2V[IFor])
					* Math.pow(Kese, JReg3cPT2V[IFor])
					* Math.pow((Kese - 3.727888 * Beta) + 0.02 * Kese * Kese
							+ 0.2 * Beta * Beta, KReg3cPT2V[IFor] / 8);
		}
		return X + 1 / Dc_Water;
	}

	static double PT2VReg3d(double Pressure, double Temperature) {
		double Beta, Kese, X;
		int IFor;
		double a, b, c, d, e, f;

		Beta = (Pressure - Pc_Water) / 10;
		Kese = (Temperature - Tc_Water);
		X = 0.0;
		for (IFor = 1; IFor <= 18; IFor++) {
			a = NReg3dPT2V[IFor];
			b = IReg3dPT2V[IFor];
			c = JReg3dPT2V[IFor];
			d = KReg3dPT2V[IFor];
			e = (Kese - 3.727888 * Beta) + 0.01 * Kese * Kese + 0.5 * Beta
					* Beta;
			f = Math.pow(Beta, b) * Math.pow(Kese, c) * Math.pow(e, d / 8);
			X = X + a * f;
			// X=X+NReg3dPT2V[IFor]*Math.pow(Beta,IReg3dPT2V[IFor])*Math.pow(Kese,JReg3dPT2V[IFor])*Math.pow((Kese-3.727888*Beta)+0.01*Kese*Kese+0.5*Beta*Beta,
			// KReg3dPT2V[IFor]/8);
		}
		return X + 1 / Dc_Water;
	}

	static double PT2VReg3e(double Pressure, double Temperature) {
		double Beta, Kese, X;
		int IFor;

		Beta = (Pressure - Pc_Water) / 10;
		Kese = (Temperature - Tc_Water);
		X = 0.0;
		for (IFor = 1; IFor <= 41; IFor++) {
			X = X
					+ NReg3ePT2V[IFor]
					* Math.pow(Beta, IReg3ePT2V[IFor])
					* Math.pow(Kese, JReg3ePT2V[IFor])
					* Math.pow(-(Kese - 3.727888 * Beta) + 0.005 * Kese * Kese
							+ 0.02 * Beta * Beta, KReg3ePT2V[IFor] / 8);
		}
		return X + 1 / Dc_Water;
	}

	static double PT2VReg3f(double Pressure, double Temperature) {
		double Beta, Kese, X;
		int IFor;

		Beta = (Pressure - Pc_Water) / 10;
		Kese = (Temperature - Tc_Water);
		X = 0.0;
		for (IFor = 1; IFor <= 17; IFor++) {
			X = X
					+ NReg3fPT2V[IFor]
					* Math.pow(Beta, IReg3fPT2V[IFor])
					* Math.pow(Kese, JReg3fPT2V[IFor])
					* Math.pow((Kese - 3.727888 * Beta) + 0.002 * Kese * Kese
							+ 0.1 * Beta * Beta, KReg3fPT2V[IFor] / 4);
		}
		return X + 1 / Dc_Water;
	}

	static double VolumeReg3gPT(double Pressure, double Temperature) {
		double PPai, Seta, X;
		int IFor;

		PPai = Pressure / 1030;
		Seta = Temperature / 600;
		X = 0.0;
		for (IFor = 1; IFor <= 20; IFor++) {
			X = X + NReg3gPT2V[IFor] * Math.pow(PPai - 1, IReg3gPT2V[IFor])
					* Math.pow(Seta - 1, JReg3gPT2V[IFor]);
		}
		return X;
	}

	static double T2DLReg43(double Temperature) {
		double Dens_Min, Dens_Max, TOL;
		double Pressure, DensT350;
		double Result;

		if (Math.abs(1 - Temperature / Tc_Water) < 0.00000001) {
			return Dc_Water;
			// exit(1);
		}

		Pressure = T2P(Temperature);

		Result = 1 / PT2VReg3a(Pressure, Temperature);
		Dens_Min = 0.99 * Result;
		Dens_Max = 1.01 * Result;

		if (Dens_Min < Dc_Water)
			Dens_Min = Dc_Water;
		DensT350 = 1 / PT2VReg1(T2P(T350C), T350C);
		if (Dens_Max > DensT350)
			Dens_Max = DensT350;

		TOL = (0.00000001) * (Dens_Min + Dens_Max) / 2.0;
		return ZBRENT2(Dens_Min, Dens_Max, TOL, Temperature, Pressure, 403);
	}

	static double T2DGReg43(double Temperature) {
		double Dens_Min, Dens_Max, TOL;
		double Pressure, DensT350;
		double Result;

		if (Math.abs(1 - Temperature / Tc_Water) < 0.00000001) {
			return Dc_Water;
			// exit(1);
		}

		Pressure = T2P(Temperature);

		// try
		// {
		if ((Math.abs(1 - Pressure / Pc_Water) < 1E-3)
				&& (Math.abs(1 - Temperature / Tc_Water) < 1E-3))
			Result = Dc_Water;
		else
			Result = 1 / PT2VReg3d(Pressure, Temperature);
		// }
		// catch()
		// {
		// Result=Dc_Water;
		// }

		Dens_Min = 0.99 * Result;
		Dens_Max = 1.01 * Result;

		DensT350 = 1 / PT2VReg2(T2P(T350C), T350C);
		if (Dens_Min < DensT350)
			Dens_Min = DensT350;
		if (Dens_Max > Dc_Water)
			Dens_Max = Dc_Water;

		TOL = (0.00000001) * (Dens_Min + Dens_Max) / 2.0;
		return ZBRENT2(Dens_Min, Dens_Max, TOL, Temperature, Pressure, 403);

	}

	static double TP1002DReg3(double Temperature) {
		double Dens_Min, Dens_Max, TOL;
		double DensT350, DensT863;
		double Result;

		Result = 1 / VolumeReg3gPT(1000, Temperature);
		Dens_Min = 0.99 * Result;
		Dens_Max = 1.01 * Result;

		DensT350 = 1 / PT2VReg1(1000, T350C);
		if (Dens_Max > DensT350)
			Dens_Max = DensT350;
		DensT863 = 1 / PT2VReg2(1000, 863.15);
		if (Dens_Min < DensT863)
			Dens_Min = DensT863;

		TOL = (0.00000001) * (Dens_Min + Dens_Max) / 2.0;
		return ZBRENT2(Dens_Min, Dens_Max, TOL, Temperature, 1000, 300);
	}

	static double PT2DReg3(double Pressure, double Temperature) {
		double DensMin, DensMax, TOL, PS;
		HInteger SubRange = new HInteger();
		double DensP1000, DensSatLiq, DensSatVap, DensB23;
		double Result;

		Result = -1.0;

		if (Pressure > 1000 + DeltaVal)
			return Result;

		if ((Math.abs(Temperature - Tc_Water) < 0.001)
				&& (Math.abs(Pressure - Pc_Water) < 0.05)) {
			return Dc_Water;
			// exit(1);
		}

		SubRange3abcdefgByPT(Pressure, Temperature, SubRange);
		switch (SubRange.i) {
		case 1: {
			Result = 1 / PT2VReg3a(Pressure, Temperature);
			break;
		}
		case 2: {
			Result = 1 / PT2VReg3b(Pressure, Temperature);
			break;
		}
		case 3: {
			Result = 1 / PT2VReg3c(Pressure, Temperature);
			break;
		}
		case 4: {
			Result = 1 / PT2VReg3d(Pressure, Temperature);
			break;
		}
		case 5: {
			Result = 1 / PT2VReg3e(Pressure, Temperature);
			break;
		}
		case 6: {
			Result = 1 / PT2VReg3f(Pressure, Temperature);
			break;
		}
		case 7: {
			Result = 1 / VolumeReg3gPT(Pressure, Temperature);
			break;
		}
		default: {
			break;
		}
		}

		DensMin = 0.99 * Result;
		DensMax = 1.01 * Result;

		if (Temperature <= Tc_Water) {
			PS = T2P(Temperature);
			if (Math.abs(1 - Pressure / PS) <= 0.00000001) {
				return T2DLReg43(Temperature);
				// exit(1);
			} else if (PS < Pressure) {
				DensP1000 = TP1002DReg3(Temperature);
				if (DensMax > DensP1000)
					DensMax = DensP1000;
				DensSatLiq = T2DLReg43(Temperature);
				if (DensMin < DensSatLiq)
					DensMin = DensSatLiq;
			} else {
				DensSatVap = T2DGReg43(Temperature);
				if (DensMax > DensSatVap)
					DensMax = DensSatVap;
				DensB23 = 1 / PT2VReg2(T2PBound23(Temperature), Temperature);
				if (DensMin < DensB23)
					DensMin = DensB23;
			}
		} else {
			DensP1000 = TP1002DReg3(Temperature);
			if (DensMax > DensP1000)
				DensMax = DensP1000;
			DensB23 = 1 / PT2VReg2(T2PBound23(Temperature), Temperature);
			if (DensMin < DensB23)
				DensMin = DensB23;
		}

		TOL = (0.00000001) * (DensMin + DensMax) / 2.0;
		return ZBRENT2(DensMin, DensMax, TOL, Temperature, Pressure, 101);
	}

	static double PT2VReg3(double Pressure, double Temperature) {
		return 1 / PT2DReg3(Pressure, Temperature);
	}

	static double TD2PReg3(double Temperature, double Density) {
		double Tau, Delta;

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;

		return (Density * RGas_Water * Temperature) * Delta
				* FiDeltaReg3(Tau, Delta) / 100000.0;
	}

	static double TD2EReg3(double Temperature, double Density) {
		double Tau, Delta;

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;
		return 0.001 * RGas_Water * Temperature * Tau * FiTauReg3(Tau, Delta);
	}

	static double PT2EReg3(double Pressure, double Temperature) {
		double Density;

		Density = PT2DReg3(Pressure, Temperature);
		return TD2EReg3(Temperature, Density);
	}

	static double TD2SReg3(double Temperature, double Density) {
		double Tau, Delta;

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;

		return 0.001 * RGas_Water
				* (Tau * FiTauReg3(Tau, Delta) - FiReg3(Tau, Delta));
	}

	static double PT2SReg3(double Pressure, double Temperature) {
		double Density;

		Density = PT2DReg3(Pressure, Temperature);
		return TD2SReg3(Temperature, Density);
	}

	static double TD2HReg3(double Temperature, double Density) {
		double Tau, Delta;

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;
		return 0.001
				* RGas_Water
				* Temperature
				* (Tau * FiTauReg3(Tau, Delta) + Delta
						* FiDeltaReg3(Tau, Delta));
	}

	static double PT2HReg3(double Pressure, double Temperature) {
		double Density;

		Density = PT2DReg3(Pressure, Temperature);
		return TD2HReg3(Temperature, Density);
	}

	static double TV2PReg3(double Temperature, double Volume) {
		return TD2PReg3(Temperature, 1 / Volume);
	}

	static double TV2HReg3(double Temperature, double Volume) {
		return TD2HReg3(Temperature, 1 / Volume);
	}

	static double TV2SReg3(double Temperature, double Volume) {
		return TD2SReg3(Temperature, 1 / Volume);
	}

	static double TD2CpReg3(double Temperature, double Density) {
		double Tau, Delta;

		if ((Math.abs(Tc_Water - Temperature) < DeltaVal)
				&& (Math.abs(Density - Dc_Water) < DeltaVal)) {
			return 1E20;
			// exit(1);
		}

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;
		return Math.abs(0.001
				* RGas_Water
				* (-Tau * Tau * FiTauTauReg3(Tau, Delta) + Math.pow((Delta
						* FiDeltaReg3(Tau, Delta) - Delta * Tau
						* FiDeltaTauReg3(Tau, Delta)), 2)
						/ (2 * Delta * FiDeltaReg3(Tau, Delta) + Delta * Delta
								* FiDeltaDeltaReg3(Tau, Delta))));
	}

	static double PT2CpReg3(double Pressure, double Temperature) {
		double Density;

		Density = PT2DReg3(Pressure, Temperature);
		return TD2CpReg3(Temperature, Density);
	}

	static double TD2CvReg3(double Temperature, double Density) {
		double Tau, Delta;

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;
		return 0.001 * RGas_Water * (-Tau * Tau * FiTauTauReg3(Tau, Delta));
	}

	static double PT2CvReg3(double Pressure, double Temperature) {
		double Density;

		Density = PT2DReg3(Pressure, Temperature);
		return TD2CvReg3(Temperature, Density);
	}

	static double TD2SSPReg3(double Temperature, double Density) {
		double Tau, Delta;

		Tau = Tc_Water / Temperature;

		Delta = Density / Dc_Water;

		return Math.pow(
				(RGas_Water * Temperature * (2 * Delta
						* FiDeltaReg3(Tau, Delta) + Delta * Delta
						* FiDeltaDeltaReg3(Tau, Delta) - Math.pow((Delta
						* FiDeltaReg3(Tau, Delta) - Delta * Tau
						* FiDeltaTauReg3(Tau, Delta)), 2)
						/ (Tau * Tau * FiTauTauReg3(Tau, Delta)))), 0.5);
	}

	static double PT2SSPReg3(double Pressure, double Temperature) {
		double Density;

		Density = PT2DReg3(Pressure, Temperature);
		return TD2SSPReg3(Temperature, Density);
	}

	static void T2DLGReg43(double Pressure, double Temperature, HDouble DensL,
			HDouble DensG) {
		double Dens_Min, Dens_Max, TOL;

		if (Math.abs(1 - Temperature / Tc_Water) < 0.00000001) {
			DensL.d = (Dc_Water);
			DensG.d = (Dc_Water);
			return;
			// exit(1);
		}

		Dens_Min = 1 / PT2VReg2(T2P(T350C), T350C);
		Dens_Max = Dc_Water;

		DensL.d = (T2DLReg43(Temperature));

		TOL = 1E-8 * (Dens_Min + Dens_Max) / 2.0;
		DensG.d = (ZBRENT2(Dens_Min, Dens_Max, TOL, DensL.d, Temperature, 404));
	}

	static double PT2VReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;

		Pi = 0.1 * Pressure;
		return RGas_Water * Temperature * Pi
				* (Gamma0PiReg5(Tau, Pi) + GammarPiReg5(Tau, Pi))
				/ (Pressure * 100000.0);
	}

	static double PT2EReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;

		Pi = 0.1 * Pressure;
		return 0.001
				* RGas_Water
				* Temperature
				* (Tau * (Gamma0TauReg5(Tau, Pi) + GammarTauReg5(Tau, Pi)) - Pi
						* (Gamma0PiReg5(Tau, Pi) + GammarPiReg5(Tau, Pi)));
	}

	static double PT2SReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;

		Pi = 0.1 * Pressure;
		return 0.001
				* RGas_Water
				* (Tau * (Gamma0TauReg5(Tau, Pi) + GammarTauReg5(Tau, Pi)) - (Gamma0Reg5(
						Tau, Pi) + GammarReg5(Tau, Pi)));
	}

	static double PT2HReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;

		Pi = 0.1 * Pressure;
		return 0.001 * RGas_Water * Temperature * Tau
				* (Gamma0TauReg5(Tau, Pi) + GammarTauReg5(Tau, Pi));
	}

	static double PT2CpReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;

		Pi = 0.1 * Pressure;
		return -0.001 * RGas_Water * Tau * Tau
				* (Gamma0TauTauReg5(Tau, Pi) + GammarTauTauReg5(Tau, Pi));
	}

	static double PT2CvReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;

		Pi = 0.1 * Pressure;
		return 0.001
				* RGas_Water
				* (-Tau
						* Tau
						* (Gamma0TauTauReg5(Tau, Pi) + GammarTauTauReg5(Tau, Pi)) - Math
						.pow((1 + Pi * GammarPiReg5(Tau, Pi) - Tau * Pi
								* GammarPiTauReg5(Tau, Pi)), 2)
						/ (1 - Pi * Pi * GammarPiPiReg5(Tau, Pi)));
	}

	static double PT2SSPReg5(double Pressure, double Temperature) {
		double Tau, Pi;

		Tau = 1000 / Temperature;
		Pi = 0.1 * Pressure;
		return Math
				.pow((RGas_Water
						* Temperature
						* (1 + 2 * Pi * GammarPiReg5(Tau, Pi) + Pi * Pi
								* Math.pow(GammarPiReg5(Tau, Pi), 2)) / ((1 - Pi
						* Pi * GammarPiPiReg5(Tau, Pi)) + Math.pow(
						(1 + Pi * GammarPiReg5(Tau, Pi) - Tau * Pi
								* GammarPiTauReg5(Tau, Pi)), 2)
						/ (Tau * Tau * (Gamma0TauTauReg5(Tau, Pi) + GammarTauTauReg5(
								Tau, Pi))))), 0.5);
	}

	static double T2DLReg41(double Temperature) {
		double Pressure;

		Pressure = T2P(Temperature);
		return 1 / PT2VReg1(Pressure, Temperature);
	}

	static double T2DLReg4(double Temperature) {
		HInteger SubRange = new HInteger();
		;

		SubRangeSatLiqByT(Temperature, SubRange);

		if (SubRange.i == 1)
			return T2DLReg41(Temperature);
		else if (SubRange.i == 3)
			return T2DLReg43(Temperature);
		else
			return -1.0;
	}

	static double T2DGReg42(double Temperature) {
		double Pressure;

		Pressure = T2P(Temperature);
		return 1 / PT2VReg2(Pressure, Temperature);
	}

	static double T2DGReg4(double Temperature) {
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);

		if (SubRange.i == 2)
			return T2DGReg42(Temperature);
		else if (SubRange.i == 3)
			return T2DGReg43(Temperature);
		else
			return -1.0;
	}

	static double P2DLReg41(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return 1 / PT2VReg1(Pressure, Temperature);
	}

	static double P2DLReg43(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return T2DLReg43(Temperature);
	}

	static double P2DLReg4(double Pressure) {
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);

		if (SubRange.i == 1) // 1
			return P2DLReg41(Pressure);
		else if (SubRange.i == 3)
			return P2DLReg43(Pressure);
		else
			return -1.0;
	}

	static double P2DGReg42(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return 1 / PT2VReg2(Pressure, Temperature);
	}

	static double P2DGReg43(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return T2DGReg43(Temperature);
	}

	static double P2DGReg4(double Pressure) {
		HInteger SubRange = new HInteger();
		;

		SubRangeSatVapByP(Pressure, SubRange);

		if (SubRange.i == 2)
			return P2DGReg42(Pressure);
		else if (SubRange.i == 3)
			return P2DGReg43(Pressure);
		else
			return -1.0;
	}

	static double T2VLReg41(double Temperature) {
		return 1 / T2DLReg41(Temperature);
	}

	static double T2VLReg43(double Temperature) {
		return 1 / T2DLReg43(Temperature);
	}

	static double T2VLReg4(double Temperature) {
		return 1 / T2DLReg4(Temperature);
	}

	static double T2VL(double Temperature) {
		return T2VLReg4(Temperature);
	}

	static double T2VGReg42(double Temperature) {
		return 1 / T2DGReg42(Temperature);
	}

	static double T2VGReg43(double Temperature) {
		return 1 / T2DGReg43(Temperature);
	}

	static double T2VGReg4(double Temperature)

	{
		return 1 / T2DGReg4(Temperature);
	}

	static double T2VG(double Temperature) {
		return T2VGReg4(Temperature);
	}

	static double P2VLReg41(double Pressure) {
		return 1 / P2DLReg41(Pressure);
	}

	static double P2VLReg43(double Pressure) {
		return 1 / P2DLReg43(Pressure);
	}

	static double P2VLReg4(double Pressure) {
		return 1 / P2DLReg4(Pressure);
	}

	static void P2VL(double P, HDouble V, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4:
			V.d = (P2VLReg4(P));
			break;
		default:
			Range.i = (0);
			V.d = (-1.0);
			break;
		}
	}

	static double P2VGReg42(double Pressure) {
		return 1 / P2DGReg42(Pressure);
	}

	static double P2VGReg43(double Pressure) {
		return 1 / P2DGReg43(Pressure);
	}

	static double P2VGReg4(double Pressure) {
		return 1 / P2DGReg4(Pressure);
	}

	static void P2VG(double P, HDouble V, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4:
			V.d = (P2VGReg4(P));
			break;
		default:
			Range.i = (0);
			V.d = (-1.0);
			break;
		}
	}

	static double T2ELReg4(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);

		if (SubRange.i == 1) {
			Pressure = T2P(Temperature);
			return PT2EReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DLReg43(Temperature);
			return TD2EReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2EL(double Temperature) {
		return T2ELReg4(Temperature);
	}

	static double T2EGReg4(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {
			Pressure = T2P(Temperature);
			return PT2EReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DGReg43(Temperature);
			return TD2EReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2EG(double Temperature) {
		return T2EGReg4(Temperature);
	}

	static double P2ELReg4(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			return PT2EReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			return TD2EReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static void P2EL(double P, HDouble E, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4: {
			E.d = (P2ELReg4(P));
			break;
		}
		default: {
			Range.i = (0);
			E.d = (-1.0);
			break;
		}
		}
	}

	static double P2EGReg4(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();
		;

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			return PT2EReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			return TD2EReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static void P2EG(double P, HDouble E, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4: {
			E.d = (P2EGReg4(P));
			break;
		}
		default: {
			Range.i = (0);
			E.d = (-1.0);
			break;
		}
		}
	}

	static double T2SLReg41(double Temperature) {
		double Pressure;

		Pressure = T2P(Temperature);
		return PT2SReg1(Pressure, Temperature);
	}

	static double T2SLReg43(double Temperature) {
		double Density;

		Density = T2DLReg43(Temperature);
		return TD2SReg3(Temperature, Density);
	}

	static double T2SLReg4(double Temperature) {
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);

		if (SubRange.i == 1)
			return T2SLReg41(Temperature);
		else if (SubRange.i == 3)
			return T2SLReg43(Temperature);
		else
			return -1.0;
	}

	static double T2SL(double Temperature) {
		return T2SLReg4(Temperature);
	}

	static double T2SGReg43(double Temperature) {
		double Density;

		Density = T2DGReg43(Temperature);
		return TD2SReg3(Temperature, Density);
	}

	static double T2SGReg4(double Temperature) {
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2)
			return T2SGReg42(Temperature);
		else if (SubRange.i == 3)
			return T2SGReg43(Temperature);
		else
			return -1.0;
	}

	static double T2SG(double Temperature) {
		return T2SGReg4(Temperature);
	}

	static double P2SLReg41(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return PT2SReg1(Pressure, Temperature);
	}

	static double P2SLReg43(double Pressure) {
		double Temperature, Density;

		Temperature = P2T(Pressure);
		Density = T2DLReg43(Temperature);
		return TD2SReg3(Temperature, Density);
	}

	static double P2SLReg4(double Pressure) {
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1)
			return P2SLReg41(Pressure);
		else if (SubRange.i == 3)
			return P2SLReg43(Pressure);
		else
			return -1.0;
	}

	static void P2SL(double P, HDouble S, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4: {
			S.d = (P2SLReg4(P));
			break;
		}
		default: {
			Range.i = (0);
			S.d = (-1.0);
			break;
		}
		}
	}

	static double P2SGReg42(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return PT2SReg2(Pressure, Temperature);
	}

	static double P2SGReg43(double Pressure) {
		double Temperature, Density;

		Temperature = P2T(Pressure);
		Density = T2DGReg43(Temperature);
		return TD2SReg3(Temperature, Density);
	}

	static double P2SGReg4(double Pressure) {
		HInteger SubRange = new HInteger();

		SubRange.i = (0);
		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2)
			return P2SGReg42(Pressure);
		else if (SubRange.i == 3)
			return P2SGReg43(Pressure);
		else
			return -1.0;
	}

	static void P2SG(double P, HDouble S, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4: {
			S.d = (P2SGReg4(P));
			break;
		}
		default: {
			Range.i = (0);
			S.d = (-1.0);
			break;
		}
		}
	}

	static double T2HLReg41(double Temperature) {
		double Pressure;

		Pressure = T2P(Temperature);
		return PT2HReg1(Pressure, Temperature);
	}

	static double T2HLReg43(double Temperature) {
		double Density;

		Density = T2DLReg43(Temperature);
		return TD2HReg3(Temperature, Density);
	}

	static double T2HLReg4(double Temperature) {
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1)
			return T2HLReg41(Temperature);
		else if (SubRange.i == 3)
			return T2HLReg43(Temperature);
		else
			return -1.0;
	}

	static double T2HL(double Temperature) {
		return T2HLReg4(Temperature);
	}

	static double T2HGReg42(double Temperature) {
		double Pressure;

		Pressure = T2P(Temperature);
		return PT2HReg2(Pressure, Temperature);
	}

	static double T2HGReg43(double Temperature) {
		double Density;

		Density = T2DGReg43(Temperature);
		return TD2HReg3(Temperature, Density);

	}

	static double T2HGReg4(double Temperature) {
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2)
			return T2HGReg42(Temperature);
		else if (SubRange.i == 3)
			return T2HGReg43(Temperature);
		else
			return -1.0;
	}

	static double T2HG(double Temperature) {
		return T2HGReg4(Temperature);
	}

	static double P2HLReg41(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return PT2HReg1(Pressure, Temperature);
	}

	static double P2HLReg43(double Pressure) {
		double Temperature, Density;

		Temperature = P2T(Pressure);
		Density = T2DLReg43(Temperature);
		return TD2HReg3(Temperature, Density);
	}

	static double P2HLReg4(double Pressure) {
		HInteger SubRange = new HInteger();
		;

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1)
			return P2HLReg41(Pressure);
		else if (SubRange.i == 3)
			return P2HLReg43(Pressure);
		else
			return -1.0;
	}

	static void P2HL(double P, HDouble H, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4:
			H.d = (P2HLReg4(P));
			break;
		default:
			Range.i = (0);
			H.d = (-1.0);
			break;
		}
	}

	static double P2HGReg42(double Pressure) {
		double Temperature;

		Temperature = P2T(Pressure);
		return PT2HReg2(Pressure, Temperature);
	}

	static double P2HGReg43(double Pressure) {
		double Temperature, Density;

		Temperature = P2T(Pressure);
		Density = T2DGReg43(Temperature);
		return TD2HReg3(Temperature, Density);
	}

	static double P2HGReg4(double Pressure) {
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2)
			return P2HGReg42(Pressure);
		else if (SubRange.i == 3)
			return P2HGReg43(Pressure);
		else
			return -1.0;
	}

	static void P2HG(double P, HDouble H, HInteger Range) {
		SubRangeByP(P, Range);
		switch (Range.i) {
		case 4: {
			H.d = (P2HGReg4(P));
			break;
		}
		default: {
			Range.i = (0);
			H.d = (-1.0);
			break;
		}
		}
	}

	static double T2CPL(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {
			Pressure = T2P(Temperature);
			return PT2CpReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DLReg43(Temperature);
			return TD2CpReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2CPG(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {
			Pressure = T2P(Temperature);
			return PT2CpReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DGReg43(Temperature);
			return TD2CpReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double P2CPL(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			return PT2CpReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			return TD2CpReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double P2CPG(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			return PT2CpReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			return TD2CpReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double CvSatLiqT(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {
			Pressure = T2P(Temperature);
			return PT2CvReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DLReg43(Temperature);
			return TD2CvReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2CVL(double Temperature) {
		return CvSatLiqT(Temperature);
	}

	static double T2CVG(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {
			Pressure = T2P(Temperature);
			return PT2CvReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DGReg43(Temperature);
			return TD2CvReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double P2CVL(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			return PT2CvReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			return TD2CvReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double P2CVG(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			return PT2CvReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			return TD2CvReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2SSPL(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {
			Pressure = T2P(Temperature);
			return PT2SSPReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DLReg43(Temperature);
			return TD2SSPReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2SSPG(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {
			Pressure = T2P(Temperature);
			return PT2SSPReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Density = T2DGReg43(Temperature);
			return TD2SSPReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double P2SSPL(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			return PT2SSPReg1(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			return TD2SSPReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double P2SSPG(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			return PT2SSPReg2(Pressure, Temperature);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			return TD2SSPReg3(Temperature, Density);
		} else
			return -1.0;
	}

	static double T2KSL(double Temperature) {
		double Pressure, Density, SSP;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {
			Pressure = T2P(Temperature);
			SSP = PT2SSPReg1(Pressure, Temperature);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else if (SubRange.i == 3) {
			Pressure = T2P(Temperature);
			Density = T2DLReg43(Temperature);
			SSP = TD2SSPReg3(Temperature, Density);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else
			return -1.0;
	}

	static double T2KSG(double Temperature) {
		double Pressure, Density, SSP;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {
			Pressure = T2P(Temperature);
			SSP = PT2SSPReg2(Pressure, Temperature);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else if (SubRange.i == 3) {
			Pressure = T2P(Temperature);
			Density = T2DGReg43(Temperature);
			SSP = TD2SSPReg3(Temperature, Density);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else
			return -1.0;
	}

	static double P2KSL(double Pressure) {
		double Temperature, Density, SSP;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			SSP = PT2SSPReg1(Pressure, Temperature);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			SSP = TD2SSPReg3(Temperature, Density);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else
			return -1.0;
	}

	static double P2KSG(double Pressure) {
		double Temperature, Density, SSP;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			SSP = PT2SSPReg2(Pressure, Temperature);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			SSP = TD2SSPReg3(Temperature, Density);
			return SSP * SSP / Pressure * Density * 1E-5;
		} else
			return -1.0;
	}

	static double T2ETAL(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {
			Pressure = T2P(Temperature);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else if (SubRange.i == 3) {

			Density = T2DLReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else
			return -1.0;
	}

	static double T2ETAG(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {
			Pressure = T2P(Temperature);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else if (SubRange.i == 3) {
			Density = T2DGReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else
			return -1.0;
	}

	static double P2ETAL(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else
			return -1.0;
	}

	static double P2ETAG(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else if (SubRange.i == 3) {
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.000055071 * PsiVisc(Tau, Delta);
		} else
			return -1.0;
	}

	static double T2UL(double Temperature) {
		double Eta, V;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
		}
		V = T2VLReg4(Temperature);
		if (V < -0.5) {
			return -1.0;
		}
		Eta = T2ETAL(Temperature);
		if (Eta < -0.5) {
			return -1.0;
		}
		return Eta * V;
	}

	static double T2UG(double Temperature) {
		double Eta, V;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
		}
		V = T2VGReg4(Temperature);
		if (V < -0.5) {
			return -1.0;
		}
		Eta = T2ETAG(Temperature);
		if (Eta < -0.5) {
			return -1.0;
		}
		return Eta * V;
	}

	static double P2UL(double Pressure) {
		double Eta, V;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
		}
		V = P2VLReg4(Pressure);
		if (V < -0.5) {
			return -1.0;
		}
		Eta = P2ETAL(Pressure);
		if (Eta < -0.5) {
			return -1.0;
		}
		return Eta * V;
	}

	static double P2UG(double Pressure) {
		double Eta, V;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
		}
		V = P2VGReg4(Pressure);
		if (V < -0.5) {
			return -1.0;
		}
		Eta = P2ETAG(Pressure);
		if (Eta < -0.5) {
			return -1.0;
		}
		return Eta * V;
	}

	static double T2RAMDL(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {

			Pressure = T2P(Temperature);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else if (SubRange.i == 3) {

			if (Math.abs(Temperature - Tc_Water) < DeltaVal) {
				return 0.6;
				// exit(1);
			}
			Pressure = T2P(Temperature);
			Density = T2DLReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else
			return -1.0;
	}

	static double T2PRNL(double Temperature) {
		double Pressure, Density, Ramd, CP, Eta;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 1) {

			Pressure = T2P(Temperature);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;

			Ramd = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			CP = PT2CpReg1(Pressure, Temperature);

			return Eta * CP / Ramd * 1E3;
		} else if (SubRange.i == 3) {

			if (Math.abs(Temperature - Tc_Water) < DeltaVal) {
				return 25;
				// exit(1);
			}
			Pressure = T2P(Temperature);
			Density = T2DLReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;

			Ramd = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			CP = TD2CpReg3(Temperature, Density);

			return Eta * CP / Ramd * 1E3;
		} else
			return -1.0;
	}

	static double T2EPSL(double Temperature) {
		double Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
			// exit(1);
		}
		Volume = T2VLReg4(Temperature);
		return TV2EPS(Temperature, Volume);
	}

	static double T2NL(double Temperature, double LAMD) {
		double Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByT(Temperature, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
		}
		Volume = T2VLReg4(Temperature);
		return TVLAMD2N(Temperature, Volume, LAMD);
	}

	static double T2RAMDG(double Temperature) {
		double Pressure, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {

			Pressure = T2P(Temperature);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			Pressure = Pressure - 0.0001 * Pressure;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else if (SubRange.i == 3) {
			if (Math.abs(Temperature - Tc_Water) < DeltaVal) {
				return 0.6;
				// exit(1);
			}
			Pressure = T2P(Temperature);
			Density = T2DGReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else
			return -1.0;
	}

	static double T2PRNG(double Temperature) {
		double Pressure, Density, Ramd, Eta, Cp;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 2) {

			Pressure = T2P(Temperature);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			Pressure = Pressure - 0.0001 * Pressure;

			Ramd = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			Cp = PT2CpReg2(Pressure, Temperature);

			return Eta * Cp / Ramd * 1E3;
		} else if (SubRange.i == 3) {

			if (Math.abs(Temperature - Tc_Water) < DeltaVal) {
				return 25;
				// exit(1);

			}
			Pressure = T2P(Temperature);
			Density = T2DGReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;

			Ramd = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			Cp = TD2CpReg3(Temperature, Density);

			return Eta * Cp / Ramd * 1E3;
		} else
			return -1.0;
	}

	static double T2EPSG(double Temperature) {
		double Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
		}
		Volume = T2VGReg4(Temperature);
		return TV2EPS(Temperature, Volume);
	}

	static double T2NG(double Temperature, double LAMD) {
		double Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByT(Temperature, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
			// exit(1);
		}
		Volume = T2VGReg4(Temperature);
		return TVLAMD2N(Temperature, Volume, LAMD);
	}

	static double T2SURFT(double Temperature) {
		double Sta;

		Sta = Temperature / Tc_Water;
		return 235.8 * Math.pow(1 - Sta, 1.256) * (1 - 0.625 * (1 - Sta))
				/ 1000.0;
	}

	static double P2RAMDL(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {
			Temperature = P2T(Pressure);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else if (SubRange.i == 3) {

			if (Math.abs(Pressure - Pc_Water) < DeltaVal) {
				return 0.6;
				// exit(1);
			}
			Temperature = P2T(Pressure);
			Density = T2DLReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else
			return -1.0;
	}

	static double P2PRNL(double Pressure) {
		double Temperature, Density, Cp, Eta, RAMD;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 1) {

			Temperature = P2T(Pressure);
			Density = 1 / PT2VReg1(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;

			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			RAMD = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Cp = PT2CpReg1(Pressure, Temperature);
			return Eta * Cp / RAMD * 1E3;
		} else if (SubRange.i == 3) {

			if (Math.abs(Pressure - Pc_Water) < DeltaVal) {
				return 25;
				// exit(1);
			} else {
				Temperature = P2T(Pressure);
				Density = T2DLReg43(Temperature);
				Delta = Density / 317.763;
				Tau = 647.226 / Temperature;

				RAMD = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
				Eta = 0.000055071 * PsiVisc(Tau, Delta);
				Cp = TD2CpReg3(Temperature, Density);
				return Eta * Cp / RAMD * 1E3;
			}
		} else
			return -1.0;
	}

	static double P2EPSL(double Pressure) {
		double Temperature, Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
			// exit(1);
		}
		Temperature = P2T(Pressure);
		Volume = P2VLReg4(Pressure);
		return TV2EPS(Temperature, Volume);
	}

	static double P2NL(double Pressure, double LAMD) {
		double Temperature, Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatLiqByP(Pressure, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
			// exit(1);
		}
		Temperature = P2T(Pressure);
		Volume = P2VLReg4(Pressure);
		return TVLAMD2N(Temperature, Volume, LAMD);
	}

	static double P2RAMDG(double Pressure) {
		double Temperature, Density;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {
			Temperature = P2T(Pressure);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			Pressure = Pressure - 0.0001 * Pressure;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else if (SubRange.i == 3) {

			if (Math.abs(Pressure - Pc_Water) < DeltaVal) {
				return 0.6;
				// exit(1);
			}
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			return 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
		} else
			return -1.0;
	}

	static double P2PRNG(double Pressure) {
		double Temperature, Density, RAMD, Cp, Eta;
		HInteger SubRange = new HInteger();
		double Delta, Tau;

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 2) {

			Temperature = P2T(Pressure);
			Density = 1 / PT2VReg2(Pressure, Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;
			Pressure = Pressure - 0.0001 * Pressure;

			RAMD = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			Cp = PT2CpReg2(Pressure, Temperature);
			return Eta * Cp / RAMD * 1E3;
		} else if (SubRange.i == 3) {

			if (Math.abs(Pressure - Pc_Water) < DeltaVal) {
				return 25;
				// exit(1);
			}
			Temperature = P2T(Pressure);
			Density = T2DGReg43(Temperature);
			Delta = Density / 317.763;
			Tau = 647.226 / Temperature;

			RAMD = 0.4945 * LambThCon(Temperature, Pressure, Tau, Delta);
			Eta = 0.000055071 * PsiVisc(Tau, Delta);
			Cp = TD2CpReg3(Temperature, Density);
			return Eta * Cp / RAMD * 1E3;
		} else
			return -1.0;
	}

	static double P2EPSG(double Pressure) {
		double Temperature, Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
			// exit(1);
		}
		Temperature = P2T(Pressure);
		Volume = P2VGReg4(Pressure);
		return TV2EPS(Temperature, Volume);
	}

	static double P2NG(double Pressure, double LAMD) {
		double Temperature, Volume;
		HInteger SubRange = new HInteger();

		SubRangeSatVapByP(Pressure, SubRange);
		if (SubRange.i == 0) {
			return -1.0;
			// exit(1);
		}
		Temperature = P2T(Pressure);
		Volume = P2VGReg4(Pressure);
		return TVLAMD2N(Temperature, Volume, LAMD);
	}

	double PT2DReg1(double Pressure, double Temperature) {
		return 1 / PT2VReg1(Pressure, Temperature);
	}

	static double P_HMinTReg1(double PMin, double PMax, double T) {
		double P_Min, P_Max, P_Mid;

		if (Math.abs(PMax - PMin) < 10 * DeltaVal) {
			return (PMin + PMax) / 2;
			// exit(1);
		}

		P_Min = PMin;
		P_Max = PMax;
		P_Mid = (P_Min + P_Max) / 2;
		if ((PT2HReg1(P_Mid - 2 * DeltaVal, T) < PT2HReg1(P_Mid + 2 * DeltaVal,
				T))) {
			P_Max = P_Mid - 2 * DeltaVal;
		} else {
			P_Min = P_Mid - 2 * DeltaVal;
		}

		return P_HMinTReg1(P_Min, P_Max, T);
	}

	static double PHMinTReg1(double T) {
		double P_Min, P_Max;

		P_Min = T2P(T);
		P_Max = 1000;
		return P_HMinTReg1(P_Min, P_Max, T);
	}

	static double HMinTReg1(double T) {
		return PT2HReg1(PHMinTReg1(T), T);
	}

	static void HMINTREG197(double T, HDouble H) {
		H.d = (HMinTReg1(T + 273.15));
	}

	static double P_HMaxTReg1(double PMin, double PMax, double T) {
		double P_Min, P_Max, P_Mid;

		if (Math.abs(PMax - PMin) < 10 * DeltaVal) {
			return (PMin + PMax) / 2;
			// exit(1);
		}

		P_Min = PMin;
		P_Max = PMax;
		P_Mid = (P_Min + P_Max) / 2;
		if ((PT2HReg1(P_Mid - 2 * DeltaVal, T) < PT2HReg1(P_Mid + 2 * DeltaVal,
				T))) {
			P_Min = P_Mid - 2 * DeltaVal;

		} else {
			P_Max = P_Mid - 2 * DeltaVal;
		}

		return P_HMaxTReg1(P_Min, P_Max, T);
	}

	static double PHMaxTReg1(double T) {
		double P_Min, P_Max;

		P_Min = T2P(T);
		P_Max = 1000;
		return P_HMaxTReg1(P_Min, P_Max, T);
	}

	static double HMaxTReg1(double T) {
		return PT2HReg1(PHMaxTReg1(T), T);
	}

	static double PH2SReg1(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg1(Pressure, Enthalpy);
		return PT2SReg1(Pressure, Temperature);
	}

	static double PH2VReg1(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg1(Pressure, Enthalpy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double PS2HReg1(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg1(Pressure, Entropy);
		return PT2HReg1(Pressure, Temperature);
	}

	static double PS2VReg1(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg1(Pressure, Entropy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double PV2TReg1(double Pressure, double Volume) {
		double Temp_Min, Temp_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal) || (Pressure < 0.000611 - DeltaVal))
			return Result;

		Temp_Min = T000C;

		if (Pressure <= 165.291643)
			Temp_Max = P2T(Pressure);
		else
			Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Volume, 102);
	}

	static double PV2HReg1(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg1(Pressure, Volume);
		return PT2HReg1(Pressure, Temperature);
	}

	static double PV2SReg1(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg1(Pressure, Volume);
		return PT2SReg1(Pressure, Temperature);
	}

	static double TH2PHPReg1(double Temperature, double Enthalpy) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > T350C + DeltaVal)
				|| (Temperature < T000C - DeltaVal))
			return Result;

		Press_Min = PHMinTReg1(Temperature);
		Press_Max = 1000;

		if ((PT2HReg1(Press_Min, Temperature) - Enthalpy)
				* (PT2HReg1(Press_Max, Temperature) - Enthalpy) > 0) {
			Press_Min = T2P(Temperature);
			Press_Max = PHMinTReg1(Temperature);

			if (Math.abs(Press_Min - Press_Max) < 10 * DeltaVal) {
				return (Press_Min + Press_Max) / 2;
				// exit(1);
			}

			if ((PT2HReg1(Press_Min, Temperature) - Enthalpy)
					* (PT2HReg1(Press_Max, Temperature) - Enthalpy) > 0) {
				return 0;
				// exit(1);

			}

			TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
			return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Enthalpy,
					103);
		}

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Enthalpy, 103);

	}

	static double TH2PLPReg1(double Temperature, double Enthalpy) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > T350C + DeltaVal)
				|| (Temperature < T000C - DeltaVal))
			return Result;

		Press_Min = T2P(Temperature);
		Press_Max = PHMinTReg1(Temperature);

		if (Math.abs(Enthalpy) < 1E-8) {
			if (Math.abs(PT2HReg1(Press_Min, Temperature) - Enthalpy) < 1E-6) {
				return Press_Min;
				// exit(1);
			}
		} else {
			if (Math.abs(1 - PT2HReg1(Press_Min, Temperature) / Enthalpy) < 1E-8) {
				return Press_Min;
				// exit(1);
			}
		}

		if ((PT2HReg1(Press_Min, Temperature) - Enthalpy)
				* (PT2HReg1(Press_Max, Temperature) - Enthalpy) > 0) {
			return TH2PHPReg1(Temperature, Enthalpy);
		}

		TOL = 1E-8 * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Enthalpy, 103);
	}

	static double TH2PReg1(double Temperature, double Enthalpy) {
		return TH2PLPReg1(Temperature, Enthalpy);
	}

	static double TH2SHPReg1(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PHPReg1(Temperature, Enthalpy);
		return PT2SReg1(Pressure, Temperature);
	}

	static double TH2SLPReg1(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PLPReg1(Temperature, Enthalpy);
		return PT2SReg1(Pressure, Temperature);
	}

	static double TH2SReg1(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PReg1(Temperature, Enthalpy);
		return PT2SReg1(Pressure, Temperature);
	}

	static double TH2VLPReg1(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PLPReg1(Temperature, Enthalpy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double TH2VHPReg1(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PHPReg1(Temperature, Enthalpy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double TH2VReg1(double Temperature, double Enthalpy) {
		return TH2VLPReg1(Temperature, Enthalpy);
	}

	static double P_SMaxTReg1(double PMin, double PMax, double T) {
		double P_Min, P_Max, P_Mid;

		if (Math.abs(PMax - PMin) < 10 * DeltaVal) {
			return (PMin + PMax) / 2;
			// exit(1);
		}

		P_Min = PMin;
		P_Max = PMax;
		P_Mid = (P_Min + P_Max) / 2;
		if ((PT2SReg1(P_Mid - 2 * DeltaVal, T) < PT2SReg1(P_Mid + 2 * DeltaVal,
				T))) {
			P_Min = P_Mid - 2 * DeltaVal;
		} else {
			P_Max = P_Mid - 2 * DeltaVal;
		}

		return P_SMaxTReg1(P_Min, P_Max, T);
	}

	static double PSMaxTReg1(double T) {
		double P_Min, P_Max;

		P_Min = T2P(T);
		P_Max = 1000;
		return P_SMaxTReg1(P_Min, P_Max, T);
	}

	static double SMaxTReg1(double T) {
		return PT2SReg1(PSMaxTReg1(T), T);
	}

	static double TS2PHPReg1(double T, double S) {
		double Press_Min, Press_Max, TOL;
		double PSMax, SMin2;

		if ((T < T000C - DeltaVal) && (T > T350C + DeltaVal)) {
			return -1.0;
			// exit(1)
		}

		if (T > 273.15 + 5) {
			Press_Min = T2P(T);
			Press_Max = 1000;
		} else {
			PSMax = PSMaxTReg1(T);

			SMin2 = T2SLReg4(T);

			if (S < SMin2) {
				Press_Min = PSMax;
				Press_Max = 1000;
			} else {
				Press_Min = PSMax;
				Press_Max = 1000;
			}
		}
		TOL = 1E-8 * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, T, S, 104);
	}

	static double TS2PLPReg1(double T, double S) {
		double Press_Min, Press_Max, TOL;
		double PSMax, SMin2;

		if ((T < T000C - DeltaVal) && (T > T350C + DeltaVal)) {
			return -1.0;
			// exit(1);
		}

		if (T > 273.15 + 5) {
			Press_Min = T2P(T);
			Press_Max = 1000;
		} else {
			PSMax = PSMaxTReg1(T);

			SMin2 = T2SLReg4(T);

			if (S < SMin2) {
				Press_Min = PSMax;
				Press_Max = 1000;
			} else {
				Press_Min = T2P(T);
				Press_Max = PSMax;
			}
		}
		TOL = 1E-8 * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, T, S, 104);
	}

	static double TS2PReg1(double T, double S) {
		return TS2PLPReg1(T, S);
	}

	static double TS2HHPReg1(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PHPReg1(Temperature, Entropy);
		return PT2HReg1(Pressure, Temperature);
	}

	static double TS2HLPReg1(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PLPReg1(Temperature, Entropy);
		return PT2HReg1(Pressure, Temperature);
	}

	static double TS2HReg1(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PReg1(Temperature, Entropy);
		return PT2HReg1(Pressure, Temperature);
	}

	static double TS2VHPReg1(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PHPReg1(Temperature, Entropy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double TS2VLPReg1(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PLPReg1(Temperature, Entropy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double TS2VReg1(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PReg1(Temperature, Entropy);
		return PT2VReg1(Pressure, Temperature);
	}

	static double TV2PReg1(double Temperature, double Volume) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > T350C + DeltaVal)
				|| (Temperature < T000C - DeltaVal))
			return Result;

		Press_Min = T2P(Temperature);
		Press_Max = 1000;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Volume, 105);
	}

	static double TV2HReg1(double Temperature, double Volume) {
		double Pressure;

		Pressure = TV2PReg1(Temperature, Volume);
		return PT2HReg1(Pressure, Temperature);
	}

	static double TV2SReg1(double Temperature, double Volume) {
		double Pressure;

		Pressure = TV2PReg1(Temperature, Volume);
		return PT2SReg1(Pressure, Temperature);
	}

	static double HS2VReg1(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg1(Enthalpy, Entropy);
		return PH2VReg1(Pressure, Enthalpy);
	}

	static double HV2PReg1(double Enthalpy, double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = H2PLReg1(Enthalpy);
		Press_Max = 1000;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;

		return ZBRENT2(Press_Min, Press_Max, TOL, Enthalpy, Volume, 106);
	}

	static double HV2TReg1(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg1(Enthalpy, Volume);
		return PH2TReg1(Pressure, Enthalpy);
	}

	static double HV2SReg1(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg1(Enthalpy, Volume);
		return PH2SReg1(Pressure, Enthalpy);
	}

	static double SL2PReg1(double Entropy) {
		double Press_Max, Press_Min, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 165.291643;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Entropy, 133);
	}

	static double SL2HLReg1(double Entropy) {
		double Pressure;

		Pressure = SL2PReg1(Entropy);
		return P2HLReg41(Pressure);
	}

	static double SL2VLReg1(double Entropy) {
		double Pressure;

		Pressure = SL2PReg1(Entropy);
		return P2VLReg41(Pressure);
	}

	static double SL2TReg1(double Entropy) {
		double Temp_Max, Temp_Min, TOL;

		Temp_Min = T000C;
		Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Entropy, 134);
	}

	static double SV2PReg1(double Entropy, double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = SL2PReg1(Entropy);
		Press_Max = 1000;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Entropy, Volume, 107);
	}

	static double SV2TReg1(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg1(Entropy, Volume);
		return PS2TReg1(Pressure, Entropy);
	}

	static double SV2HReg1(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg1(Entropy, Volume);
		return PS2HReg1(Pressure, Entropy);
	}

	static double VL2PReg1(double Volume) {
		double Press_Max, Press_Min, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 165.291643;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 135);
	}

	static double VL2HLReg1(double Volume) {
		double Pressure;

		Pressure = VL2PReg1(Volume);
		return P2HLReg41(Pressure);
	}

	static double VL2SLReg1(double Volume) {
		double Pressure;

		Pressure = VL2PReg1(Volume);
		return P2SLReg41(Pressure);
	}

	static double VL2TReg1(double Volume) {
		double Temp_Max, Temp_Min, TOL;

		Temp_Min = T000C;
		Temp_Max = 627.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 136);
	}

	static double PH2SReg2(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg2(Pressure, Enthalpy);
		return PT2SReg2(Pressure, Temperature);
	}

	static double PH2VReg2(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg2(Pressure, Enthalpy);
		return PT2VReg2(Pressure, Temperature);
	}

	static double PS2HReg2(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg2(Pressure, Entropy);
		return PT2HReg2(Pressure, Temperature);
	}

	static double PS2VReg2(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg2(Pressure, Entropy);
		return PT2VReg2(Pressure, Temperature);
	}

	static double PV2TReg2(double Pressure, double Volume) {
		double Temp_Min, Temp_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal) || (Pressure < 0.000611 - DeltaVal))
			return Result;

		if (Pressure <= 165.291643)
			Temp_Min = P2T(Pressure);
		else
			Temp_Min = P2TBound23(Pressure);
		Temp_Max = 1073.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Volume, 201);
	}

	static double PV2HReg2(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg2(Pressure, Volume);
		return PT2HReg2(Pressure, Temperature);
	}

	static double PV2SReg2(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg2(Pressure, Volume);
		return PT2SReg2(Pressure, Temperature);
	}

	static double TH2PReg2(double Temperature, double Enthalpy) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > 1073.15 + DeltaVal)
				|| (Temperature < T000C - DeltaVal))
			return Result;

		Press_Min = 0.00611213;
		if (Temperature <= T350C)
			Press_Max = T2P(Temperature);
		else if (Temperature <= 863.15)
			Press_Max = T2PBound23(Temperature);
		else
			Press_Max = 1000;
		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Enthalpy, 202);
	}

	static double TH2SReg2(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PReg2(Temperature, Enthalpy);
		return PT2SReg2(Pressure, Temperature);
	}

	static double TH2VReg2(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PReg2(Temperature, Enthalpy);
		return PT2VReg2(Pressure, Temperature);
	}

	static double TV2PReg2(double Temperature, double Volume) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > 1073.15 + DeltaVal)
				|| (Temperature < T000C - DeltaVal))
			return Result;

		Press_Min = 0.00611213;
		if (Temperature <= T350C)
			Press_Max = T2P(Temperature);
		else if (Temperature <= 863.15)
			Press_Max = T2PBound23(Temperature);
		else
			Press_Max = 1000;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Volume, 204);
	}

	static double TV2HReg2(double Temperature, double Volume) {
		double Pressure;

		Pressure = TV2PReg2(Temperature, Volume);
		return PT2HReg2(Pressure, Temperature);
	}

	static double TV2SReg2(double Temperature, double Volume) {
		double Pressure;

		Pressure = TV2PReg2(Temperature, Volume);
		return PT2SReg2(Pressure, Temperature);
	}

	static double HS2VReg2(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg2(Enthalpy, Entropy);
		return PH2VReg2(Pressure, Enthalpy);
	}

	static double SG2PReg2(double Entropy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 165.291643;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Entropy, 233);
	}

	double SG2TReg2(double Entropy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Entropy, 234);
	}

	static double VG2PReg2(double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 165.291643;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 235);
	}

	// /////////////////// 05.4.23; 10:12 by ZFKuang
	static double VG2HGReg2(double Volume) {
		double Pressure;

		Pressure = VG2PReg2(Volume);
		return P2HGReg42(Pressure);
	}

	static double VG2SGReg2(double Volume) {
		double Pressure;

		Pressure = VG2PReg2(Volume);
		return P2SGReg42(Pressure);
	}

	static double VG2TReg2(double Volume) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = T350C;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 236);
	}

	static double HV2PReg2(double Enthalpy, double Volume) {
		double Press_Min, Press_Max, TOL;

		if (Volume <= PT2VReg2(1000, 1073.15)) {
			Press_Min = V2PBound23(Volume);
			Press_Max = 1000;
		} else if (Volume <= T2VGReg4(T350C)) {
			Press_Min = V2PBound23(Volume);
			Press_Max = TV2PReg2(1073.15, Volume);
		} else if (Volume <= P2VGReg42(0.00611213)) {
			Press_Min = VG2PReg2(Volume);
			Press_Max = TV2PReg2(1073.15, Volume);
		} else {
			Press_Min = 0.00611213;
			Press_Max = TV2PReg2(1073.15, Volume);
		}

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Volume, Enthalpy, 205);
	}

	static double HV2TReg2(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg2(Enthalpy, Volume);
		return PH2TReg2(Pressure, Enthalpy);
	}

	static double HV2SReg2(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg2(Enthalpy, Volume);
		return PH2SReg2(Pressure, Enthalpy);
	}

	static double SV2PReg2(double Entropy, double Volume) {
		double Press_Min, Press_Max, TOL;
		double V1, V2;

		if (Entropy >= PT2SReg2(1000, 1073.15)) {
			Press_Min = SG2PReg2(Entropy);
			Press_Max = TS2PReg2(1073.15, Entropy);
			TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
			return ZBRENT2(Press_Min, Press_Max, TOL, Entropy, Volume, 206);
		} else {
			V1 = PT2VReg2(1000, 1073.15);
			if (Volume <= V1) {
				Press_Min = V2PBound23(Volume);
				Press_Max = 1000;
			} else {
				V2 = T2VGReg4(T350C);
				if (Volume <= V2) {
					Press_Min = V2PBound23(Volume);
					Press_Max = TV2PReg2(1073.15, Volume);
				} else {
					Press_Min = VG2PReg2(Volume);
					Press_Max = TV2PReg2(1073.15, Volume);
				}
			}

			TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
			return ZBRENT2(Press_Min, Press_Max, TOL, Volume, Entropy, 207);
		}
	}

	static double SV2TReg2(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg2(Entropy, Volume);
		return PS2TReg2(Pressure, Entropy);
	}

	static double SV2HReg2(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg2(Entropy, Volume);
		return PS2HReg2(Pressure, Entropy);
	}

	static double HBound3ab(double Pressure) {
		double PPai;

		PPai = Pressure / 10;
		return ((NH3ABReg3[4] * PPai + NH3ABReg3[3]) * PPai + NH3ABReg3[2])
				* PPai + NH3ABReg3[1];
	}

	static void SubRange3abByPH(double Pressure, double Enthalpy,
			HInteger SubRange) {
		if ((Pressure < Pc_Water)) {
			if (Enthalpy >= P2HGReg4(Pressure)) {
				SubRange.i = (2);
			} else {
				SubRange.i = (1);
			}
		} else {
			if (Enthalpy > HBound3ab(Pressure)) {
				SubRange.i = (2);
			} else {
				SubRange.i = (1);
			}
		}
	}

	static double PH2TReg3a(double Pressure, double Enthalpy) {
		double PPai, Eta, Seta;
		int IFor;

		PPai = Pressure / 1000;
		Eta = Enthalpy / 2300;
		Seta = 0.0;
		for (IFor = 1; IFor <= 31; IFor++) {
			Seta = Seta + NReg3aPH2T[IFor]
					* Math.pow(PPai + 0.240, IReg3aPH2T[IFor])
					* Math.pow(Eta - 0.615, JReg3aPH2T[IFor]);
		}
		return Seta * 760;
	}

	static double PH2TReg3b(double Pressure, double Enthalpy) {
		double PPai, Eta, Seta;
		int IFor;

		PPai = Pressure / 1000;
		Eta = Enthalpy / 2800;
		Seta = 0.0;
		for (IFor = 1; IFor <= 33; IFor++) {
			Seta = Seta + NReg3bPH2T[IFor]
					* Math.pow(PPai + 0.298, IReg3bPH2T[IFor])
					* Math.pow(Eta - 0.720, JReg3bPH2T[IFor]);
		}
		return Seta * 860;
	}

	static double PH2TReg3(double Pressure, double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;
		double TSatP, TB23;
		HInteger SubRange = new HInteger();
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal)
				|| (Pressure < 165.29 * (1 - 100 * DeltaVal)))
			return Result;

		SubRange3abByPH(Pressure, Enthalpy, SubRange);
		switch (SubRange.i) {
		case 1: {
			Result = PH2TReg3a(Pressure, Enthalpy);
			break;
		}
		case 2: {
			Result = PH2TReg3b(Pressure, Enthalpy);
			break;
		}
		default: {
			break;
		}
		}

		Temp_Min = Result - 1.0;
		Temp_Max = Result + 1.0;

		if (Pressure > Pc_Water) {
			if (Temp_Min < T350C)
				Temp_Min = T350C;

			TB23 = P2TBound23(Pressure);
			if (Temp_Max > TB23)
				Temp_Max = TB23;
		} else {
			if (Enthalpy < P2HLReg4(Pressure)) {
				if (Temp_Min < T350C)
					Temp_Min = T350C;
				TSatP = P2T(Pressure);
				if (Temp_Max > TSatP)
					Temp_Max = TSatP;
			} else if (Enthalpy > P2HGReg4(Pressure)) {
				TSatP = P2T(Pressure);
				if (Temp_Min < TSatP)
					Temp_Min = TSatP;
				TB23 = P2TBound23(Pressure);
				if (Temp_Max > TB23)
					Temp_Max = TB23;
			} else {
				return P2T(Pressure);
			}
		}
		TOL = (0.00000001) * (Temp_Max + Temp_Min) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Enthalpy, 301);
	}

	static double PH2SReg3(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg3(Pressure, Enthalpy);
		return PT2SReg3(Pressure, Temperature);
	}

	static double PH2VReg3a(double Pressure, double Enthalpy) {
		double PPai, Eta, Omiga;
		int IFor;

		PPai = Pressure / 1000;
		Eta = Enthalpy / 2100;
		Omiga = 0.0;
		for (IFor = 1; IFor <= 32; IFor++) {
			Omiga = Omiga + NReg3aPH2V[IFor]
					* Math.pow(PPai + 0.128, IReg3aPH2V[IFor])
					* Math.pow(Eta - 0.727, JReg3aPH2V[IFor]);
		}
		return Omiga * 0.0028;
	}

	static double PH2VReg3b(double Pressure, double Enthalpy) {
		double PPai, Eta, Omiga;
		int IFor;

		PPai = Pressure / 1000;
		Eta = Enthalpy / 2800;
		Omiga = 0.0;
		for (IFor = 1; IFor <= 30; IFor++) {
			Omiga = Omiga + NReg3bPH2V[IFor]
					* Math.pow(PPai + 0.0661, IReg3bPH2V[IFor])
					* Math.pow(Eta - 0.720, JReg3bPH2V[IFor]);
		}
		return Omiga * 0.0088;
	}

	static double PH2VReg3(double Pressure, double Enthalpy) {
		double VolumeB23, VolumeT350C, VSatP, Enthalpy_Min, Enthalpy_Max, X;
		double Volume_Min, Volume_Max, TOL;
		HInteger SubRange = new HInteger();
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal)
				|| (Pressure < 165.29 * (1 - 100 * DeltaVal)))
			return Result;

		SubRange3abByPH(Pressure, Enthalpy, SubRange);
		switch (SubRange.i) {
		case 1: {
			Result = PH2VReg3a(Pressure, Enthalpy);
			break;
		}
		case 2: {
			Result = PH2VReg3b(Pressure, Enthalpy);
			break;
		}
		default: {
			break;
		}
		}

		Volume_Min = Result * 0.99;
		Volume_Max = Result * 1.01;

		if (Pressure > Pc_Water) {
			VolumeB23 = PT2VReg2(Pressure, P2TBound23(Pressure));
			if (Volume_Max > VolumeB23)
				Volume_Max = VolumeB23;
			VolumeT350C = PT2VReg1(Pressure, T350C);
			if (Volume_Min < VolumeT350C)
				Volume_Min = VolumeT350C;
		} else {
			if (Enthalpy < P2HLReg4(Pressure)) {
				VSatP = P2VLReg4(Pressure);
				if (Volume_Max > VSatP)
					Volume_Max = VSatP;
				VolumeT350C = PT2VReg1(Pressure, T350C);
				if (Volume_Min < VolumeT350C)
					Volume_Min = VolumeT350C;
			} else if (Enthalpy > P2HGReg4(Pressure)) {
				VolumeB23 = PT2VReg2(Pressure, P2TBound23(Pressure));
				if (Volume_Max > VolumeB23)
					Volume_Max = VolumeB23;
				VSatP = P2VGReg4(Pressure);
				if (Volume_Min < VSatP)
					Volume_Min = VSatP;
			} else {
				Enthalpy_Min = P2HLReg4(Pressure);
				Enthalpy_Max = P2HGReg4(Pressure);
				X = (Enthalpy - Enthalpy_Min) / (Enthalpy_Max - Enthalpy_Min);
				return P2VLReg4(Pressure)
						+ (P2VGReg4(Pressure) - P2VLReg4(Pressure)) * X;
			}
		}

		TOL = (0.00000001) * (Volume_Min + Volume_Max) / 2.0;
		return ZBRENT2(Volume_Min, Volume_Max, TOL, Pressure, Enthalpy, 309);

	}

	static double PS2TReg3a(double Pressure, double Entropy) {
		double PPai, Fai, Seta;
		int IFor;

		PPai = Pressure / 1000;
		Fai = Entropy / 4.4;
		Seta = 0.0;
		for (IFor = 1; IFor <= 33; IFor++) {
			Seta = Seta + NReg3aPS2T[IFor]
					* Math.pow(PPai + 0.240, IReg3aPS2T[IFor])
					* Math.pow(Fai - 0.703, JReg3aPS2T[IFor]);
		}
		return Seta * 760;
	}

	static double PS2TReg3b(double Pressure, double Entropy) {
		double PPai, Fai, Seta;
		int IFor;

		PPai = Pressure / 1000;
		Fai = Entropy / 5.30;
		Seta = 0.0;
		for (IFor = 1; IFor <= 28; IFor++) {
			Seta = Seta + NReg3bPS2T[IFor]
					* Math.pow(PPai + 0.760, IReg3bPS2T[IFor])
					* Math.pow(Fai - 0.818, JReg3bPS2T[IFor]);
		}
		return Seta * 860;
	}

	static void SubRange3abByPS(double Pressure, double Entropy,
			HInteger SubRange) {
		if ((Pressure < Pc_Water)) {
			if (Entropy >= P2SGReg4(Pressure)) {
				SubRange.i = (2);
			} else {
				SubRange.i = (1);
			}
		} else {
			if (Entropy > 4.41202148223476) {
				SubRange.i = (2);
			} else {
				SubRange.i = (1);
			}
		}
	}

	static double PS2TReg3(double Pressure, double Entropy) {
		double Temp_Min, Temp_Max, TOL;
		double SL, SG;
		double TB23, TSat3;
		HInteger SubRange = new HInteger();
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal)
				|| (Pressure < 165.29 * (1 - 100 * DeltaVal)))
			return 0;
		// exit(1) ;

		SubRange3abByPS(Pressure, Entropy, SubRange);
		switch (SubRange.i) {
		case 1: {
			Result = PS2TReg3a(Pressure, Entropy);
			break;
		}
		case 2: {
			Result = PS2TReg3b(Pressure, Entropy);
			break;
		}
		default: {
			break;
		}
		}

		Temp_Min = Result - 1.0;
		Temp_Max = Result + 1.0;

		if (Pressure > Pc_Water) {
			if (Temp_Min < T350C)
				Temp_Min = T350C;
			TB23 = P2TBound23(Pressure);
			if (Temp_Max > TB23)
				Temp_Max = TB23;
		} else {
			SL = P2SLReg4(Pressure);
			SG = P2SGReg4(Pressure);
			TSat3 = P2T(Pressure);
			if (Entropy >= SG) {
				if (Temp_Min < TSat3)
					Temp_Min = TSat3;
				TB23 = P2TBound23(Pressure);
				if (Temp_Max > TB23)
					Temp_Max = TB23;
			} else if (Entropy <= SL) {
				if (Temp_Min < T350C)
					Temp_Min = T350C;
				if (Temp_Max > TSat3)
					Temp_Max = TSat3;
			} else {
				return TSat3;
			}
		}

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Entropy, 302);

	}

	static double PS2HReg3(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg3(Pressure, Entropy);
		return PT2HReg3(Pressure, Temperature);
	}

	static double PS2VReg3a(double Pressure, double Entropy) {
		double PPai, Fai, Omiga;
		int IFor;

		PPai = Pressure / 1000;
		Fai = Entropy / 4.4;
		Omiga = 0.0;
		for (IFor = 1; IFor <= 28; IFor++) {
			Omiga = Omiga + NReg3aPS2V[IFor]
					* Math.pow(PPai + 0.187, IReg3aPS2V[IFor])
					* Math.pow(Fai - 0.755, JReg3aPS2V[IFor]);
		}
		return Omiga * 0.0028;
	}

	static double PS2VReg3b(double Pressure, double Entropy) {
		double PPai, Fai, Omiga;
		int IFor;

		PPai = Pressure / 1000;
		Fai = Entropy / 5.30;
		Omiga = 0.0;
		for (IFor = 1; IFor <= 31; IFor++) {
			Omiga = Omiga + NReg3bPS2V[IFor]
					* Math.pow(PPai + 0.298, IReg3bPS2V[IFor])
					* Math.pow(Fai - 0.816, JReg3bPS2V[IFor]);
		}
		return Omiga * 0.0088;
	}

	static double PS2VReg3(double Pressure, double Entropy) {
		HInteger SubRange = new HInteger();
		double Volume_Min, Volume_Max, TOL;
		double VolumeB23, VolumeT350C;
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal)
				|| (Pressure < 165.29 * (1 - 100 * DeltaVal)))
			return Result;

		SubRange3abByPS(Pressure, Entropy, SubRange);
		switch (SubRange.i) {
		case 1: {
			return PS2VReg3a(Pressure, Entropy);
		}
		case 2: {
			return PS2VReg3b(Pressure, Entropy);
		}
		default: {
			break;
		}
		}

		Volume_Min = Result * 0.99;
		Volume_Max = Result * 1.01;

		VolumeB23 = PT2VReg2(Pressure, P2TBound23(Pressure));
		if (Volume_Max > VolumeB23)
			Volume_Max = VolumeB23;
		VolumeT350C = PT2VReg1(Pressure, T350C);
		if (Volume_Min < VolumeT350C)
			Volume_Min = VolumeT350C;

		TOL = (0.00000001) * (Volume_Min + Volume_Max) / 2.0;
		return ZBRENT2(Volume_Min, Volume_Max, TOL, Pressure, Entropy, 310);
	}

	static double PV2TReg3(double Pressure, double Volume) {
		double Temp_Min, Temp_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Pressure > 1000 + DeltaVal) || (Pressure < 0.000611 - DeltaVal))
			return Result;

		Temp_Min = T350C;
		Temp_Max = P2TBound23(Pressure);
		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, 1 / Volume, Pressure, 303);
	}

	static double PV2HReg3(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg3(Pressure, Volume);
		return TD2HReg3(Temperature, 1 / Volume);
	}

	static double PV2SReg3(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg3(Pressure, Volume);
		return TD2SReg3(Temperature, 1 / Volume);
	}

	static double T2VBound23(double Temperature) {
		double Pressure;

		Pressure = T2PBound23(Temperature);
		return PT2VReg3(Pressure, Temperature);
	}

	static double TH2VReg3(double Temperature, double Enthalpy) {
		double Volume_Min, Volume_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > 863.15 + DeltaVal)
				|| (Temperature < T350C - DeltaVal))
			return Result;

		if (Temperature > Tc_Water) {
			Volume_Min = PT2VReg3(1000, Temperature);
			Volume_Max = T2VBound23(Temperature);
		} else {
			if (Enthalpy >= T2HGReg4(Tc_Water)) {
				Volume_Min = T2VGReg4(Temperature);
				Volume_Max = T2VBound23(Temperature);
			} else {
				Volume_Min = PT2VReg3(1000, Temperature);
				Volume_Max = T2VLReg4(Temperature);
			}
		}
		TOL = (0.00000001) * (1 / Volume_Min + 1 / Volume_Max) / 2.0;
		return 1 / ZBRENT2(1 / Volume_Max, 1 / Volume_Min, TOL, Temperature,
				Enthalpy, 304);
	}

	static double TH2PReg3(double Temperature, double Enthalpy) {
		double Volume;

		Volume = TH2VReg3(Temperature, Enthalpy);
		return TD2PReg3(Temperature, 1 / Volume);
	}

	static double TH2SReg3(double Temperature, double Enthalpy) {
		double Volume;

		Volume = TH2VReg3(Temperature, Enthalpy);
		return TD2SReg3(Temperature, 1 / Volume);
	}

	static double TS2VReg3(double Temperature, double Entropy) {
		double Volume_Min, Volume_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature > 863.15 + DeltaVal)
				|| (Temperature < T350C - DeltaVal))
			return Result;

		if (Temperature > Tc_Water) {
			Volume_Min = PT2VReg3(1000, Temperature);
			Volume_Max = T2VBound23(Temperature);
		} else {
			if (Entropy >= T2SGReg4(Temperature)) {
				Volume_Min = T2VGReg4(Temperature);
				Volume_Max = T2VBound23(Temperature);
			} else {
				Volume_Min = PT2VReg3(1000, Temperature);
				Volume_Max = T2VLReg4(Temperature);
			}
		}

		TOL = (0.00000001) * (1 / Volume_Min + 1 / Volume_Max) / 2.0;
		return 1 / ZBRENT2(1 / Volume_Max, 1 / Volume_Min, TOL, Temperature,
				Entropy, 305);

	}

	static double TS2PReg3(double Temperature, double Entropy) {
		double Volume;

		Volume = TS2VReg3(Temperature, Entropy);
		return TD2PReg3(Temperature, 1 / Volume);
	}

	static double TS2HReg3(double Temperature, double Entropy) {
		double Volume;

		Volume = TS2VReg3(Temperature, Entropy);
		return TD2HReg3(Temperature, 1 / Volume);
	}

	double HL2PReg3(double Enthalpy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 131);
	}

	static double HL2TReg3(double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T350C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 132);
	}

	static double HG2TReg3(double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T350C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 232);
	}

	static double HS2TReg3(double Enthalpy, double Entropy) {
		double Temp_Min, Temp_Max, TOL;
		double SH, SM, SL;

		Temp_Max = PH2TReg3(1000, Enthalpy);
		if (Enthalpy <= T2HGReg4(Tc_Water))
			Temp_Min = HL2TReg3(Enthalpy);
		else if (Enthalpy <= T2HGReg4(T350C))
			Temp_Min = HG2TReg3(Enthalpy);
		else {
			if ((Enthalpy >= 2605.53447593) && (Enthalpy <= 2626.27511698)) {

				SH = H2SHPBound23(Enthalpy);
				SM = H2SMPBound23(Enthalpy);
				SL = H2SLPBound23(Enthalpy);

				if ((Entropy >= SM * (1 - 10 * DeltaVal))
						&& (Entropy <= SL * (1 - 10 * DeltaVal))) {
					Temp_Max = H2TMPBound23(Enthalpy);
					Temp_Min = H2TLPBound23(Enthalpy);
				} else if ((Entropy <= SH * (1 - 10 * DeltaVal))) {
					Temp_Min = H2THPBound23(Enthalpy);
				} else
					Temp_Min = H2TBound23(Enthalpy);
			} else
				Temp_Min = H2TBound23(Enthalpy);
		}

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;

		return ZBRENT2(Temp_Min, Temp_Max, TOL, Enthalpy, Entropy, 306);
	}

	static double HS2PReg3(double Enthalpy, double Entropy) {
		double Temperature;

		Temperature = HS2TReg3(Enthalpy, Entropy);
		return TH2PReg3(Temperature, Enthalpy);
	}

	static double HS2VReg3(double Enthalpy, double Entropy) {
		double Temperature;

		Temperature = HS2TReg3(Enthalpy, Entropy);
		return TH2VReg3(Temperature, Enthalpy);
	}

	static double HG2PReg3(double Enthalpy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 231);
	}

	double HG2SGReg3(double Enthalpy) {
		double P;

		P = HG2PReg3(Enthalpy);
		return P2SGReg43(P);
	}

	static double HV2TReg3(double Enthalpy, double Volume) {
		double Temp_Min, Temp_Max, TOL;
		double VH, VM, VL;

		Temp_Max = PH2TReg3(1000, Enthalpy);

		if (Enthalpy <= T2HGReg4(Tc_Water))
			Temp_Min = HL2TReg3(Enthalpy);
		else if (Enthalpy <= T2HGReg4(T350C))
			Temp_Min = HG2TReg3(Enthalpy);
		else {
			if ((Enthalpy >= 2605.53447593) && (Enthalpy <= 2626.27511698)) {
				VH = H2VHPBound23(Enthalpy);
				VM = H2VMPBound23(Enthalpy);
				VL = H2VLPBound23(Enthalpy);

				if ((Volume >= VM * (1 - 10 * DeltaVal))
						&& (Volume <= VL * (1 - 10 * DeltaVal))) {
					Temp_Max = H2TMPBound23(Enthalpy);
					Temp_Min = H2TLPBound23(Enthalpy);
				} else if ((Volume <= VH * (1 - 10 * DeltaVal))) {
					Temp_Min = H2THPBound23(Enthalpy);
				} else
					Temp_Min = H2TBound23(Enthalpy);
			} else
				Temp_Min = H2TBound23(Enthalpy);

		}

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Enthalpy, Volume, 307);
	}

	static double HV2PReg3(double Enthalpy, double Volume) {
		double Temperature;

		Temperature = HV2TReg3(Enthalpy, Volume);
		return TV2PReg3(Temperature, Volume);
	}

	static double HV2SReg3(double Enthalpy, double Volume) {
		double Temperature;

		Temperature = HV2TReg3(Enthalpy, Volume);
		return TV2SReg3(Temperature, Volume);
	}

	static double SG2PReg3(double Entropy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Entropy, 233);
	}

	double SG2TReg3(double Entropy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T350C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Entropy, 234);
	}

	static double VL2PReg3(double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = Pc_Water;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 135);
	}

	static double VL2HLReg3(double Volume) {
		double Pressure;

		Pressure = VL2PReg3(Volume);
		return P2HLReg43(Pressure);
	}

	static double VL2SLReg3(double Volume) {
		double Pressure;

		Pressure = VL2PReg3(Volume);
		return P2SLReg43(Pressure);
	}

	static double VL2TReg3(double Volume) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = 627.15;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 136);
	}

	static double VG2PReg3(double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = Pc_Water;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 235);
	}

	static double VG2HGReg3(double Volume) {
		double Pressure;

		Pressure = VG2PReg3(Volume);
		return P2HGReg43(Pressure);
	}

	static double VG2SGReg3(double Volume) {
		double Pressure;

		Pressure = VG2PReg3(Volume);
		return P2SGReg43(Pressure);
	}

	static double VG2TReg3(double Volume) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T350C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 236);
	}

	static double SL2PReg3(double Entropy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 165.291643;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Entropy, 133);
	}

	static double SL2HLReg3(double Entropy) {
		double Pressure;

		Pressure = SL2PReg3(Entropy);
		return P2HLReg43(Pressure);
	}

	static double SL2VLReg3(double Entropy) {
		double Pressure;

		Pressure = SL2PReg3(Entropy);
		return P2VLReg43(Pressure);
	}

	static double SL2TReg3(double Entropy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T350C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Entropy, 134);
	}

	static double SV2TReg3(double Entropy, double Volume) {
		double Temp_Min, Temp_Max, TOL;

		if (Volume < T2VLReg4(T350C))
			Temp_Min = T350C;
		else if (Volume < T2VLReg4(Tc_Water))
			Temp_Min = VL2TReg3(Volume);
		else
			Temp_Min = VG2TReg3(Volume);

		if (Volume <= PT2VReg2(1000, 863.15))
			Temp_Max = PV2TReg3(1000, Volume);
		else
			Temp_Max = V2TBound23(Volume);

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Volume, Entropy, 308);
	}

	static double SV2PReg3(double Entropy, double Volume) {
		double Temperature;

		Temperature = SV2TReg3(Entropy, Volume);
		return TV2PReg3(Temperature, Volume);
	}

	static double SV2HReg3(double Entropy, double Volume) {
		double Temperature;

		Temperature = SV2TReg3(Entropy, Volume);
		return TV2HReg3(Temperature, Volume);
	}

	static double SL2PReg4(double Entropy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Entropy, 133);
	}

	static double SL2HLReg4(double Entropy) {
		double Pressure;

		Pressure = SL2PReg4(Entropy);
		return P2HLReg4(Pressure);
	}

	static double SL2VLReg4(double Entropy) {
		double Pressure;

		Pressure = SL2PReg4(Entropy);
		return P2VLReg4(Pressure);
	}

	static double SL2TReg4(double Entropy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Entropy, 134);
	}

	static double SG2PReg4(double Entropy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Entropy, 233);
	}

	static double SG2TREG4(double Entropy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Entropy, 234);
	}

	static double SG2HGReg4(double Entropy) {
		double Pressure;

		Pressure = SG2PReg4(Entropy);
		return P2HGReg4(Pressure);
	}

	static double SG2HGReg2(double Entropy) {
		double Pressure;

		Pressure = SG2PReg2(Entropy);
		return P2HGReg42(Pressure);
	}

	static double SG2HGReg3(double Entropy) {
		double Pressure;

		Pressure = SG2PReg3(Entropy);
		return P2HGReg43(Pressure);
	}

	static double PX2HReg4(double Pressure, double X) {
		double HL, HG;

		HL = P2HLReg4(Pressure);
		HG = P2HGReg4(Pressure);
		return HL + (HG - HL) * X;
	}

	static double PX2SReg4(double Pressure, double X) {
		double SL, SG;

		SL = P2SLReg4(Pressure);
		SG = P2SGReg4(Pressure);
		return SL + (SG - SL) * X;
	}

	static double PX2VReg4(double Pressure, double X) {
		double VL, VG;

		VL = P2VLReg4(Pressure);
		VG = P2VGReg4(Pressure);
		return VL + (VG - VL) * X;
	}

	static double PH2XReg4(double Pressure, double Enthalpy) {
		double HL, HG;

		HL = P2HLReg4(Pressure);
		HG = P2HGReg4(Pressure);
		return (Enthalpy - HL) / (HG - HL);
	}

	static double PH2SReg4(double Pressure, double Enthalpy) {
		double X;

		X = PH2XReg4(Pressure, Enthalpy);
		return PX2SReg4(Pressure, X);
	}

	static double PH2VReg4(double Pressure, double Enthalpy) {
		double X;

		X = PH2XReg4(Pressure, Enthalpy);
		return PX2VReg4(Pressure, X);
	}

	static double PS2XReg4(double Pressure, double Entropy) {
		double SL, SG;

		SL = P2SLReg4(Pressure);
		SG = P2SGReg4(Pressure);
		return (Entropy - SL) / (SG - SL);
	}

	static double PS2HReg4(double Pressure, double Entropy) {
		double X;

		X = PS2XReg4(Pressure, Entropy);
		return PX2HReg4(Pressure, X);
	}

	static double PS2VReg4(double Pressure, double Entropy) {
		double X;

		X = PS2XReg4(Pressure, Entropy);
		return PX2VReg4(Pressure, X);
	}

	static double PV2XReg4(double Pressure, double Volume) {
		double VL, VG;

		VL = P2VLReg4(Pressure);
		VG = P2VGReg4(Pressure);
		return (Volume - VL) / (VG - VL);
	}

	static double PV2HReg4(double Pressure, double Volume) {
		double X;

		X = PV2XReg4(Pressure, Volume);
		return PX2HReg4(Pressure, X);
	}

	static double PV2SReg4(double Pressure, double Volume) {
		double X;

		X = PV2XReg4(Pressure, Volume);
		return PX2SReg4(Pressure, X);
	}

	static double TX2HReg4(double Temperature, double X) {
		double HL, HG;

		HL = T2HLReg4(Temperature);
		HG = T2HGReg4(Temperature);
		return HL + (HG - HL) * X;
	}

	static double TX2SReg4(double Temperature, double X) {
		double SL, SG;

		SL = T2SLReg4(Temperature);
		SG = T2SGReg4(Temperature);
		return SL + (SG - SL) * X;
	}

	static double TX2VReg4(double Temperature, double X) {
		double VL, VG;

		VL = T2VLReg4(Temperature);
		VG = T2VGReg4(Temperature);
		return VL + (VG - VL) * X;
	}

	static void T_HMaxX(double Temp_Min, double Temp_Max, double X, HDouble T) {
		double Temp_Mid;
		double Temp_Mid_Plus, H_Mid_Plus;
		double Temp_Mid_Minus, H_Mid_Minus;
		double Temp_Min2, Temp_Max2;

		if (Math.abs(Temp_Max - Temp_Min) < 0.02) {
			T.d = ((Temp_Max + Temp_Min) / 2);
			return;
			// exit(1);
		}

		Temp_Mid = (Temp_Max + Temp_Min) / 2;

		Temp_Mid_Plus = Temp_Mid + 0.01;
		H_Mid_Plus = TX2HReg4(Temp_Mid_Plus, X);

		Temp_Mid_Minus = Temp_Mid - 0.01;
		H_Mid_Minus = TX2HReg4(Temp_Mid_Minus, X);

		Temp_Min2 = Temp_Min;
		Temp_Max2 = Temp_Max;

		if (H_Mid_Plus > H_Mid_Minus)
			Temp_Min2 = Temp_Mid;
		else
			Temp_Max2 = Temp_Mid;

		T_HMaxX(Temp_Min2, Temp_Max2, X, T);
	}

	static double HMaxX2T(double Temp_Min, double Temp_Max, double X) {
		HDouble T = new HDouble();

		T_HMaxX(Temp_Min, Temp_Max, X, T);
		return T.d;
	}

	static double HMaxX(double X) {
		double Temp_Min, Temp_Max;
		HDouble T = new HDouble();
		double Result;

		Result = Hc_Water;
		if (X <= 0.442)
			return Result;

		Temp_Min = 273.16;
		Temp_Max = Tc_Water;
		T_HMaxX(Temp_Min, Temp_Max, X, T);
		return TX2HReg4(T.d, X);
	}

	static double HMinX(double X) {
		double Result;

		Result = PX2HReg4(0.00611213, X);
		if (Result > Hc_Water)
			return Hc_Water;
		else
			return Result;
	}

	static double TH2XReg4(double Temperature, double Enthalpy) {
		double HL, HG;

		HL = T2HLReg4(Temperature);
		HG = T2HGReg4(Temperature);
		return (Enthalpy - HL) / (HG - HL);
	}

	static double TH2SReg4(double Temperature, double Enthalpy) {
		double X;

		X = TH2XReg4(Temperature, Enthalpy);
		return TX2SReg4(Temperature, X);
	}

	static double TH2VReg4(double Temperature, double Enthalpy) {
		double X;

		X = TH2XReg4(Temperature, Enthalpy);
		return TX2VReg4(Temperature, X);
	}

	static double TS2XReg4(double Temperature, double Entropy) {
		double SL, SG;

		SL = T2SLReg4(Temperature);
		SG = T2SGReg4(Temperature);
		return (Entropy - SL) / (SG - SL);
	}

	static double TS2HReg4(double Temperature, double Entropy) {
		double X;

		X = TS2XReg4(Temperature, Entropy);
		return TX2HReg4(Temperature, X);
	}

	static double TS2VReg4(double Temperature, double Entropy) {
		double X;

		X = TS2XReg4(Temperature, Entropy);
		return TX2VReg4(Temperature, X);
	}

	static double TV2XReg4(double Temperature, double Volume) {
		double VL, VG;

		VL = T2VLReg4(Temperature);
		VG = T2VGReg4(Temperature);
		return (Volume - VL) / (VG - VL);
	}

	static double TV2HReg4(double Temperature, double Volume) {
		double X;

		X = TV2XReg4(Temperature, Volume);
		return TX2HReg4(Temperature, X);
	}

	static double TV2SReg4(double Temperature, double Volume) {
		double X;

		X = TV2XReg4(Temperature, Volume);
		return TX2SReg4(Temperature, X);
	}

	static double HS2PReg4(double Enthalpy, double Entropy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.00611213;
		if (Entropy <= T2SLReg4(Tc_Water))
			Press_Max = SL2PReg4(Entropy);
		else
			Press_Max = SG2PReg4(Entropy);

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Entropy, Enthalpy, 407);
	}

	static double HS2TReg4(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg4(Enthalpy, Entropy);
		return P2T(Pressure);
	}

	static double HS2VReg4(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg4(Enthalpy, Entropy);
		return PH2VReg4(Pressure, Enthalpy);
	}

	static double HS2XReg4(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg4(Enthalpy, Entropy);
		return PS2XReg4(Pressure, Entropy);
	}

	static double HL2PReg4(double Enthalpy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = 165.291643;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 131);
	}

	static double HL2TREG4(double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 132);
	}

	static double HG2PReg4(double Enthalpy) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611231 * 10;
		Press_Max = 22.064 * 10;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Enthalpy, 231);
	}

	static double HG2TReg4(double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Enthalpy, 232);
	}

	static double VL2PReg4(double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = Pc_Water;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 135);
	}

	static double VL2HLReg4(double Volume) {
		double Pressure;

		Pressure = VL2PReg4(Volume);
		return P2HLReg4(Pressure);
	}

	static double VL2SLReg4(double Volume) {
		double Pressure;

		Pressure = VL2PReg4(Volume);
		return P2SLReg4(Pressure);
	}

	static double VL2TReg4(double Volume) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 136);
	}

	static double VG2PReg4(double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611213 * 10;
		Press_Max = Pc_Water;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT1(Press_Min, Press_Max, TOL, Volume, 235);
	}

	static double VG2HGReg4(double Volume) {
		double Pressure;

		Pressure = VG2PReg4(Volume);
		return P2HGReg4(Pressure);
	}

	static double VG2SGReg4(double Volume) {
		double Pressure;

		Pressure = VG2PReg4(Volume);
		return P2SGReg4(Pressure);
	}

	static double VG2TREG4(double Volume) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = T000C;
		Temp_Max = Tc_Water;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT1(Temp_Min, Temp_Max, TOL, Volume, 236);
	}

	static double HV2PReg4(double Enthalpy, double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611231 * 10;

		if (Volume < 1 / Dc_Water)
			Press_Max = VL2PReg4(Volume);
		else
			Press_Max = VG2PReg4(Volume);

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Volume, Enthalpy, 400);
	}

	static double HV2TReg4(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg4(Enthalpy, Volume);
		return P2T(Pressure);
	}

	static double HV2SReg4(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg4(Enthalpy, Volume);
		return PH2SReg4(Pressure, Enthalpy);
	}

	static double HV2XReg4(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg4(Enthalpy, Volume);
		return PH2XReg4(Pressure, Enthalpy);
	}

	static void GetTRangeHX(HDouble Temp_Min, HDouble Temp_Max,
			double Enthalpy, double X) {
		double FMin, FMid, FMidMin;
		double Temp_Midmin, Temp_Mid;

		if (Math.abs(Temp_Min.d - Temp_Max.d) < 0.00001)
			return;
		// exit(1);
		FMin = TX2HReg4(Temp_Min.d, X) - Enthalpy;

		Temp_Mid = (Temp_Min.d + Temp_Max.d) / 2;
		FMid = TX2HReg4(Temp_Mid, X) - Enthalpy;

		if (FMin * FMid < 0)
			Temp_Max.d = (Temp_Mid);
		else {
			Temp_Midmin = (Temp_Min.d + Temp_Mid) / 2;
			FMidMin = TX2HReg4(Temp_Midmin, X) - Enthalpy;

			if (FMid * FMidMin < 0) {
				Temp_Min.d = (Temp_Midmin);
				Temp_Max.d = (Temp_Mid);
			} else {
				Temp_Min.d = (Temp_Mid);
				GetTRangeHX(Temp_Min, Temp_Max, Enthalpy, X);
			}
		}
	}

	static double HX2TReg4(double Enthalpy, double X) {
		HDouble Temp_Min = new HDouble(), Temp_Max = new HDouble();
		double TOL;
		double FMin, FMax;

		Temp_Min.d = (T000C);
		Temp_Max.d = (Tc_Water);

		FMin = TX2HReg4(Temp_Min.d, X) - Enthalpy;
		FMax = TX2HReg4(Temp_Max.d, X) - Enthalpy;

		if (FMin * FMax > 0)
			GetTRangeHX(Temp_Min, Temp_Max, Enthalpy, X);

		TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
		return ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Enthalpy, 402);
	}

	static double HX2THPReg4(double Enthalpy, double X) {
		double Temp_Min, Temp_Max, TOL;
		double FMax, FMin;
		double T_Low;

		T_Low = HX2TReg4(Enthalpy, X);
		Temp_Max = Tc_Water;
		Temp_Min = (T_Low + Temp_Max) / 2;

		FMin = TX2HReg4(Temp_Min, X) - Enthalpy;
		FMax = TX2HReg4(Temp_Max, X) - Enthalpy;
		if (FMin * FMax > 0) {
			return T_Low;
			// exit(1) ;
		}

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, X, Enthalpy, 402);
	}

	static double HX2PReg4(double Enthalpy, double X) {
		double Temperature;

		Temperature = HX2TReg4(Enthalpy, X);
		return T2P(Temperature);
	}

	static double HX2PHPReg4(double Enthalpy, double X) {
		double Temperature;

		Temperature = HX2THPReg4(Enthalpy, X);
		return T2P(Temperature);
	}

	static double HX2SReg4(double Enthalpy, double X) {
		double Temperature;

		Temperature = HX2TReg4(Enthalpy, X);
		return TX2SReg4(Temperature, X);
	}

	static double HX2SHPReg4(double Enthalpy, double X) {
		double Temperature;

		Temperature = HX2THPReg4(Enthalpy, X);
		return TX2SReg4(Temperature, X);
	}

	static double HX2VReg4(double Enthalpy, double X) {
		double Temperature;

		Temperature = HX2TReg4(Enthalpy, X);
		return TX2VReg4(Temperature, X);
	}

	static double HX2VHPReg4(double Enthalpy, double X) {
		double Temperature;

		Temperature = HX2THPReg4(Enthalpy, X);
		return TX2VReg4(Temperature, X);
	}

	static double SV2PReg4(double Entropy, double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.000611231 * 10;

		if (Volume < 1 / Dc_Water)
			Press_Max = VL2PReg4(Volume);
		else
			Press_Max = VG2PReg4(Volume);

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Entropy, Volume, 401);
	}

	static double SV2TReg4(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg4(Entropy, Volume);
		return P2T(Pressure);
	}

	static double SV2HReg4(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg4(Entropy, Volume);
		return PS2HReg4(Pressure, Entropy);
	}

	static double SV2XReg4(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg4(Entropy, Volume);
		return PS2XReg4(Pressure, Entropy);
	}

	static void T_SMinXReg4(double Temp_Min, double Temp_Max, double X,
			HDouble T) {
		double Temp_Mid;
		double Temp_Mid_Plus, S_Mid_Plus;
		double Temp_Mid_Minus, S_Mid_Minus;
		double Temp_Min2, Temp_Max2;

		if (Math.abs(Temp_Max - Temp_Min) < 0.02) {
			T.d = ((Temp_Max + Temp_Min) / 2);
			return;
			// exit(1);
		}

		Temp_Mid = (Temp_Max + Temp_Min) / 2;

		Temp_Mid_Plus = Temp_Mid + 0.01;
		S_Mid_Plus = TX2SReg4(Temp_Mid_Plus, X);

		Temp_Mid_Minus = Temp_Mid - 0.01;
		S_Mid_Minus = TX2SReg4(Temp_Mid_Minus, X);

		Temp_Min2 = Temp_Min;
		Temp_Max2 = Temp_Max;

		if (S_Mid_Plus < S_Mid_Minus)
			Temp_Min2 = Temp_Mid;
		else
			Temp_Max2 = Temp_Mid;

		T_SMinXReg4(Temp_Min2, Temp_Max2, X, T);
	}

	static double SMinX2TReg4(double X) {
		double Temp_Min, Temp_Max;
		HDouble T = new HDouble();
		double SMin, TMin, STX;
		int IFor;

		if (X >= 0.6) {
			return Tc_Water;
			// exit(1) ;
		}
		SMin = 100d;
		TMin = Tc_Water;
		for (IFor = 0; IFor <= 375; IFor++) {
			T.d = (T000C + (Tc_Water - T000C) / 375 * IFor);
			if (T.d > Tc_Water)
				break;
			STX = TX2SReg4(T.d, X);
			if (STX < SMin) {
				SMin = STX;
				TMin = T.d;
			}
		}

		Temp_Min = TMin - 1;
		if (Temp_Min < T000C)
			Temp_Min = T000C;
		Temp_Max = TMin + 1;
		if (Temp_Max > Tc_Water)
			Temp_Max = Tc_Water;

		T_SMinXReg4(Temp_Min, Temp_Max, X, T);
		return T.d;
	}

	static double SMinXReg4(double X) {
		return TX2SReg4(SMinX2TReg4(X), X);
	}

	static void T_SMaxXReg4(double Temp_Min, double Temp_Max, double X,
			HDouble T) {
		double Temp_Mid;
		double Temp_Mid_Plus, S_Mid_Plus;
		double Temp_Mid_Minus, S_Mid_Minus;
		double Temp_Min2, Temp_Max2;

		if (Math.abs(Temp_Max - Temp_Min) < 0.02) {
			T.d = ((Temp_Max + Temp_Min) / 2);
			return;
			// exit(1);
		}

		Temp_Mid = (Temp_Max + Temp_Min) / 2;

		Temp_Mid_Plus = Temp_Mid + 0.01;
		S_Mid_Plus = TX2SReg4(Temp_Mid_Plus, X);

		Temp_Mid_Minus = Temp_Mid - 0.01;
		S_Mid_Minus = TX2SReg4(Temp_Mid_Minus, X);

		Temp_Min2 = Temp_Min;
		Temp_Max2 = Temp_Max;

		if (S_Mid_Plus > S_Mid_Minus)
			Temp_Min2 = Temp_Mid;
		else
			Temp_Max2 = Temp_Mid;

		T_SMaxXReg4(Temp_Min2, Temp_Max2, X, T);
	}

	static double SMaxX2TReg4(double X) {
		double Temp_Min, Temp_Max;
		HDouble T = new HDouble();
		double SMax, TMax, STX;
		int IFor;

		if (X >= 0.6) {
			return TX2SReg4(T000C, X);
			// exit(1);
		}
		SMax = -100d;
		TMax = Tc_Water;
		for (IFor = 0; IFor <= 375; IFor++) {
			T.d = (T000C + (Tc_Water - T000C) / 375 * IFor);
			if (T.d > Tc_Water)
				break;
			STX = TX2SReg4(T.d, X);
			if (STX > SMax) {
				SMax = STX;
				TMax = T.d;
			}
		}

		Temp_Min = TMax - 1;
		if (Temp_Min < T000C)
			Temp_Min = T000C;
		Temp_Max = TMax + 1;
		if (Temp_Max > Tc_Water)
			Temp_Max = Tc_Water;

		T_SMaxXReg4(Temp_Min, Temp_Max, X, T);
		return T.d;
	}

	static double SMaxXReg4(double X) {
		return TX2SReg4(SMaxX2TReg4(X), X);
	}

	static void GetTRangeSX(HDouble Temp_Min, HDouble Temp_Max, double Entropy,
			double X) {
		double FMin, FMid, FMidMin;
		double Temp_Midmin, Temp_Mid;

		if ((Math.abs(Temp_Min.d - Temp_Max.d) < 0.00001))
			return;
		// exit(1);

		FMin = TX2SReg4(Temp_Min.d, X) - Entropy;

		Temp_Mid = (Temp_Min.d + Temp_Max.d) / 2;
		FMid = TX2SReg4(Temp_Mid, X) - Entropy;

		if (FMin * FMid < 0)
			Temp_Max.d = (Temp_Mid);
		else {
			Temp_Midmin = (Temp_Min.d + Temp_Mid) / 2;
			FMidMin = TX2SReg4(Temp_Midmin, X) - Entropy;

			if (FMid * FMidMin < 0) {
				Temp_Min.d = (Temp_Midmin);
				Temp_Max.d = (Temp_Mid);
			} else {
				Temp_Min.d = (Temp_Mid);
				GetTRangeSX(Temp_Min, Temp_Max, Entropy, X);
			}
		}
	}

	static void SX2TReg4_HML(double Entropy, double X, HDouble TH, HDouble TM,
			HDouble TL, HInteger Nbrs) {
		HDouble Temp_Min = new HDouble(), Temp_Max = new HDouble();
		double TOL;
		double Temp;
		double FMin, FMax;

		Temp_Min.d = (T000C);
		if (Math.abs(1 - Entropy / Sc_Water) <= 0.00000001)
			Temp_Max.d = (Tc_Water - 0.005);
		else
			Temp_Max.d = (Tc_Water);
		FMin = TX2SReg4(Temp_Min.d, X) - Entropy;
		FMax = TX2SReg4(Temp_Max.d, X) - Entropy;

		if (FMin * FMax > 0)
			GetTRangeSX(Temp_Min, Temp_Max, Entropy, X);

		TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
		TM.d = (ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Entropy, 406));

		Temp_Max.d = ((TM.d + T000C) / 2);
		Temp_Min.d = (T000C);

		FMin = TX2SReg4(Temp_Min.d, X) - Entropy;
		FMax = TX2SReg4(Temp_Max.d, X) - Entropy;
		if (FMin * FMax < 0) {
			TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
			TL.d = (ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Entropy, 406));
		} else
			TL.d = (-1d);

		if (Math.abs(1 - Entropy / Sc_Water) <= 0.00000001)
			TH.d = (Tc_Water);
		else {
			Temp_Max.d = (Tc_Water);
			Temp_Min.d = ((TM.d + Tc_Water) / 2);

			FMin = TX2SReg4(Temp_Min.d, X) - Entropy;
			FMax = TX2SReg4(Temp_Max.d, X) - Entropy;
			if (FMin * FMax < 0) {
				TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
				TH.d = (ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Entropy, 406));
			} else
				TH.d = (-1d);
		}

		if ((TM.d > 0) && (TL.d > 0) && (TH.d < 0)) {
			if (TL.d > TM.d) {
				Temp = TL.d;
				TL.d = (TM.d);
				TM.d = (Temp);
			}

			Temp_Max.d = (TM.d - 0.005);
			Temp_Min.d = (TL.d + 0.005);

			FMin = TX2SReg4(Temp_Min.d, X) - Entropy;
			FMax = TX2SReg4(Temp_Max.d, X) - Entropy;
			if (FMin * FMax < 0) {
				TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
				TH.d = (ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Entropy, 406));
			}
		} else if ((TM.d > 0) && (TH.d > 0) && (TL.d < 0)) {
			if (TH.d < TM.d) {
				Temp = TH.d;
				TH.d = (TM.d);
				TM.d = (Temp);
			}

			Temp_Max.d = (TH.d - 0.005);
			Temp_Min.d = (TM.d + 0.005);

			FMin = TX2SReg4(Temp_Min.d, X) - Entropy;
			FMax = TX2SReg4(Temp_Max.d, X) - Entropy;
			if (FMin * FMax < 0) {
				TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
				TL.d = (ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Entropy, 406));
			}
		}

		if (TL.d > TM.d) {
			Temp = TL.d;
			TL.d = (TM.d);
			TM.d = (Temp);
		}

		if (TM.d > TH.d) {
			Temp = TM.d;
			TM.d = (TH.d);
			TH.d = (Temp);
		}

		if (TL.d > TM.d) {
			Temp = TL.d;
			TL.d = (TM.d);
			TM.d = (Temp);
		}

		Nbrs.i = (3);
		if (TL.d < 0)
			Nbrs.i = (2);
		if (TM.d < 0)
			Nbrs.i = (1);
	}

	static double SX2TReg4(double Entropy, double X) {
		HDouble TH = new HDouble(), TM = new HDouble(), TL = new HDouble();
		HInteger Nbrs = new HInteger();

		SX2TReg4_HML(Entropy, X, TH, TM, TL, Nbrs);
		if (TL.d > 0) {
			return TL.d;
		}
		if (TM.d > 0) {
			return TM.d;
		}
		return TH.d;
	}

	static double SX2TMPReg4(double Entropy, double X) {
		HDouble TH = new HDouble(), TM = new HDouble(), TL = new HDouble();
		HInteger Nbrs = new HInteger();

		SX2TReg4_HML(Entropy, X, TH, TM, TL, Nbrs);
		if (TM.d > 0) {
			return TM.d;
		}
		return TH.d;
	}

	static double SX2THPReg4(double Entropy, double X) {
		HDouble TH = new HDouble(), TM = new HDouble(), TL = new HDouble();
		HInteger Nbrs = new HInteger();

		SX2TReg4_HML(Entropy, X, TH, TM, TL, Nbrs);
		return TH.d;
	}

	static double SX2TReg4Nbrs(double Entropy, double X) {
		HDouble TH = new HDouble(), TM = new HDouble(), TL = new HDouble();
		HInteger Nbrs = new HInteger();

		SX2TReg4_HML(Entropy, X, TH, TM, TL, Nbrs);
		return Nbrs.i;
	}

	static double SX2PReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2TReg4(Entropy, X);
		return T2P(Temperature);
	}

	static double SX2PMPReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2TMPReg4(Entropy, X);
		return T2P(Temperature);
	}

	static double SX2PHPReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2THPReg4(Entropy, X);
		return T2P(Temperature);
	}

	static double SX2HReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2TReg4(Entropy, X);
		return TX2HReg4(Temperature, X);
	}

	static double SX2HMPReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2TMPReg4(Entropy, X);
		return TX2HReg4(Temperature, X);
	}

	static double SX2HHPReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2THPReg4(Entropy, X);
		return TX2HReg4(Temperature, X);
	}

	static double SX2VReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2TReg4(Entropy, X);
		return TX2VReg4(Temperature, X);
	}

	static double SX2VMPReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2TMPReg4(Entropy, X);
		return TX2VReg4(Temperature, X);
	}

	static double SX2VHPReg4(double Entropy, double X) {
		double Temperature;

		Temperature = SX2THPReg4(Entropy, X);
		return TX2VReg4(Temperature, X);
	}

	static void GetTRangeVX(HDouble Temp_Min, HDouble Temp_Max, double Volume,
			double X) {
		double FMin, FMid, FMidMin;
		double Temp_MidMin, Temp_Mid;

		if (Math.abs(Temp_Min.d - Temp_Max.d) < 0.00001)
			return;
		// exit(1);

		FMin = TX2VReg4(Temp_Min.d, X) - Volume;

		Temp_Mid = (Temp_Min.d + Temp_Max.d) / 2;
		FMid = TX2VReg4(Temp_Mid, X) - Volume;

		if (FMin * FMid < 0)
			Temp_Max.d = (Temp_Mid);
		else {
			Temp_MidMin = (Temp_Min.d + Temp_Mid) / 2;
			FMidMin = TX2VReg4(Temp_MidMin, X) - Volume;

			if (FMid * FMidMin < 0) {
				Temp_Min.d = (Temp_MidMin);
				Temp_Max.d = (Temp_Mid);
			} else {
				Temp_Min.d = (Temp_Mid);
				GetTRangeVX(Temp_Min, Temp_Max, Volume, X);
			}
		}
	}

	static double VX2TReg4(double Volume, double X) {
		HDouble Temp_Min = new HDouble(), Temp_Max = new HDouble();
		double TOL;
		double FMin, FMax;

		Temp_Min.d = (T000C);
		Temp_Max.d = (Tc_Water);

		FMin = TX2VReg4(Temp_Min.d, X) - Volume;
		FMax = TX2VReg4(Temp_Max.d, X) - Volume;

		if (FMin * FMax > 0)
			GetTRangeVX(Temp_Min, Temp_Max, Volume, X);

		TOL = (0.00000001) * (Temp_Min.d + Temp_Max.d) / 2.0;
		return ZBRENT2(Temp_Min.d, Temp_Max.d, TOL, X, Volume, 405);
	}

	static double VX2THPReg4(double Volume, double X) {
		double Temp_Min, Temp_Max, TOL;
		double FMax, FMin;
		double T_Low;

		T_Low = VX2TReg4(Volume, X);

		Temp_Max = Tc_Water;
		Temp_Min = (T_Low + Temp_Max) / 2;

		FMin = TX2VReg4(Temp_Min, X) - Volume;
		FMax = TX2VReg4(Temp_Max, X) - Volume;
		if (FMin * FMax > 0) {
			return T_Low;
			// exit(1);
		}

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, X, Volume, 405);
	}

	static double VX2PReg4(double Volume, double X) {
		double Temperature;

		Temperature = VX2TReg4(Volume, X);
		return T2P(Temperature);
	}

	static double VX2PHPReg4(double Volume, double X) {
		double Temperature;

		Temperature = VX2THPReg4(Volume, X);
		return T2P(Temperature);
	}

	static double VX2HReg4(double Volume, double X) {
		double Temperature;

		Temperature = VX2TReg4(Volume, X);
		return TX2HReg4(Temperature, X);
	}

	static double VX2HHPReg4(double Volume, double X) {
		double Temperature;

		Temperature = VX2THPReg4(Volume, X);
		return TX2HReg4(Temperature, X);
	}

	static double VX2SReg4(double Volume, double X) {
		double Temperature;

		Temperature = VX2TReg4(Volume, X);
		return TX2SReg4(Temperature, X);
	}

	static double VX2SHPReg4(double Volume, double X) {
		double Temperature;

		Temperature = VX2THPReg4(Volume, X);
		return TX2SReg4(Temperature, X);
	}

	static double PT2DReg5(double Pressure, double Temperature) {
		return 1 / PT2VReg5(Pressure, Temperature);
	}

	static double PH2TReg5(double Pressure, double Enthalpy) {
		double Temp_Min, Temp_Max, TOL;
		double Result;

		Result = -2.0;
		if ((Pressure > 100 + DeltaVal) || (Pressure < 0.000611 - DeltaVal))
			return Result;

		Temp_Min = 1073.15;
		Temp_Max = 2273.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Enthalpy, 501);
	}

	static double PH2SReg5(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg5(Pressure, Enthalpy);
		return PT2SReg5(Pressure, Temperature);
	}

	static double PH2VReg5(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = PH2TReg5(Pressure, Enthalpy);
		return PT2VReg5(Pressure, Temperature);
	}

	static double PS2TReg5(double Pressure, double Entropy) {
		double Temp_Min, Temp_Max, TOL;
		double Result;

		Result = -2.0;
		if ((Pressure > 100 + DeltaVal) || (Pressure < 0.000611 - DeltaVal))
			return Result;

		Temp_Min = 1073.15;
		Temp_Max = 2273.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Entropy, 502);
	}

	static double PS2HReg5(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg5(Pressure, Entropy);
		return PT2HReg5(Pressure, Temperature);
	}

	static double PS2VReg5(double Pressure, double Entropy) {
		double Temperature;

		Temperature = PS2TReg5(Pressure, Entropy);
		return PT2VReg5(Pressure, Temperature);
	}

	static double PV2TReg5(double Pressure, double Volume) {
		double Temp_Min, Temp_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Pressure > 100 + DeltaVal) || (Pressure < 0.000611 - DeltaVal))
			return Result;

		Temp_Min = 1073.15;
		Temp_Max = 2273.15;

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Pressure, Volume, 503);
	}

	static double PV2HReg5(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg5(Pressure, Volume);
		return PT2HReg5(Pressure, Temperature);
	}

	static double PV2SReg5(double Pressure, double Volume) {
		double Temperature;

		Temperature = PV2TReg5(Pressure, Volume);
		return PT2SReg5(Pressure, Temperature);
	}

	static double TH2PReg5(double Temperature, double Enthalpy) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature < 1073.15 - DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return Result;

		Press_Min = 0.00611213;
		Press_Max = 100;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Enthalpy, 504);
	}

	static double TH2SReg5(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PReg5(Temperature, Enthalpy);
		return PT2SReg5(Pressure, Temperature);
	}

	static double TH2VReg5(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = TH2PReg5(Temperature, Enthalpy);
		return PT2VReg5(Pressure, Temperature);
	}

	static double TS2PReg5(double Temperature, double Entropy) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature < 1073.15 - DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return Result;

		Press_Min = 0.00611213;
		Press_Max = 100;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Entropy, 505);
	}

	static double TS2HReg5(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PReg5(Temperature, Entropy);
		return PT2HReg5(Pressure, Temperature);
	}

	static double TS2VReg5(double Temperature, double Entropy) {
		double Pressure;

		Pressure = TS2PReg5(Temperature, Entropy);
		return PT2VReg5(Pressure, Temperature);
	}

	static double TV2PReg5(double Temperature, double Volume) {
		double Press_Min, Press_Max, TOL;
		double Result;

		Result = -2.0;

		if ((Temperature < 1073.15 - DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return Result;

		Press_Min = 0.00611213;
		Press_Max = 100;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Temperature, Volume, 506);
	}

	static double TV2HReg5(double Temperature, double Volume) {
		double Pressure;

		Pressure = TV2PReg5(Temperature, Volume);
		return PT2HReg5(Pressure, Temperature);
	}

	static double TV2SReg5(double Temperature, double Volume) {
		double Pressure;

		Pressure = TV2PReg5(Temperature, Volume);
		return PT2SReg5(Pressure, Temperature);
	}

	static double HS2PReg5(double Enthalpy, double Entropy) {
		double Press_Min, Press_Max, TOL;

		if (Enthalpy > PT2HReg2(0.00611213, 1073.15))
			Press_Min = 0.00611213;
		else
			Press_Min = TH2PReg2(1073.15, Enthalpy);

		Press_Max = 100;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Enthalpy, Entropy, 507);

	}

	static double HS2TReg5(double Enthalpy, double Entropy) {
		double Temp_Min, Temp_Max, TOL;

		Temp_Min = PH2TReg5(0.00611213, Enthalpy);
		Temp_Max = PH2TReg5(100, Enthalpy);

		TOL = (0.00000001) * (Temp_Min + Temp_Max) / 2.0;
		return ZBRENT2(Temp_Min, Temp_Max, TOL, Enthalpy, Entropy, 508);
	}

	static double HS2VReg5(double Enthalpy, double Entropy) {
		double Pressure;

		Pressure = HS2PReg5(Enthalpy, Entropy);
		return PH2VReg5(Pressure, Enthalpy);
	}

	static double HV2PReg5(double Enthalpy, double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = 0.00611213;
		Press_Max = 100;

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Enthalpy, Volume, 509);
	}

	static double HV2TReg5(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg5(Enthalpy, Volume);
		return PH2TReg5(Pressure, Enthalpy);
	}

	static double HV2SReg5(double Enthalpy, double Volume) {
		double Pressure;

		Pressure = HV2PReg5(Enthalpy, Volume);
		return PH2SReg5(Pressure, Enthalpy);
	}

	static double SV2PReg5(double Entropy, double Volume) {
		double Press_Min, Press_Max, TOL;

		Press_Min = TS2PReg2(1073.15, Entropy);

		if (Entropy <= PT2SReg5(100, 2273.15))
			Press_Max = 100;
		else
			Press_Max = TS2PReg5(2273.15, Entropy);

		TOL = (0.00000001) * (Press_Min + Press_Max) / 2.0;
		return ZBRENT2(Press_Min, Press_Max, TOL, Entropy, Volume, 510);
	}

	static double SV2TReg5(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg5(Entropy, Volume);
		return PS2TReg5(Pressure, Entropy);
	}

	static double SV2HReg5(double Entropy, double Volume) {
		double Pressure;

		Pressure = SV2PReg5(Entropy, Volume);
		return PS2HReg5(Pressure, Entropy);
	}

	static double Func_VolumeReg1PT(double Pressure, double Temperature,
			double Volume) {
		return PT2VReg1(Pressure, Temperature) - Volume;
	}

	static double Func_EnthalpyReg1PT(double Pressure, double Temperature,
			double Enthalpy) {
		return PT2HReg1(Pressure, Temperature) - Enthalpy;
	}

	static double Func_EntropyReg1PT(double Pressure, double Temperature,
			double Entropy) {
		return PT2SReg1(Pressure, Temperature) - Entropy;
	}

	static double Func_PH2VReg1(double Pressure, double Enthalpy, double Volume) {
		return PH2VReg1(Pressure, Enthalpy) - Volume;
	}

	static double Func_PS2VReg1(double Pressure, double Entropy, double Volume) {
		return PS2VReg1(Pressure, Entropy) - Volume;
	}

	static double Func_PH2Sreg1(double Pressure, double Enthalpy, double Entropy) {
		return PH2SReg1(Pressure, Enthalpy) - Entropy;
	}

	static double Func_VolReg2PT(double Pressure, double Temperature,
			double Volume) {
		return PT2VReg2(Pressure, Temperature) - Volume;
	}

	static double Func_EnthalpyReg2PT(double Pressure, double Temperature,
			double Enthalpy) {
		return PT2HReg2(Pressure, Temperature) - Enthalpy;
	}

	static double Func_EntropyReg2PT(double Pressure, double Temperature,
			double Entropy) {
		return PT2SReg2(Pressure, Temperature) - Entropy;
	}

	static double Func_PH2VReg2(double Pressure, double Enthalpy, double Volume) {
		return PH2VReg2(Pressure, Enthalpy) - Volume;
	}

	static double Func_PV2HReg2(double Pressure, double Volume, double Enthalpy) {
		return PV2HReg2(Pressure, Volume) - Enthalpy;
	}

	static double Func_PS2VReg2(double Pressure, double Entropy, double Volume) {
		return PS2VReg2(Pressure, Entropy) - Volume;
	}

	static double Func_PV2SReg2(double Pressure, double Volume, double Entropy) {
		return PV2SReg2(Pressure, Volume) - Entropy;
	}

	static double Func_PH2Sreg2(double Pressure, double Enthalpy, double Entropy) {
		return PH2SReg2(Pressure, Enthalpy) - Entropy;
	}

	static double Func_PT2HReg3(double Pressure, double Temperature,
			double Enthalpy) {
		return PT2HReg3(Pressure, Temperature) - Enthalpy;
	}

	static double Func_PT2SReg3(double Pressure, double Temperature,
			double Entropy) {
		return PT2SReg3(Pressure, Temperature) - Entropy;
	}

	static double Func_PressReg3TD(double Temperature, double Density,
			double Pressure) {
		return TD2PReg3(Temperature, Density) - Pressure;
	}

	static double Func_EnthalpyReg3TD(double Temperature, double Density,
			double Enthalpy) {
		return TD2HReg3(Temperature, Density) - Enthalpy;
	}

	static double Func_EntropyReg3TD(double Temperature, double Density,
			double Entropy) {
		return TD2SReg3(Temperature, Density) - Entropy;
	}

	static double Func_TH2SReg3(double Temperature, double Enthalpy,
			double Entropy) {
		return TH2SReg3(Temperature, Enthalpy) - Entropy;
	}

	static double Func_TH2VReg3(double Temperature, double Enthalpy,
			double Volume) {
		return TH2VReg3(Temperature, Enthalpy) - Volume;
	}

	static double Func_TV2SReg3(double Temperature, double Volume,
			double Entropy) {
		return TV2SReg3(Temperature, Volume) - Entropy;
	}

	static double Func_PV2HReg3(double Pressure, double Volume, double Enthalpy) {
		return PV2HReg3(Pressure, Volume) - Enthalpy;
	}

	static double Func_PV2SReg3(double Pressure, double Volume, double Entropy) {
		return PV2SReg3(Pressure, Volume) - Entropy;
	}

	static double Func_PS2HReg4(double Pressure, double Entropy, double Enthalpy) {
		return PS2HReg4(Pressure, Entropy) - Enthalpy;
	}

	static double Func_PV2HReg4(double Pressure, double Volume, double Enthalpy) {
		return PV2HReg4(Pressure, Volume) - Enthalpy;
	}

	static double Func_PS2VReg4(double Pressure, double Entropy, double Volume) {
		return PS2VReg4(Pressure, Entropy) - Volume;
	}

	static double Func_TX2HReg4(double Temperature, double X, double Enthalpy) {
		return TX2HReg4(Temperature, X) - Enthalpy;
	}

	static double Func_Maxwell(double Density_G, double Density_L,
			double Temperature) {
		double Tau, Delta_L, Delta_G;

		Tau = Tc_Water / Temperature;
		Delta_L = Density_L / Dc_Water;
		Delta_G = Density_G / Dc_Water;

		return Delta_G * FiDeltaReg3(Tau, Delta_G) + FiReg3(Tau, Delta_G)
				- Delta_L * FiDeltaReg3(Tau, Delta_L) - FiReg3(Tau, Delta_L);
	}

	static double Func_TX2VReg4(double Temperature, double X, double Volume) {
		return TX2VReg4(Temperature, X) - Volume;
	}

	static double Func_TX2SReg4(double Temperature, double X, double Entropy) {
		return TX2SReg4(Temperature, X) - Entropy;
	}

	static double Func_PT2HReg5(double Pressure, double Temperature,
			double Enthalpy) {
		return PT2HReg5(Pressure, Temperature) - Enthalpy;
	}

	static double Func_PT2SReg5(double Pressure, double Temperature,
			double Entropy) {
		return PT2SReg5(Pressure, Temperature) - Entropy;
	}

	static double Func_PT2VReg5(double Pressure, double Temperature,
			double Volume) {
		return PT2VReg5(Pressure, Temperature) - Volume;
	}

	static double Func_PH2SReg5(double Pressure, double Enthalpy, double Entropy) {
		return PH2SReg5(Pressure, Enthalpy) - Entropy;
	}

	static double Func_TH2SReg5(double Temperature, double Enthalpy,
			double Entropy) {
		return TH2SReg5(Temperature, Enthalpy) - Entropy;
	}

	static double Func_PH2VReg5(double Pressure, double Enthalpy, double Volume) {
		return PH2VReg5(Pressure, Enthalpy) - Volume;
	}

	static double Func_PS2VReg5(double Pressure, double Entropy, double Volume) {
		return PS2VReg5(Pressure, Entropy) - Volume;
	}

	static double ZBRENT2(double X1, double X2, double TOL, double PrmA,
			double PrmB, int Nbr) {
		double A, B, C, D, E, FA, FB, FC;
		double ZZ, TOL1, XM, S, P, Q, R, AAA, EPS;
		int ITMAX, ITER;

		ITMAX = 100;
		EPS = 0.00000003;
		A = X1;
		B = X2;
		C = 0.0;
		D = 0.0;
		E = 0.0;
		switch (Nbr) {
		case 101: {
			FA = Func_PressReg3TD(PrmA, A, PrmB);
			FB = Func_PressReg3TD(PrmA, B, PrmB);
			break;
		}
		case 102: {
			FA = Func_VolumeReg1PT(PrmA, A, PrmB);
			FB = Func_VolumeReg1PT(PrmA, B, PrmB);
			break;
		}
		case 103: {
			FA = Func_EnthalpyReg1PT(A, PrmA, PrmB);
			FB = Func_EnthalpyReg1PT(B, PrmA, PrmB);
			break;
		}
		case 104: {
			FA = Func_EntropyReg1PT(A, PrmA, PrmB);
			FB = Func_EntropyReg1PT(B, PrmA, PrmB);
			break;
		}
		case 105: {
			FA = Func_VolumeReg1PT(A, PrmA, PrmB);
			FB = Func_VolumeReg1PT(B, PrmA, PrmB);
			break;
		}
		case 106: {
			FA = Func_PH2VReg1(A, PrmA, PrmB);
			FB = Func_PH2VReg1(B, PrmA, PrmB);
			break;
		}
		case 107: {
			FA = Func_PS2VReg1(A, PrmA, PrmB);
			FB = Func_PS2VReg1(B, PrmA, PrmB);
			break;
		}
		case 108: {
			FA = Func_EnthalpyReg1PT(PrmA, A, PrmB);
			FB = Func_EnthalpyReg1PT(PrmA, B, PrmB);
			break;
		}
		case 109: {
			FA = Func_PH2Sreg1(A, PrmA, PrmB);
			FB = Func_PH2Sreg1(B, PrmA, PrmB);
			break;
		}
		case 110: {
			FA = Func_EntropyReg1PT(PrmA, A, PrmB);
			FB = Func_EntropyReg1PT(PrmA, B, PrmB);
			break;
		}
		case 201: {
			FA = Func_VolReg2PT(PrmA, A, PrmB);
			FB = Func_VolReg2PT(PrmA, B, PrmB);
			break;
		}
		case 202: {
			FA = Func_EnthalpyReg2PT(A, PrmA, PrmB);
			FB = Func_EnthalpyReg2PT(B, PrmA, PrmB);
			break;
		}
		case 203: {
			FA = Func_EntropyReg2PT(A, PrmA, PrmB);
			FB = Func_EntropyReg2PT(B, PrmA, PrmB);
			break;
		}
		case 204: {
			FA = Func_VolReg2PT(A, PrmA, PrmB);
			FB = Func_VolReg2PT(B, PrmA, PrmB);
			break;
		}
		case 205: {
			FA = Func_PV2HReg2(A, PrmA, PrmB);
			FB = Func_PV2HReg2(B, PrmA, PrmB);
			break;
		}
		case 206: {
			FA = Func_PS2VReg2(A, PrmA, PrmB);
			FB = Func_PS2VReg2(B, PrmA, PrmB);
			break;
		}
		case 207: {
			FA = Func_PV2SReg2(A, PrmA, PrmB);
			FB = Func_PV2SReg2(B, PrmA, PrmB);
			break;
		}
		case 208: {
			FA = Func_EnthalpyReg2PT(PrmA, A, PrmB);
			FB = Func_EnthalpyReg2PT(PrmA, B, PrmB);
			break;
		}
		case 209: {
			FA = Func_EntropyReg2PT(PrmA, A, PrmB);
			FB = Func_EntropyReg2PT(PrmA, B, PrmB);
			break;
		}
		case 210: {
			FA = Func_PH2Sreg2(A, PrmA, PrmB);
			FB = Func_PH2Sreg2(B, PrmA, PrmB);
			break;
		}
		case 300: {
			FA = Func_PressReg3TD(PrmA, A, PrmB);
			FB = Func_PressReg3TD(PrmA, B, PrmB);
			break;
		}
		case 301: {
			FA = Func_PT2HReg3(PrmA, A, PrmB);
			FB = Func_PT2HReg3(PrmA, B, PrmB);
			break;
		}
		case 302: {
			FA = Func_PT2SReg3(PrmA, A, PrmB);
			FB = Func_PT2SReg3(PrmA, B, PrmB);
			break;
		}
		case 303: {
			FA = Func_PressReg3TD(A, PrmA, PrmB);
			FB = Func_PressReg3TD(B, PrmA, PrmB);
			break;
		}
		case 304: {
			FA = Func_EnthalpyReg3TD(PrmA, A, PrmB);
			FB = Func_EnthalpyReg3TD(PrmA, B, PrmB);
			break;
		}
		case 305: {
			FA = Func_EntropyReg3TD(PrmA, A, PrmB);
			FB = Func_EntropyReg3TD(PrmA, B, PrmB);
			break;
		}
		case 306: {
			FA = Func_TH2SReg3(A, PrmA, PrmB);
			FB = Func_TH2SReg3(B, PrmA, PrmB);
			break;
		}
		case 307: {
			FA = Func_TH2VReg3(A, PrmA, PrmB);
			FB = Func_TH2VReg3(B, PrmA, PrmB);
			break;
		}
		case 308: {
			FA = Func_TV2SReg3(A, PrmA, PrmB);
			FB = Func_TV2SReg3(B, PrmA, PrmB);
			break;
		}
		case 309: {
			FA = Func_PV2HReg3(PrmA, A, PrmB);
			FB = Func_PV2HReg3(PrmA, B, PrmB);
			break;
		}
		case 310: {
			FA = Func_PV2SReg3(PrmA, A, PrmB);
			FB = Func_PV2SReg3(PrmA, B, PrmB);
			break;
		}
		case 400: {
			FA = Func_PV2HReg4(A, PrmA, PrmB);
			FB = Func_PV2HReg4(B, PrmA, PrmB);
			break;
		}
		case 401: {
			FA = Func_PS2VReg4(A, PrmA, PrmB);
			FB = Func_PS2VReg4(B, PrmA, PrmB);
			break;
		}
		case 402: {
			FA = Func_TX2HReg4(A, PrmA, PrmB);
			FB = Func_TX2HReg4(B, PrmA, PrmB);
			break;
		}
		case 403: {
			FA = Func_PressReg3TD(PrmA, A, PrmB);
			FB = Func_PressReg3TD(PrmA, B, PrmB);
			break;
		}
		case 404: {
			FA = Func_Maxwell(A, PrmA, PrmB);
			FB = Func_Maxwell(B, PrmA, PrmB);
			break;
		}
		case 405: {
			FA = Func_TX2VReg4(A, PrmA, PrmB);
			FB = Func_TX2VReg4(B, PrmA, PrmB);
			break;
		}
		case 406: {
			FA = Func_TX2SReg4(A, PrmA, PrmB);
			FB = Func_TX2SReg4(B, PrmA, PrmB);
			break;
		}
		case 407: {
			FA = Func_PS2HReg4(A, PrmA, PrmB);
			FB = Func_PS2HReg4(B, PrmA, PrmB);
			break;
		}
		case 501: {
			FA = Func_PT2HReg5(PrmA, A, PrmB);
			FB = Func_PT2HReg5(PrmA, B, PrmB);
			break;
		}
		case 502: {
			FA = Func_PT2SReg5(PrmA, A, PrmB);
			FB = Func_PT2SReg5(PrmA, B, PrmB);
			break;
		}
		case 503: {
			FA = Func_PT2VReg5(PrmA, A, PrmB);
			FB = Func_PT2VReg5(PrmA, B, PrmB);
			break;
		}
		case 504: {
			FA = Func_PT2HReg5(A, PrmA, PrmB);
			FB = Func_PT2HReg5(B, PrmA, PrmB);
			break;
		}
		case 505: {
			FA = Func_PT2SReg5(A, PrmA, PrmB);
			FB = Func_PT2SReg5(B, PrmA, PrmB);
			break;
		}
		case 506: {
			FA = Func_PT2VReg5(A, PrmA, PrmB);
			FB = Func_PT2VReg5(B, PrmA, PrmB);
			break;
		}
		case 507: {
			FA = Func_PH2SReg5(A, PrmA, PrmB);
			FB = Func_PH2SReg5(B, PrmA, PrmB);
			break;
		}
		case 508: {
			FA = Func_TH2SReg5(A, PrmA, PrmB);
			FB = Func_TH2SReg5(B, PrmA, PrmB);
			break;
		}
		case 509: {
			FA = Func_PH2VReg5(A, PrmA, PrmB);
			FB = Func_PH2VReg5(B, PrmA, PrmB);
			break;
		}
		case 510: {
			FA = Func_PS2VReg5(A, PrmA, PrmB);
			FB = Func_PS2VReg5(B, PrmA, PrmB);
			break;
		}
		default: {
			FA = 0;
			FB = 0;
			break;
		}
		}

		if ((FB * FA > 0.0)) {
		}
		FC = FB;
		for (ITER = 1; ITER <= ITMAX; ITER++) {
			if (FB * FC > 0) {
				C = A;
				FC = FA;
				D = B - A;
				E = D;
			}
			if (Math.abs(FC) < Math.abs(FB)) {
				A = B;
				B = C;
				C = A;
				FA = FB;
				FB = FC;
				FC = FA;
			}
			TOL1 = 2.0 * EPS * Math.abs(B) + 0.5 * TOL;
			XM = 0.5 * (C - B);
			if ((Math.abs(XM) <= TOL1) || (FB == 0)) {
				return B;
				// exit(1);
			}
			if ((Math.abs(E) >= TOL1) && (Math.abs(FA) > Math.abs(FB))) {
				S = FB / FA;
				if (A == C) {
					P = 2.0 * XM * S;
					Q = 1 - S;
				} else {
					Q = FA / FC;
					R = FB / FC;
					P = S * (2.0 * XM * Q * (Q - R) - (B - A) * (R - 1.0));
					Q = (Q - 1.0) * (R - 1.0) * (S - 1.0);
				}
				if ((P > 0.0))
					Q = -Q;
				P = Math.abs(P);
				if ((3.0 * XM * Q - Math.abs(TOL1 * Q) < Math.abs(E * Q)))
					AAA = 3.0 * XM * Q - Math.abs(TOL1 * Q);
				else
					AAA = Math.abs(E * Q);
				if (2.0 * P < AAA) {
					E = D;
					D = P / Q;
				} else {
					D = XM;
					E = D;
				}
			} else {
				D = XM;
				E = D;
			}
			A = B;
			FA = FB;
			if (Math.abs(D) > TOL1)
				B = B + D;
			else {
				if (XM >= 0)
					ZZ = 1;
				else
					ZZ = -1;
				B = B + Math.abs(TOL1) * ZZ;
			}

			switch (Nbr) {
			case 101: {
				FB = Func_PressReg3TD(PrmA, B, PrmB);
				break;
			}
			case 102: {
				FB = Func_VolumeReg1PT(PrmA, B, PrmB);
				break;
			}
			case 103: {
				FB = Func_EnthalpyReg1PT(B, PrmA, PrmB);
				break;
			}
			case 104: {
				FB = Func_EntropyReg1PT(B, PrmA, PrmB);
				break;
			}
			case 105: {
				FB = Func_VolumeReg1PT(B, PrmA, PrmB);
				break;
			}
			case 106: {
				FB = Func_PH2VReg1(B, PrmA, PrmB);
				break;
			}
			case 107: {
				FB = Func_PS2VReg1(B, PrmA, PrmB);
				break;
			}
			case 108: {
				FB = Func_EnthalpyReg1PT(PrmA, B, PrmB);
				break;
			}
			case 109: {
				FB = Func_PH2Sreg1(B, PrmA, PrmB);
				break;
			}
			case 110: {
				FB = Func_EntropyReg1PT(PrmA, B, PrmB);
				break;
			}
			case 201: {
				FB = Func_VolReg2PT(PrmA, B, PrmB);
				break;
			}
			case 202: {
				FB = Func_EnthalpyReg2PT(B, PrmA, PrmB);
				break;
			}
			case 203: {
				FB = Func_EntropyReg2PT(B, PrmA, PrmB);
				break;
			}
			case 204: {
				FB = Func_VolReg2PT(B, PrmA, PrmB);
				break;
			}
			case 205: {
				FB = Func_PV2HReg2(B, PrmA, PrmB);
				break;
			}
			case 206: {
				FB = Func_PS2VReg2(B, PrmA, PrmB);
				break;
			}
			case 207: {
				FB = Func_PV2SReg2(B, PrmA, PrmB);
				break;
			}
			case 208: {
				FB = Func_EnthalpyReg2PT(PrmA, B, PrmB);
				break;
			}
			case 209: {
				FB = Func_EntropyReg2PT(PrmA, B, PrmB);
				break;
			}
			case 210: {
				FB = Func_PH2Sreg2(B, PrmA, PrmB);
				break;
			}
			case 300: {
				FB = Func_PressReg3TD(PrmA, B, PrmB);
				break;
			}
			case 301: {
				FB = Func_PT2HReg3(PrmA, B, PrmB);
				break;
			}
			case 302: {
				FB = Func_PT2SReg3(PrmA, B, PrmB);
				break;
			}
			case 303: {
				FB = Func_PressReg3TD(B, PrmA, PrmB);
				break;
			}
			case 304: {
				FB = Func_EnthalpyReg3TD(PrmA, B, PrmB);
				break;
			}
			case 305: {
				FB = Func_EntropyReg3TD(PrmA, B, PrmB);
				break;
			}
			case 306: {
				FB = Func_TH2SReg3(B, PrmA, PrmB);
				break;
			}
			case 307: {
				FB = Func_TH2VReg3(B, PrmA, PrmB);
				break;
			}
			case 308: {
				FB = Func_TV2SReg3(B, PrmA, PrmB);
				break;
			}
			case 309: {
				FB = Func_PV2HReg3(PrmA, B, PrmB);
				break;
			}
			case 310: {
				FB = Func_PV2SReg3(PrmA, B, PrmB);
				break;
			}
			case 400: {
				FB = Func_PV2HReg4(B, PrmA, PrmB);
				break;
			}
			case 401: {
				FB = Func_PS2VReg4(B, PrmA, PrmB);
				break;
			}
			case 402: {
				FB = Func_TX2HReg4(B, PrmA, PrmB);
				break;
			}
			case 403: {
				FB = Func_PressReg3TD(PrmA, B, PrmB);
				break;
			}
			case 404: {
				FB = Func_Maxwell(B, PrmA, PrmB);
				break;
			}
			case 405: {
				FB = Func_TX2VReg4(B, PrmA, PrmB);
				break;
			}
			case 406: {
				FB = Func_TX2SReg4(B, PrmA, PrmB);
				break;
			}
			case 407: {
				FB = Func_PS2HReg4(B, PrmA, PrmB);
				break;
			}
			case 501: {
				FB = Func_PT2HReg5(PrmA, B, PrmB);
				break;
			}
			case 502: {
				FB = Func_PT2SReg5(PrmA, B, PrmB);
				break;
			}
			case 503: {
				FB = Func_PT2VReg5(PrmA, B, PrmB);
				break;
			}
			case 504: {
				FB = Func_PT2HReg5(B, PrmA, PrmB);
				break;
			}
			case 505: {
				FB = Func_PT2SReg5(B, PrmA, PrmB);
				break;
			}
			case 506: {
				FB = Func_PT2VReg5(B, PrmA, PrmB);
				break;
			}
			case 507: {
				FB = Func_PH2SReg5(B, PrmA, PrmB);
				break;
			}
			case 508: {
				FB = Func_TH2SReg5(B, PrmA, PrmB);
				break;
			}
			case 509: {
				FB = Func_PH2VReg5(B, PrmA, PrmB);
				break;
			}
			case 510: {
				FB = Func_PS2VReg5(B, PrmA, PrmB);
				break;
			}
			default: {
				break;
			}
			}

		}

		return B;
	}

	static double Func_P2HLReg4(double Pressure, double Enthalpy) {
		return P2HLReg4(Pressure) - Enthalpy;
	}

	static double Func_T2HLReg4(double Temperature, double Enthalpy) {
		return T2HLReg4(Temperature) - Enthalpy;
	}

	static double Func_P2SLReg4(double Pressure, double Entropy) {
		return P2SLReg4(Pressure) - Entropy;
	}

	static double Func_T2SLReg4(double Temperature, double Entropy) {
		return T2SLReg4(Temperature) - Entropy;
	}

	static double Func_P2VLReg4(double Pressure, double Volume) {
		return P2VLReg4(Pressure) - Volume;
	}

	static double Func_T2VLReg4(double Temperature, double Volume) {
		return T2VLReg4(Temperature) - Volume;
	}

	static double Func_P2HGReg4(double Pressure, double Enthalpy) {
		return P2HGReg4(Pressure) - Enthalpy;
	}

	static double Func_T2HGReg4(double Temperature, double Enthalpy) {
		return T2HGReg4(Temperature) - Enthalpy;
	}

	static double Func_P2SGReg4(double Pressure, double Entropy) {
		return P2SGReg4(Pressure) - Entropy;
	}

	static double Func_T2SGReg4(double Temperature, double Entropy) {
		return T2SGReg4(Temperature) - Entropy;
	}

	static double Func_P2VGReg4(double Pressure, double Volume) {
		return P2VGReg4(Pressure) - Volume;
	}

	static double Func_T2VGReg4(double Temperature, double Volume) {
		return T2VGReg4(Temperature) - Volume;
	}

	static double Func_EnthalpyB23P(double Pressure, double Enthalpy) {
		double Temperature;

		Temperature = P2TBound23(Pressure);
		return PT2HReg2(Pressure, Temperature) - Enthalpy;
	}

	static double Func_EnthalpyB23T(double Temperature, double Enthalpy) {
		double Pressure;

		Pressure = T2PBound23(Temperature);
		return PT2HReg2(Pressure, Temperature) - Enthalpy;
	}

	static double Func_VolumeB23P(double Pressure, double Volume) {
		double Temperature;

		Temperature = P2TBound23(Pressure);
		return PT2VReg2(Pressure, Temperature) - Volume;
	}

	static double Func_VolumeB23T(double Temperature, double Volume) {
		double Pressure;

		Pressure = T2PBound23(Temperature);
		return PT2VReg2(Pressure, Temperature) - Volume;
	}

	static double Func_TempSatP(double Temperature, double Pressure) {

		return T2P(Temperature) - Pressure;
	}

	static double Func_TSatP(double Temperature, double Pressure) {

		return T2P(Temperature) - Pressure;
	}

	static double ZBRENT1(double X1, double X2, double TOL, double PrmA, int Nbr) {
		double A, B, C, D, E, FA, FB, FC, ZZ;
		double TOL1, XM, S, P, Q, R, AAA;
		int ITMAX, ITER;
		double EPS;

		ITMAX = 100;
		EPS = 0.00000003;
		A = X1;
		B = X2;
		C = 0;
		D = 0;
		E = 0;
		FA = 0.0;
		FB = 0.0;
		switch (Nbr) {
		case 131: {
			FA = Func_P2HLReg4(A, PrmA);
			FB = Func_P2HLReg4(B, PrmA);
			break;
		}
		case 132: {
			FA = Func_T2HLReg4(A, PrmA);
			FB = Func_T2HLReg4(B, PrmA);
			break;
		}
		case 133: {
			FA = Func_P2SLReg4(A, PrmA);
			FB = Func_P2SLReg4(B, PrmA);
			break;
		}
		case 134: {
			FA = Func_T2SLReg4(A, PrmA);
			FB = Func_T2SLReg4(B, PrmA);
			break;
		}
		case 135: {
			FA = Func_P2VLReg4(A, PrmA);
			FB = Func_P2VLReg4(B, PrmA);
			break;
		}
		case 136: {
			FA = Func_T2VLReg4(A, PrmA);
			FB = Func_T2VLReg4(B, PrmA);
			break;
		}
		case 231: {
			FA = Func_P2HGReg4(A, PrmA);
			FB = Func_P2HGReg4(B, PrmA);
			break;
		}
		case 232: {
			FA = Func_T2HGReg4(A, PrmA);
			FB = Func_T2HGReg4(B, PrmA);
			break;
		}
		case 233: {
			FA = Func_P2SGReg4(A, PrmA);
			FB = Func_P2SGReg4(B, PrmA);
			break;
		}
		case 234: {
			FA = Func_T2SGReg4(A, PrmA);
			FB = Func_T2SGReg4(B, PrmA);
			break;
		}
		case 235: {
			FA = Func_P2VGReg4(A, PrmA);
			FB = Func_P2VGReg4(B, PrmA);
			break;
		}
		case 236: {
			FA = Func_T2VGReg4(A, PrmA);
			FB = Func_T2VGReg4(B, PrmA);
			break;
		}
		case 321: {
			FA = Func_EnthalpyB23P(A, PrmA);
			FB = Func_EnthalpyB23P(B, PrmA);
			break;
		}
		case 322: {
			FA = Func_EnthalpyB23T(A, PrmA);
			FB = Func_EnthalpyB23T(B, PrmA);
			break;
		}
		case 323: {
			break;
		}
		case 324: {
			break;
		}
		case 325: {

			FA = Func_VolumeB23P(A, PrmA);
			FB = Func_VolumeB23P(B, PrmA);
			break;

		}
		case 326: {

			FA = Func_VolumeB23T(A, PrmA);
			FB = Func_VolumeB23T(B, PrmA);
			break;
		}
		case 400: {

			FA = Func_TempSatP(A, PrmA);
			FB = Func_TempSatP(B, PrmA);
			break;
		}
		case 401: {

			FA = Func_TSatP(A, PrmA);
			FB = Func_TSatP(B, PrmA);
			break;
		}
		default: {
			FA = 0.0;
			FB = 0.0;
			break;
		}
		}

		if (FB * FA > 0.0) {
		}
		FC = FB;
		for (ITER = 1; ITER <= ITMAX; ITER++) {
			if (FB * FC > 0) {
				C = A;
				FC = FA;
				D = B - A;
				E = D;
			}
			if (Math.abs(FC) < Math.abs(FB)) {
				A = B;
				B = C;
				C = A;
				FA = FB;
				FB = FC;
				FC = FA;
			}
			TOL1 = 2.0 * EPS * Math.abs(B) + 0.5 * TOL;
			XM = 0.5 * (C - B);
			if ((Math.abs(XM) <= TOL1) || (FB == 0)) {
				return B;
				// exit(1);
			}
			if ((Math.abs(E) >= TOL1) && (Math.abs(FA) > Math.abs(FB))) {
				S = FB / FA;
				if (A == C) {
					P = 2.0 * XM * S;
					Q = 1 - S;
				} else {
					Q = FA / FC;
					R = FB / FC;
					P = S * (2.0 * XM * Q * (Q - R) - (B - A) * (R - 1.0));
					Q = (Q - 1.0) * (R - 1.0) * (S - 1.0);
				}
				if (P > 0.0)
					Q = -Q;
				P = Math.abs(P);
				if (3.0 * XM * Q - Math.abs(TOL1 * Q) < Math.abs(E * Q))
					AAA = 3.0 * XM * Q - Math.abs(TOL1 * Q);
				else
					AAA = Math.abs(E * Q);
				if (2.0 * P < AAA) {
					E = D;
					D = P / Q;
				} else {
					D = XM;
					E = D;
				}
			} else {
				D = XM;
				E = D;
			}
			A = B;
			FA = FB;
			if (Math.abs(D) > TOL1)
				B = B + D;
			else {
				if (XM >= 0)
					ZZ = 1;
				else
					ZZ = -1;
				B = B + Math.abs(TOL1) * ZZ;
			}

			switch (Nbr) {
			case 131: {
				FB = Func_P2HLReg4(B, PrmA);
				break;
			}
			case 132: {
				FB = Func_T2HLReg4(B, PrmA);
				break;
			}
			case 133: {
				FB = Func_P2SLReg4(B, PrmA);
				break;
			}
			case 134: {
				FB = Func_T2SLReg4(B, PrmA);
				break;
			}
			case 135: {
				FB = Func_P2VLReg4(B, PrmA);
				break;
			}
			case 136: {
				FB = Func_T2VLReg4(B, PrmA);
				break;
			}
			case 231: {
				FB = Func_P2HGReg4(B, PrmA);
				break;
			}
			case 232: {
				FB = Func_T2HGReg4(B, PrmA);
				break;
			}
			case 233: {
				FB = Func_P2SGReg4(B, PrmA);
				break;
			}
			case 234: {
				FB = Func_T2SGReg4(B, PrmA);
				break;
			}
			case 235: {
				FB = Func_P2VGReg4(B, PrmA);
				break;
			}
			case 236: {
				FB = Func_T2VGReg4(B, PrmA);
				break;
			}
			case 321: {
				FB = Func_EnthalpyB23P(B, PrmA);
				break;
			}
			case 322: {
				FB = Func_EnthalpyB23T(B, PrmA);
				break;
			}
			case 323: {
				break;
			}
			case 324: {
				break;
			}
			case 325: {
				FB = Func_VolumeB23P(B, PrmA);
				break;
			}
			case 326: {
				FB = Func_VolumeB23T(B, PrmA);
				break;
			}
			case 400: {
				FB = Func_TempSatP(B, PrmA);
				break;
			}
			case 401: {
				FB = Func_TSatP(B, PrmA);
				break;
			}
			default: {
				break;
			}
			}
		}
		return B;
	}

	static void SubRangeSatLiqByT(double Temperature, HInteger SubRange) {
		if ((Temperature >= T000C - DeltaVal) && (Temperature <= T350C))
			SubRange.i = (1);
		else if ((Temperature > T350C) && (Temperature <= Tc_Water + DeltaVal))
			SubRange.i = (3);
		else
			SubRange.i = (0);
	}

	static void SubRangeSatVapByT(double Temperature, HInteger SubRange) {
		if ((Temperature >= T000C - DeltaVal) && (Temperature <= T350C))
			SubRange.i = (2);
		else if ((Temperature > T350C) && (Temperature <= Tc_Water + DeltaVal))
			SubRange.i = (3);
		else
			SubRange.i = (0);

	}

	static void SubRangeByT(double Temperature, HInteger SubRange) {
		if ((Temperature >= T000C - DeltaVal)
				&& (Temperature <= Tc_Water + DeltaVal))
			SubRange.i = (4);
		else
			SubRange.i = (0);

	}

	static void SubRangeSatLiqByP(double Pressure, HInteger SubRange) {
		if ((Pressure >= 611.213 / 100000.0 - DeltaVal)
				&& (Pressure <= 165.291643))
			SubRange.i = (1); // 2
		else if ((Pressure > 165.291643) && (Pressure <= Pc_Water + DeltaVal))
			SubRange.i = (3);
		else
			SubRange.i = (0);

	}

	static void SubRangeSatVapByP(double Pressure, HInteger SubRange) {
		if ((Pressure >= 611.213 / 100000.0 - DeltaVal)
				&& (Pressure <= 165.291643))
			SubRange.i = (2);
		else if ((Pressure > 165.291643) && (Pressure <= Pc_Water + DeltaVal))
			SubRange.i = (3);
		else
			SubRange.i = (0);

	}

	static void SubRangeByP(double Pressure, HInteger SubRange) {
		if ((Pressure >= 611.213 / 100000.0 - DeltaVal)
				&& (Pressure <= Pc_Water + DeltaVal))
			SubRange.i = (4);
		else
			SubRange.i = (0);

	}

	static void SubRange2abcByPH(double Pressure, double Enthalpy,
			HInteger SubRange) {
		double EnthalpyB2bc;

		SubRange.i = (0);
		if ((Pressure <= 0 - DeltaVal) || (Pressure > 1000.0 + DeltaVal))
			return;
		// exit(1);

		if (Pressure <= 40.0) {
			SubRange.i = (1);
			return;
			// exit(1);
		}

		if (Pressure <= 65.467) {
			SubRange.i = (2);
			return;
			// exit(1);
		}

		EnthalpyB2bc = P2HBound2bc(Pressure);
		if (Enthalpy > EnthalpyB2bc)
			SubRange.i = (2);
		else
			SubRange.i = (3);
	}

	static void SubRange2abcByHS(double Enthalpy, double Entropy,
			HInteger SubRange) {
		double EnthalpyB2ab_s;

		EnthalpyB2ab_s = S2HBound2ab_s(Entropy);
		if (Enthalpy <= EnthalpyB2ab_s) {
			SubRange.i = (1);
			return;
			// exit(1);
		}

		if (Entropy > 5.85)
			SubRange.i = (2);
		else
			SubRange.i = (3);
	}

	static void SubRange3abcdefgByPT(double Pressure, double Temperature,
			HInteger SubRange) {
		double T3be3cf;

		if (Pressure >= 400) {
			SubRange.i = (7);
			return;
			// exit(1);
		} else if (Pressure >= 240) {
			T3be3cf = (Pressure / 10 - 22.064) / 0.268248402 + 647.096;
			if (Temperature < T3be3cf) {
				SubRange.i = (5);
				return;
				// exit(1);
			} else {
				SubRange.i = (6);
				return;
				// exit(1);
			}
		} else if (Pressure > Pc_Water) {
			if (Temperature <= Tc_Water) {
				SubRange.i = (1);
				return;
				// exit(1);
			} else {
				T3be3cf = (Pressure / 10 - 22.064) / 0.268248402 + 647.096;
				if (Temperature < T3be3cf) {
					SubRange.i = (2);
					return;
					// exit(1);
				} else {
					SubRange.i = (3);
					return;
					// exit(1);
				}
			}
		} else {
			if (Temperature > P2T(Pressure)) {
				SubRange.i = (4);
				return;
				// exit(1);
			} else {
				SubRange.i = (1);
				return;
				// exit(1);
			}
		}
	}

	static void SubRangeByPT(double Pressure, double Temperature,
			HInteger SubRange) {

		SubRange.i = (0);

		if ((Temperature < T000C - DeltaVal) || (Pressure <= 0 - DeltaVal)
				|| (Pressure > 1000.0 + DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return;
		// exit(1);
		if ((Temperature > 1073.15 + DeltaVal) && (Pressure > 100.0 + DeltaVal))
			return;
		// exit(1);
		if ((Temperature > 1073.15 + DeltaVal)
				&& (Temperature <= 2273.15 + DeltaVal)
				&& (Pressure >= 0 - DeltaVal) && (Pressure <= 100.0 + DeltaVal)) {
			SubRange.i = (5);
			return;
			// exit(1);
		}

		if ((Temperature <= Tc_Water + DeltaVal)) {
			if (Math.abs(1 - T2P(Temperature) / Pressure) < 0.0005) {
				SubRange.i = (4);
				return;
				// exit(1);
			}
			if ((Temperature >= T000C - DeltaVal) && (Temperature <= T350C)
					&& (Pressure >= T2P(Temperature) - DeltaVal)
					&& (Pressure <= 1000.0))
				SubRange.i = (1);
			else if ((Temperature >= T000C) && (Temperature <= T350C)
					&& (Pressure > 0) && (Pressure <= T2P(Temperature)))
				SubRange.i = (2);
			else if ((Temperature >= T350C) && (Pressure > 0)
					&& (Pressure <= T2PBound23(Temperature)))
				SubRange.i = (2);
			else if ((Temperature >= T350C)
					&& (Pressure >= T2PBound23(Temperature))
					&& (Pressure <= 1000.0))
				SubRange.i = (3);
		} else {
			if ((Temperature >= Tc_Water) && (Temperature <= 863.15)
					&& (Pressure > 0) && (Pressure <= T2PBound23(Temperature)))
				SubRange.i = (2);
			else if ((Temperature >= 863.15)
					&& (Temperature <= 1073.15 + DeltaVal)
					&& (Pressure > 0 - DeltaVal)
					&& (Pressure <= 1000.0 + DeltaVal))
				SubRange.i = (2);
			else if ((Temperature >= Tc_Water)
					&& (Temperature <= P2TBound23(Pressure))
					&& (Pressure >= T2PBound23(Temperature))
					&& (Pressure <= 1000.0))
				SubRange.i = (3);
		}
	}

	static void SubRangeByPH(double Pressure, double Enthalpy, HInteger SubRange) {

		SubRange.i = (0);

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return;
		// exit(1);

		if ((Enthalpy < -0.041587826 - DeltaVal)
				|| (Enthalpy > 7376.980281 + DeltaVal))
			return;
		// exit(1);

		if (Pressure >= Pc_Water) {
			if (Enthalpy > PT2HReg2(Pressure, 1073.15))
				return;
			// exit(1);
			if (Enthalpy < PT2HReg1(Pressure, T000C))
				return;
			// exit(1);
			if (Enthalpy <= PT2HReg1(Pressure, T350C))
				SubRange.i = (1);
			else if (Enthalpy >= PT2HReg2(Pressure, P2TBound23(Pressure)))
				SubRange.i = (2);
			else
				SubRange.i = (3);
		} else if (Pressure > 165.291643) {
			if (Enthalpy > PT2HReg2(Pressure, 1073.15))
				return;
			// exit(1);
			if (Enthalpy < PT2HReg1(Pressure, T000C))
				return;
			// exit(1);
			if (Enthalpy <= PT2HReg1(Pressure, T350C))
				SubRange.i = (1);
			else if (Enthalpy >= PT2HReg2(Pressure, P2TBound23(Pressure)))
				SubRange.i = (2);
			else if ((Enthalpy >= P2HGReg43(Pressure))
					|| (Enthalpy <= P2HLReg43(Pressure)))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Pressure > 100) {
			if (Enthalpy > PT2HReg2(Pressure, 1073.15))
				return;
			// exit(1);
			if (Enthalpy < PT2HReg1(Pressure, T000C))
				return;
			// exit(1);

			if (Enthalpy >= P2HGReg42(Pressure))
				SubRange.i = (2);
			else if (Enthalpy < P2HLReg41(Pressure))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else {
			if (Enthalpy > PT2HReg5(Pressure, 2273.15))
				return;
			// exit(1);
			if (Enthalpy < PT2HReg1(Pressure, T000C))
				return;
			// exit(1);

			if (Enthalpy >= PT2HReg2(Pressure, 1073.15) * (1 + DeltaVal))
				SubRange.i = (5);
			else if (Enthalpy >= P2HGReg42(Pressure))
				SubRange.i = (2);
			else if (Enthalpy < P2HLReg41(Pressure))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		}
	}

	static void SubRangeByPS(double Pressure, double Entropy, HInteger SubRange) {
		double Smin;

		SubRange.i = (0);

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return;
		// exit(1);

		if ((Entropy < -0.008582287 - DeltaVal)
				|| (Entropy > 13.9049558469 + DeltaVal))
			return;
		// exit(1);

		if (Pressure >= Pc_Water + DeltaVal) {
			if (Entropy > PT2SReg2(Pressure, 1073.15) * (1 + DeltaVal))
				return;
			// exit(1);
			Smin = PT2SReg1(Pressure, T000C);
			if (Smin < 0) {
				if (Entropy < Smin * (1 + DeltaVal))
					return;
				// exit(1);
			} else if (Entropy < Smin * (1 - DeltaVal))
				return;
			// exit(1);
			if (Entropy <= PT2SReg1(Pressure, T350C) * (1 + DeltaVal))
				SubRange.i = (1);
			else if (Entropy >= PT2SReg2(Pressure, P2TBound23(Pressure)
					* (1 - DeltaVal)))
				SubRange.i = (2);
			else
				SubRange.i = (3);
		} else if (Pressure > 165.291643 + DeltaVal) {
			if (Entropy > PT2SReg2(Pressure, 1073.15) * (1 + DeltaVal))
				return;
			// exit(1);
			Smin = PT2SReg1(Pressure, T000C);
			if (Smin < 0) {
				if (Entropy < Smin * (1 + DeltaVal))
					return;
				// exit(1);
			} else if (Entropy < Smin * (1 - DeltaVal))
				return;
			// exit(1);
			if (Entropy <= PT2SReg1(Pressure, T350C) * (1 + DeltaVal))
				SubRange.i = (1);
			else if (Entropy >= PT2SReg2(Pressure, P2TBound23(Pressure)
					* (1 - DeltaVal)))
				SubRange.i = (2);
			else if ((Entropy >= P2SGReg43(Pressure) * (1 + DeltaVal))
					|| (Entropy <= P2SLReg43(Pressure) * (1 - DeltaVal)))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Pressure > 100 + DeltaVal) {
			if (Entropy > PT2SReg2(Pressure, 1073.15) * (1 + DeltaVal))
				return;
			// exit(1);
			Smin = PT2SReg1(Pressure, T000C);
			if (Smin < 0) {
				if (Entropy < Smin * (1 + DeltaVal))
					return;
				// exit(1);
			} else if (Entropy < Smin * (1 - DeltaVal))
				return;
			// exit(1);

			if (Entropy >= P2SGReg42(Pressure) * (1 + DeltaVal))
				SubRange.i = (2);
			else if (Entropy < P2SLReg41(Pressure) * (1 - DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else {
			if (Entropy > PT2SReg5(Pressure, 2273.15) * (1 + DeltaVal))
				return;
			// exit(1);
			Smin = PT2SReg1(Pressure, T000C);
			if (Smin < 0) {
				if (Entropy < Smin * (1 + DeltaVal))
					return;
				// exit(1);
			} else if (Entropy < Smin * (1 - DeltaVal))
				return;
			// exit(1);

			if (Entropy >= PT2SReg2(Pressure, 1073.15) * (1 + DeltaVal))
				SubRange.i = (5);
			else if (Entropy >= P2SGReg42(Pressure) * (1 + DeltaVal))
				SubRange.i = (2);
			else if (Entropy < P2SLReg41(Pressure) * (1 - DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		}
	}

	static void SubRangeByPV(double Pressure, double Volume, HInteger SubRange) {

		SubRange.i = (0);

		if ((Pressure < 0.00611213 - DeltaVal) || (Pressure > 1000 + DeltaVal))
			return;
		// exit(1);

		if ((Volume < 0.0009566869 - DeltaVal)
				|| (Volume > 1716.4525456279 + DeltaVal))
			return;
		// exit(1);

		if (Pressure >= Pc_Water + DeltaVal) {
			if (Volume > PT2VReg2(Pressure, 1073.15) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg1(Pressure, T000C) - DeltaVal)
				return;
			// exit(1);
			if (Volume <= PT2VReg1(Pressure, T350C) + DeltaVal)
				SubRange.i = (1);
			else if (Volume >= PT2VReg2(Pressure, P2TBound23(Pressure))
					- DeltaVal)
				SubRange.i = (2);
			else
				SubRange.i = (3);
		} else if (Pressure > 165.291643) {
			if (Volume > PT2VReg2(Pressure, 1073.15) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg1(Pressure, T000C) - DeltaVal)
				return;
			// exit(1);
			if (Volume <= PT2VReg1(Pressure, T350C) + DeltaVal)
				SubRange.i = (1);
			else if (Volume >= PT2VReg2(Pressure, P2TBound23(Pressure))
					- DeltaVal)
				SubRange.i = (2);
			else if ((Volume >= P2VGReg43(Pressure) - DeltaVal)
					|| (Volume <= P2VLReg43(Pressure) + DeltaVal))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Pressure > 100) {
			if (Volume > PT2VReg2(Pressure, 1073.15) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg1(Pressure, T000C) - DeltaVal)
				return;
			// exit(1);

			if (Volume >= P2VGReg42(Pressure) - DeltaVal)
				SubRange.i = (2);
			else if (Volume < P2VLReg41(Pressure) + DeltaVal)
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else {
			if (Volume > PT2VReg5(Pressure, 2273.15) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg1(Pressure, T000C) - DeltaVal)
				return;
			// exit(1);

			if (Volume >= PT2VReg2(Pressure, 1073.15) + DeltaVal)
				SubRange.i = (5);
			else if (Volume >= P2VGReg42(Pressure) - DeltaVal)
				SubRange.i = (2);
			else if (Volume < P2VLReg41(Pressure) + DeltaVal)
				SubRange.i = (1);
			else
				SubRange.i = (4);
		}
	}

	static void SubRangeByPX(double P, double X, HInteger SubRange) {

		SubRange.i = (0);
		if ((P > Pc_Water + DeltaVal) || (P < 0.00611213 - DeltaVal))
			return;
		// exit(1) ;
		if ((X < 0.0 - DeltaVal) || (X > 1.0 + DeltaVal))
			return;
		// exit(1) ;
		SubRange.i = (4);
	}

	static void SubRangeByTH(double Temperature, double Enthalpy,
			HInteger SubRange, HBoolean B14) {
		double H_MinSat, H_MinP100, H_Min;

		SubRange.i = (0);

		B14.b = false;

		if ((Temperature < T000C - DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return;
		// exit(1) ;

		if ((Enthalpy < -0.041587826 - DeltaVal)
				|| (Enthalpy > 7376.980281 + DeltaVal))
			return;
		// exit(1) ;

		if (Temperature > 1073.15 + DeltaVal) {
			if (Enthalpy > PT2HReg5(0.00611213, Temperature) * (1 + DeltaVal))
				return;
			// exit(1) ;
			if (Enthalpy < PT2HReg5(100, Temperature) * (1 - DeltaVal))
				return;
			// exit(1) ;
			SubRange.i = (5);
		} else if (Temperature >= 863.15 - DeltaVal) {
			if (Enthalpy > PT2HReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1) ;
			if (Enthalpy < PT2HReg2(1000, Temperature) * (1 - DeltaVal))
				return;
			// exit(1) ;
			SubRange.i = (2);
		} else if (Temperature >= Tc_Water - DeltaVal) {
			if (Enthalpy > PT2HReg2(0.00611213, Temperature) * (1 + DeltaVal))
				return;
			// exit(1) ;
			if (Enthalpy < PT2HReg3(1000, Temperature) * (1 - DeltaVal))
				return;
			// exit(1) ;
			if (Enthalpy <= PT2HReg2(T2PBound23(Temperature), Temperature)
					* (1 - DeltaVal))
				SubRange.i = (3);
			else
				SubRange.i = (2);
		} else if (Temperature > T350C + DeltaVal) {

			if (Enthalpy > PT2HReg2(0.00611213, Temperature) * (1 + DeltaVal))
				return;
			// exit(1) ;
			if (Enthalpy < PT2HReg3(1000, Temperature) * (1 - DeltaVal))
				return;
			// exit(1) ;

			if (Enthalpy >= PT2HReg2(T2PBound23(Temperature), Temperature)
					* (1 - DeltaVal))
				SubRange.i = (2);
			else if (Enthalpy >= T2HGReg43(Temperature) * (1 + DeltaVal))
				SubRange.i = (3);
			else if (Enthalpy < T2HLReg43(Temperature) * (1 - DeltaVal))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Temperature >= (T350C - 10) + DeltaVal) {

			if (Enthalpy > PT2HReg2(0.00611213, Temperature) * (1 + DeltaVal))
				return;
			// exit(1) ;
			if (Enthalpy < PT2HReg1(1000, Temperature) * (1 - DeltaVal))
				return;
			// exit(1) ;

			if (Enthalpy >= T2HGReg42(Temperature) * (1 + DeltaVal))
				SubRange.i = (2);
			else if (Enthalpy < T2HLReg41(Temperature) * (1 - DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else if (Temperature > (247 + 273.15) + DeltaVal) {

			if (Enthalpy > PT2HReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1) ;
			if (Enthalpy >= T2HGReg42(Temperature) * (1 + DeltaVal)) {
				SubRange.i = (2);
				return;
			}

			H_Min = HMinTReg1(Temperature);
			if (Enthalpy < H_Min * (1 - 10 * DeltaVal))
				return;
			// exit(1) ;

			H_MinSat = T2HLReg41(Temperature);
			H_MinP100 = PT2HReg1(1000, Temperature);

			if ((H_MinP100 > H_MinSat)) {
				if ((Enthalpy > H_MinP100)) {
					SubRange.i = (4);
				} else if ((Enthalpy > H_MinSat)) {

					SubRange.i = (4);
					B14.b = true;
				} else {
					SubRange.i = (1);
				}
			} else {
				if ((Enthalpy > H_MinSat)) {
					SubRange.i = (4);
				} else if ((Enthalpy > H_MinP100)) {

					SubRange.i = (1);
				} else {

					SubRange.i = (1);
				}
			}
		} else {

			if (Enthalpy > PT2HReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1) ;
			if (Enthalpy >= T2HGReg42(Temperature) * (1 + DeltaVal)) {
				SubRange.i = (2);
				return;
				// exit(1);
			}

			H_MinSat = T2HLReg41(Temperature);
			H_Min = H_MinSat;
			if (Enthalpy < H_Min * (1 - 10 * DeltaVal))
				return;
			// exit(1) ;
			H_MinP100 = PT2HReg1(1000, Temperature);

			if ((Enthalpy < H_MinP100 * (1 + DeltaVal))) {

				SubRange.i = (4);
				B14.b = true;
			} else {

				SubRange.i = (4);
			}
		}
	}

	// /////////////////////////////////////////05.4.22
	static void SubRangeByTS(double Temperature, double Entropy,
			HInteger SubRange) {
		double SMax;
		SubRange.i = (0);

		if ((Temperature < T000C - DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return;
		// exit(1);

		if ((Entropy < -0.008582287 - DeltaVal)
				|| (Entropy > 13.9049558469 + DeltaVal))
			return;
		// exit(1);

		if (Temperature > 1073.15 + DeltaVal) {
			if (Entropy > PT2SReg5(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Entropy < PT2SReg5(100, Temperature) - DeltaVal)
				return;
			// exit(1);

			SubRange.i = (5);
		} else if (Temperature >= 863.15 - DeltaVal) {
			if (Entropy > PT2SReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Entropy < PT2SReg2(1000, Temperature) - DeltaVal)
				return;
			// exit(1);
			SubRange.i = (2);
		} else if (Temperature >= Tc_Water + DeltaVal) {
			if (Entropy > PT2SReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Entropy < PT2SReg3(1000, Temperature) - DeltaVal)
				return;
			// exit(1);
			if (Entropy <= PT2SReg2(T2PBound23(Temperature), Temperature))
				SubRange.i = (3);
			else
				SubRange.i = (2);
		} else if (Temperature > T350C + DeltaVal) {
			if (Entropy > PT2SReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Entropy < PT2SReg3(1000, Temperature) - DeltaVal)
				return;
			// exit(1);

			if (Entropy >= PT2SReg2(T2PBound23(Temperature), Temperature)
					- DeltaVal)
				SubRange.i = (2);
			else if (Entropy >= T2SGReg43(Temperature) + DeltaVal)
				SubRange.i = (3);
			else if (Entropy < T2SLReg43(Temperature) - DeltaVal)
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else {
			if (Entropy > PT2SReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Entropy < PT2SReg1(1000, Temperature) - DeltaVal)
				return;
			// exit(1);

			if (Temperature > 273.15 + 5) {
				if (Entropy >= T2SGReg42(Temperature) - DeltaVal)
					SubRange.i = 2;
				else if (Entropy < T2SLReg41(Temperature) + DeltaVal)
					SubRange.i = 1;
				else
					SubRange.i = (4);
			} else {
				SMax = PT2SReg1(PSMaxTReg1(Temperature), Temperature);
				if (Entropy >= T2SGReg42(Temperature) - DeltaVal)
					SubRange.i = (2);
				else if (Entropy < SMax + DeltaVal)
					SubRange.i = 1;
				else
					SubRange.i = (4);
			}

		}
	}

	static void SubRangeByTV(double Temperature, double Volume,
			HInteger SubRange) {

		SubRange.i = (0);

		if ((Temperature < T000C - DeltaVal)
				|| (Temperature > 2273.15 + DeltaVal))
			return;
		// exit(1);

		if ((Volume < 0.0009566869 - DeltaVal)
				|| (Volume > 1716.4525456279 + DeltaVal))
			return;
		// exit(1);

		if (Temperature >= 1073.15 + DeltaVal) {
			if (Volume > PT2VReg5(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg5(100, Temperature) - DeltaVal)
				return;
			// exit(1);

			SubRange.i = (5);
		} else if (Temperature >= 863.15 - DeltaVal) {
			if (Volume > PT2VReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg2(1000, Temperature) - DeltaVal)
				return;
			// exit(1);

			SubRange.i = (2);
		} else if (Temperature >= Tc_Water + DeltaVal) {
			if (Volume > PT2VReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg3(1000, Temperature) - DeltaVal)
				return;
			// exit(1);
			if (Volume <= PT2VReg2(T2PBound23(Temperature), Temperature)
					- DeltaVal)
				SubRange.i = (3);
			else
				SubRange.i = (2);
		} else if (Temperature > T350C + DeltaVal) {
			if (Volume > PT2VReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg3(1000, Temperature) - DeltaVal)
				return;
			// exit(1);

			if (Volume >= PT2VReg2(T2PBound23(Temperature), Temperature)
					- DeltaVal)
				SubRange.i = (2);
			else if (Volume >= T2VGReg43(Temperature) - DeltaVal)
				SubRange.i = (3);
			else if (Volume < T2VLReg43(Temperature) + DeltaVal)
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else {
			if (Volume > PT2VReg2(0.00611213, Temperature) + DeltaVal)
				return;
			// exit(1);
			if (Volume < PT2VReg1(1000, Temperature) - DeltaVal)
				return;
			// exit(1);

			if (Volume >= T2VGReg42(Temperature) - DeltaVal)
				SubRange.i = (2);
			else if (Volume < T2VLReg41(Temperature) + DeltaVal)
				SubRange.i = (1);
			else
				SubRange.i = (4);
		}
	}

	static void SubRangeByTX(double T, double X, HInteger SubRange) {
		SubRange.i = (0);

		if ((T < T000C - DeltaVal) || (T > Tc_Water + DeltaVal))
			return;
		// exit(1) ;
		if ((X < 0.0 - DeltaVal) || (X > 1.0 + DeltaVal))
			return;
		// exit(1) ;
		SubRange.i = (4);
	}

	static void SUBRANGEBYHL(double HL, HInteger SubRange) {
		SubRange.i = (0);

		if ((HL < -0.04 - DeltaVal) || (HL > Hc_Water + DeltaVal))
			return;
		// exit(1);
		SubRange.i = (4);
	}

	static void SubRangeByHS(double Enthalpy, double Entropy, HInteger SubRange) {
		double SH, SM, SL;

		SubRange.i = (0);

		if ((Enthalpy < -0.041587826 - DeltaVal)
				|| (Enthalpy > 7376.980281 * (1 + DeltaVal)))
			return;
		// exit(1);

		if ((Entropy < -0.008582287 - DeltaVal)
				|| (Entropy > 13.9049558469 * (1 + DeltaVal)))
			return;
		// exit(1);

		if (Entropy > PT2SReg2(0.00611213, 1073.15) * (1 + DeltaVal)) {
			if (Enthalpy < PS2HReg5(0.00611213, Entropy) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > TS2HReg5(2273.15, Entropy) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			SubRange.i = (5);
		} else if (Entropy > PT2SReg5(100, 2273.15) * (1 + DeltaVal)) {
			if (Enthalpy < PS2HReg2(0.00611213, Entropy) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > TS2HReg5(2273.15, Entropy) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			if (Enthalpy > TS2HReg2(1073.15, Entropy) * (1 + DeltaVal))
				SubRange.i = (5);
			else
				SubRange.i = (2);
		} else if (Entropy > P2SGReg42(0.00611213) * (1 - DeltaVal)) {
			if (Enthalpy < PS2HReg2(0.00611213, Entropy) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > PS2HReg5(100, Entropy) * (1 + 100 * DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > TS2HReg2(1073.15, Entropy) * (1 + DeltaVal))
				SubRange.i = (5);
			else
				SubRange.i = (2);
		} else if (Entropy >= PT2SReg2(100, 1073.15) * (1 + DeltaVal)) {
			if (Enthalpy < PS2HReg4(0.00611213, Entropy) * (1 - DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > PS2HReg5(100, Entropy) * (1 + DeltaVal))
				return;
			// exit(1);

			if (Enthalpy > TS2HReg2(1073.15, Entropy) * (1 + DeltaVal))
				SubRange.i = (5);
			else if (Enthalpy > SG2HGReg2(Entropy) * (1 - DeltaVal))
				SubRange.i = (2);
			else
				SubRange.i = (4);
		} else if (Entropy >= PT2SReg2(1000, 1073.15) * (1 + DeltaVal)) {
			if (Enthalpy < PS2HReg4(0.00611213, Entropy) * (1 - DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > TS2HReg2(1073.15, Entropy) * (1 + DeltaVal))
				return;
			// exit(1);

			if (Enthalpy > SG2HGReg2(Entropy) * (1 - DeltaVal))
				SubRange.i = (2);
			else
				SubRange.i = (4);
		} else if (Entropy >= Sc_Water) {
			if (Enthalpy < PS2HReg4(0.00611213, Entropy) * (1 - DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > PT2HReg2(1000, 1073.15) * (1 + DeltaVal))
				return;
			// exit(1);

			if (Enthalpy <= SG2HGReg4(Entropy) * (1 - DeltaVal))
				SubRange.i = (4);
			else {

				if (Enthalpy <= PS2HReg3(1000, Sc_Water) * (1 - DeltaVal))
					SubRange.i = (3);
				else if (Enthalpy <= T2HGReg42(T350C) * (1 - DeltaVal)) {
					if (Entropy < PH2SReg3(1000, Enthalpy) - 100 * DeltaVal)
						return;
					// exit(1);

					SubRange.i = (3);
				} else if (Enthalpy <= PT2HReg2(T2PBound23(863.15), 863.15)
						* (1 - DeltaVal)) {
					if (Entropy < PH2SReg3(1000, Enthalpy)
							* (1 - 10 * DeltaVal))
						return;
					// exit(1);

					if ((Enthalpy <= 2605.53447593)
							|| (Enthalpy >= 2626.27511698)) {
						if (Entropy >= H2SBound23(Enthalpy)
								* (1 - 10 * DeltaVal))
							SubRange.i = 2;
						else
							SubRange.i = (3);
					} else {
						SH = H2SHPBound23(Enthalpy);
						SM = H2SMPBound23(Enthalpy);
						SL = H2SLPBound23(Enthalpy);

						if ((Entropy >= SH * (1 - 10 * DeltaVal))
								&& (Entropy <= SM * (1 - 10 * DeltaVal))
								|| (Entropy >= SL * (1 - 10 * DeltaVal)))
							SubRange.i = (2);
						else
							SubRange.i = (3);
					}
				} else {
					if (Entropy < PH2SReg2(1000, Enthalpy)
							* (1 - 10 * DeltaVal))
						return;
					// exit(1);

					SubRange.i = (2);
				}
			}
		} else if (Entropy >= T2SLReg41(T350C) + DeltaVal) {
			if (Enthalpy < PS2HReg4(0.00611213, Entropy) * (1 - DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > PS2HReg3(1000, Entropy) * (1 + DeltaVal))
				return;
			// exit(1);

			if (Enthalpy > SL2HLReg3(Entropy) * (1 + DeltaVal))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Entropy >= PT2SReg1(1000, T350C) + DeltaVal) {
			if (Enthalpy < PS2HReg4(0.00611213, Entropy) * (1 - DeltaVal))
				return;
			// exit(1);
			if (Enthalpy > PS2HReg3(1000, Entropy) * (1 + DeltaVal))
				return;
			// exit(1);

			if (Enthalpy > TS2HReg1(T350C, Entropy) * (1 + DeltaVal))
				SubRange.i = (3);
			else if (Enthalpy > SL2HLReg1(Entropy) * (1 - DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else {
			if (Enthalpy < PS2HReg4(0.00611213, Entropy) - 10 * DeltaVal)
				return;
			// exit(1);
			if (Enthalpy > PS2HReg1(1000, Entropy) + 10 * DeltaVal)
				return;
			// exit(1);

			if (Enthalpy > SL2HLReg1(Entropy) * (1 - 1000 * DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		}
	}

	static void SubRangeByHV(double Enthalpy, double Volume, HInteger SubRange) {

		SubRange.i = (0);
		if ((Enthalpy < -0.041587826 - DeltaVal)
				|| (Enthalpy > 7376.980281 + DeltaVal))
			return;
		// exit(1);

		if ((Volume < 0.0009566869 - DeltaVal)
				|| (Volume > 1716.4525456279 + DeltaVal))
			return;
		// exit(1);

		if (Enthalpy > PT2HReg5(100, 2273.15)) {
			if (Volume < TH2VReg5(2273.15, Enthalpy) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Volume > PH2VReg5(0.00611213, Enthalpy) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			SubRange.i = (5);
		} else if (Enthalpy > PT2HReg2(0.00611213, 1073.15)) {
			if (Volume < PH2VReg5(100, Enthalpy) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Volume > PH2VReg5(0.00611213, Enthalpy) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			SubRange.i = (5);
		} else if (Enthalpy > PT2HReg2(100, 1073.15)) {
			if (Volume < PH2VReg5(100, Enthalpy) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Volume > PH2VReg2(0.00611213, Enthalpy) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			if (Volume >= TH2VReg2(1073.15, Enthalpy) * (1 - 10 * DeltaVal))
				SubRange.i = (2);
			else
				SubRange.i = (5);
		} else if (Enthalpy > PT2HReg2(1000, 1073.15)) {
			if (Volume < TH2VReg2(1073.15, Enthalpy) - DeltaVal)
				return;
			// exit(1);
			if (Volume > PH2VReg2(0.00611213, Enthalpy) + DeltaVal)
				return;
			// exit(1);

			SubRange.i = (2);
		} else if (Enthalpy > PT2HReg2(T2PBound23(863.15), 863.15)) {
			if (Volume < PH2VReg2(1000, Enthalpy) - DeltaVal)
				return;
			// exit(1);
			if (Volume > PH2VReg2(0.00611213, Enthalpy) + DeltaVal)
				return;
			// exit(1);

			SubRange.i = (2);
		} else {

			if (Volume > PH2VReg2(0.00611213,
					PT2HReg2(T2PBound23(863.15), 863.15))
					+ DeltaVal)
				return;
			// exit(1);

			if (Volume > P2VGReg42(0.00611213)) {
				if (Enthalpy < PV2HReg2(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);

				SubRange.i = (2);
			} else if (Volume > T2VGReg43(T350C)) {
				if (Enthalpy < PV2HReg4(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);
				if (Enthalpy > VG2HGReg2(Volume))
					SubRange.i = (2);
				else
					SubRange.i = (4);
			} else if (Volume > Vc_Water) {
				if (Enthalpy < PV2HReg4(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);

				if (Enthalpy > V2HBound23(Volume))
					SubRange.i = (2);
				else if (Enthalpy > VG2HGReg3(Volume))
					SubRange.i = (3);
				else
					SubRange.i = (4);
			} else if (Volume > PT2VReg2(1000, 863.15)) {
				if (Enthalpy < PV2HReg4(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);

				if (Enthalpy > V2HBound23(Volume))
					SubRange.i = (2);
				else if (Enthalpy > VL2HLReg3(Volume))
					SubRange.i = (3);
				else
					SubRange.i = (4);
			} else if (Volume > T2VLReg41(T350C)) {
				if (Enthalpy < PV2HReg4(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);
				if (Enthalpy > PV2HReg3(1000, Volume) * (1 + 100 * DeltaVal))
					return;
				// exit(1);

				if (Enthalpy > VL2HLReg3(Volume))
					SubRange.i = (3);
				else
					SubRange.i = (4);
			} else if (Volume > PT2VReg1(1000, T350C)) {
				if (Enthalpy < PV2HReg4(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);
				if (Enthalpy > PV2HReg3(1000, Volume) * (1 + 100 * DeltaVal))
					return;
				// exit(1);

				if (Enthalpy > TV2HReg1(T350C, Volume) * (1 + DeltaVal))
					SubRange.i = (3);
				else if (Enthalpy > VL2HLReg1(Volume) * (1 + DeltaVal))
					SubRange.i = (1);
				else
					SubRange.i = (4);
			} else if (Volume > P2VLReg41(0.00611213)) {
				if (Enthalpy < PV2HReg4(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);
				if (Enthalpy > PV2HReg1(1000, Volume) * (1 + 100 * DeltaVal))
					return;
				// exit(1);

				if (Enthalpy > VL2HLReg1(Volume) * (1 + DeltaVal))
					SubRange.i = (1);
				else
					SubRange.i = (4);
			} else {
				if (Enthalpy < PV2HReg1(0.00611213, Volume) - DeltaVal)
					return;
				// exit(1);
				if (Enthalpy > PV2HReg1(1000, Volume) * (1 + 100 * DeltaVal))
					return;
				// exit(1);

				SubRange.i = (1);
			}
		}
	}

	static void SubRangeByHX(double H, double X, HInteger SubRange) {
		SubRange.i = (0);
		if ((X < 0.0 - DeltaVal) || (X > 1.0 + DeltaVal))
			return;
		// exit(1) ;
		if ((H > HMaxX(X)) || (H < HMinX(X)))
			return;
		// exit(1) ;
		SubRange.i = (4);
	}

	static void SUBRANGEBYSG(double SG, HInteger SubRange) {

		SubRange.i = (0);
		if ((SG < Sc_Water - DeltaVal) || (SG > 9.1558 + DeltaVal))
			return;
		// exit(1);

		SubRange.i = (4);
	}

	static void SubRangeBySV(double Entropy, double Volume, HInteger SubRange) {

		SubRange.i = (0);
		if ((Entropy < -0.008582287 - DeltaVal)
				|| (Entropy > 13.9049558469 + DeltaVal))
			return;
		// exit(1);

		if ((Volume < 0.0009566869 - DeltaVal)
				|| (Volume > 1716.4525456279 + DeltaVal))
			return;
		// exit(1);

		if (Volume > PT2VReg2(0.00611213, 1073.15)) {
			if (Entropy < PV2SReg5(0.00611213, Volume) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Entropy > TV2SReg5(2273.15, Volume) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			SubRange.i = (5);
		} else if (Volume > P2VGReg42(0.00611213)) {
			if (Entropy < PV2SReg2(0.00611213, Volume) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Entropy > TV2SReg5(2273.15, Volume) * (1 + 100 * DeltaVal))
				return;
			// exit(1);
			if (Entropy > TV2SReg2(1073.15, Volume) * (1 + 1000 * DeltaVal))
				SubRange.i = (5);
			else
				SubRange.i = (2);
		} else if (Volume > PT2VReg5(100, 2273.15)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) * (1 - 100 * DeltaVal))
				return;
			// exit(1);
			if (Entropy > TV2SReg5(2273.15, Volume) * (1 + 100 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > TV2SReg2(1073.15, Volume) * (1 + 100 * DeltaVal))
				SubRange.i = (5);
			else if (Entropy > VG2SGReg2(Volume))
				SubRange.i = (2);
			else
				SubRange.i = (4);
		} else if (Volume > PT2VReg2(100, 1073.15)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) - DeltaVal)
				return;
			// exit(1);
			if (Entropy > PV2SReg5(100, Volume) + DeltaVal)
				return;
			// exit(1);

			if (Entropy > TV2SReg2(1073.15, Volume) * (1 + DeltaVal))
				SubRange.i = (5);
			else if (Entropy > VG2SGReg2(Volume))
				SubRange.i = (2);
			else
				SubRange.i = (4);
		} else if (Volume > T2VGReg42(T350C)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) * (1 - 10 * DeltaVal))
				return;
			// exit(1);
			if (Entropy > TV2SReg2(1073.15, Volume) * (1 + 10 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > VG2SGReg2(Volume))
				SubRange.i = (2);
			else
				SubRange.i = (4);
		} else if (Volume > PT2VReg2(1000, 1073.15)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) * (1 - DeltaVal))
				return;
			// exit(1);
			if (Entropy > TV2SReg2(1073.15, Volume) * (1 + DeltaVal))
				return;
			// exit(1);

			if (Entropy > V2SBound23(Volume))
				SubRange.i = (2);
			else if (Entropy > VG2SGReg3(Volume))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Volume > Vc_Water) {
			if (Entropy < PV2SReg4(0.00611213, Volume) - DeltaVal)
				return;
			// exit(1);
			if (Entropy > PV2SReg2(1000, Volume) * (1 + 10 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > V2SBound23(Volume))
				SubRange.i = (2);
			else if (Entropy > VG2SGReg3(Volume))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Volume > PT2VReg2(T2PBound23(863.15), 863.15)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) - DeltaVal)
				return;
			// exit(1);
			if (Entropy > PV2SReg2(1000, Volume) * (1 + 10 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > V2SBound23(Volume))
				SubRange.i = (2);
			else if (Entropy > VL2SLReg3(Volume))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Volume > T2VLReg41(T350C) + DeltaVal) {
			if (Entropy < PV2SReg4(0.00611213, Volume) - DeltaVal)
				return;
			// exit(1);
			if (Entropy > PV2SReg3(1000, Volume) * (1 + 10 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > VL2SLReg3(Volume) * (1 + 10 * DeltaVal))
				SubRange.i = (3);
			else
				SubRange.i = (4);
		} else if (Volume > PT2VReg1(1000, T350C)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) - DeltaVal)
				return;
			// exit(1);
			if (Entropy > PV2SReg3(1000, Volume) * (1 + 10 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > TV2SReg1(T350C, Volume) * (1 + 10 * DeltaVal))
				SubRange.i = (3);
			else if (Entropy > VL2SLReg1(Volume) * (1 - 10 * DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else if (Volume > P2VLReg41(0.00611213)) {
			if (Entropy < PV2SReg4(0.00611213, Volume) - DeltaVal)
				return;
			// exit(1);
			if (Entropy > PV2SReg1(1000, Volume) * (1 + 10 * DeltaVal))
				return;
			// exit(1);

			if (Entropy > VL2SLReg1(Volume) * (1 - 10 * DeltaVal))
				SubRange.i = (1);
			else
				SubRange.i = (4);
		} else {
			if ((Entropy < -0.008583))
				return;
			// exit(1);

			if ((Entropy > 0.0)
					&& (Entropy < PV2SReg1(0.00611213, Volume)
							* (1 - 10 * DeltaVal)))
				return;
			// exit(1);
			if ((Entropy > 0.0)
					&& (Entropy > PV2SReg1(1000, Volume) * (1 + 100 * DeltaVal)))
				return;
			// exit(1);

			SubRange.i = (1);
		}
	}

	static void SubRangeBySX(double S, double X, HInteger SubRange) {
		SubRange.i = (0);

		if ((X < 0.0 - DeltaVal) || (X > 1.0 + DeltaVal))
			return;
		// exit(1) ;

		if (S > P2SGReg42(0.00611213) + DeltaVal)
			return;
		// exit(1) ;
		if (S < P2SLReg41(0.00611213) - DeltaVal)
			return;
		// exit(1) ;

		if ((S > SMaxXReg4(X) + DeltaVal) || (S < SMinXReg4(X) - DeltaVal))
			return;
		// exit(1) ;
		SubRange.i = (4);
	}

	static void SUBRANGEBYVG(double VG, HInteger SubRange) {

		SubRange.i = (0);

		if ((VG < Vc_Water - DeltaVal) || (VG > 206.1397163 + DeltaVal))
			return;
		// exit(1);

		SubRange.i = (4);
	}

	static void SubRangeByVX(double V, double X, HInteger SubRange) {

		SubRange.i = (0);
		if ((X < 0.0 - DeltaVal) || (X > 1.0 + DeltaVal))
			return;
		// exit(1) ;
		if (V > P2VGReg42(0.00611213) + DeltaVal)
			return;
		// exit(1) ;
		if (V < P2VLReg41(0.00611213) - DeltaVal)
			return;
		// exit(1) ;
		if ((V > VMaxX(X) + DeltaVal) || (V < VMinX(X) - DeltaVal))
			return;
		// exit(1) ;
		SubRange.i = (4);
	}

	// ///////////////////////////////PT2
	static void PT2D(double P, double T, HDouble D, HInteger Range) {

		SubRangeByPT(P, T, Range);

		switch (Range.i) {
		case 1: {
			D.d = 1 / PT2VReg1(P, T);
			break;
		}
		case 2: {
			D.d = 1 / PT2VReg2(P, T);
			break;
		}
		case 3: {
			D.d = PT2DReg3(P, T);
			break;
		}
		case 4: {
			D.d = P2DLReg4(P);
			break;
		}
		case 5: {
			D.d = 1 / PT2VReg5(P, T);
			break;
		}
		default: {
			D.d = -1.0;
			break;
		}
		}
	}

	static void PT2V(double P, double T, HDouble V, HInteger Range) {

		HDouble D = new HDouble();
		V.d = 0d;
		PT2D(P, T, D, Range);
		if (Range.i != 0)
			V.d = 1 / (D.d);
	}

	static void PT2X_KK(double P, double T, HDouble X, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 4: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		default: {
			X.d = -1.0;
			Range.i = (0);
			break;
		}
		}
	}

	static void PT2E(double P, double T, HDouble E, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {
			E.d = PT2EReg1(P, T);
			break;
		}
		case 2: {
			E.d = PT2EReg2(P, T);
			break;
		}
		case 3: {
			E.d = PT2EReg3(P, T);
			break;
		}
		case 4: {
			E.d = T2HLReg4(T);
			break;
		}
		case 5: {
			E.d = PT2EReg5(P, T);
			break;
		}
		default: {
			E.d = -1.0;
			break;
		}
		}
	}

	static void PT2S(double P, double T, HDouble S, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {
			S.d = PT2SReg1(P, T);
			break;
		}
		case 2: {
			S.d = PT2SReg2(P, T);
			break;
		}
		case 3: {
			S.d = PT2SReg3(P, T);
			break;
		}
		case 4: {
			S.d = T2SLReg4(T);
			break;
		}
		case 5: {
			S.d = PT2SReg5(P, T);
			break;
		}
		default: {
			S.d = -1.0;
			break;
		}
		}
	}

	static void PT2H(double P, double T, HDouble H, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {
			H.d = PT2HReg1(P, T);
			break;
		}
		case 2: {
			H.d = PT2HReg2(P, T);
			break;
		}
		case 3: {
			H.d = PT2HReg3(P, T);
			break;
		}
		case 4: {
			H.d = T2HLReg4(T);
			break;
		}
		case 5: {
			H.d = PT2HReg5(P, T);
			break;
		}
		default: {
			H.d = -1.0;
			break;
		}
		}
	}

	static void PT(double P, double T, HDouble H, HDouble S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {

			H.d = PT2HReg1(P, T);
			S.d = PT2SReg1(P, T);
			V.d = PT2VReg1(P, T);
			X.d = 0.0;
			break;
		}
		case 2: {

			H.d = PT2HReg2(P, T);
			S.d = PT2SReg2(P, T);
			V.d = PT2VReg2(P, T);
			X.d = 1.0;
			break;
		}
		case 3: {

			V.d = PT2VReg3(P, T);
			H.d = TV2HReg3(T, V.d);
			S.d = TV2SReg3(T, V.d);
			X.d = 0.0;
			break;
		}
		case 4: {

			H.d = T2HLReg4(T);
			S.d = T2SLReg4(T);
			V.d = 1 / T2DLReg4(T);
			X.d = 0.0;
			break;
		}
		case 5: {

			H.d = PT2HReg5(P, T);
			S.d = PT2SReg5(P, T);
			V.d = PT2VReg5(P, T);
			X.d = 1.0;
			break;
		}
		default: {

			H.d = -1.0;
			S.d = -1.0;
			V.d = -1.0;
			X.d = -0.0;
			break;
		}
		}
	}

	static void PT2CP(double P, double T, HDouble Cp, HInteger Range) {

		SubRangeByPT(P, T, Range);

		switch (Range.i) {
		case 1: {
			Cp.d = PT2CpReg1(P, T);
			break;
		}
		case 2: {
			Cp.d = PT2CpReg2(P, T);
			break;
		}
		case 3: {
			Cp.d = PT2CpReg3(P, T);
			break;
		}
		case 4: {
			Cp.d = T2CPL(T);
			break;
		}
		case 5: {
			Cp.d = PT2CpReg5(P, T);
			break;
		}
		default: {
			Cp.d = -1.0;
			break;
		}
		}
	}

	static void PT2CV(double P, double T, HDouble Cv, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {
			Cv.d = PT2CvReg1(P, T);
			break;
		}
		case 2: {
			Cv.d = PT2CvReg2(P, T);
			break;
		}
		case 3: {
			Cv.d = PT2CvReg3(P, T);
			break;
		}
		case 4: {
			Cv.d = T2CVL(T);
			break;
		}
		case 5: {
			Cv.d = PT2CvReg5(P, T);
			break;
		}
		default: {
			Cv.d = -1.0;
			break;
		}
		}
	}

	static void PT2SSP(double P, double T, HDouble SSP, HInteger Range) {

		SubRangeByPT(P, T, Range);
		switch (Range.i) {
		case 1: {
			SSP.d = PT2SSPReg1(P, T);
			break;
		}
		case 2: {
			SSP.d = PT2SSPReg2(P, T);
			break;
		}
		case 3: {
			SSP.d = PT2SSPReg3(P, T);
			break;
		}
		case 4: {
			SSP.d = T2SSPL(T);
			break;
		}
		case 5: {
			SSP.d = PT2SSPReg5(P, T);
			break;
		}
		default: {
			SSP.d = -1.0;
			break;
		}
		}
	}

	static void PT2Eta(double P, double T, HDouble Eta, HInteger Range) {
		HDouble Density = new HDouble();
		double Delta, Tau;

		if ((T >= T000C - DeltaVal) && (T <= 1073.15 + DeltaVal)
				&& (P > 0 - DeltaVal) && (P <= 1000.0 + DeltaVal)) {
			PT2D(P, T, Density, Range);
			if (Range.i != 0) {
				Delta = Density.d / 317.763;
				Tau = 647.226 / T;
				Eta.d = 0.000055071 * PsiVisc(Tau, Delta);
			} else {
				Range.i = (0);
				Eta.d = -1.0;
			}
		} else {
			Range.i = (0);
			Eta.d = -1.0;
		}
	}

	static void PT2RAMD(double P, double T, HDouble Ramd, HInteger Range) {
		HDouble Density = new HDouble();
		double Delta, Tau;

		if ((T >= T000C - DeltaVal) && (T <= 1073.15 + DeltaVal)
				&& (P > 0 - DeltaVal) && (P <= 1000.0 + DeltaVal)) {
			PT2D(P, T, Density, Range);
			if (Range.i != 0) {
				Delta = Density.d / 317.763;
				Tau = 647.226 / T;
				Ramd.d = 0.4945 * LambThCon(T, P, Tau, Delta);
			} else {
				Ramd.d = -1.0;
				Range.i = 0;
			}
		} else {
			Ramd.d = -1.0;
			Range.i = 0;
		}
	}

	static void PT2KS(double P, double T, HDouble KS, HInteger Range) {
		HDouble SSP = new HDouble(), D = new HDouble();
		double Volume;

		PT2SSP(P, T, SSP, Range);
		if (Range.i == 0) {
			KS.d = -1d;
			return;
			// exit(1);
		}
		PT2D(P, T, D, Range);
		if (Range.i == 0) {
			KS.d = -1d;
			return;
			// exit(1);
		}
		Volume = 1 / (D.d);
		KS.d = (SSP.d) * (SSP.d) / (P * Volume) * 1E-5;
	}

	static void PT2U(double P, double T, HDouble U, HInteger Range) {
		HDouble Eta = new HDouble(), V = new HDouble();

		PT2V(P, T, V, Range);
		if (Range.i == 0) {
			U.d = -1.0;
			return;
			// exit(1);
		}
		PT2Eta(P, T, Eta, Range);
		if (Range.i == 0) {
			U.d = -1.0;
			return;
			// exit(1);
		}
		U.d = Eta.d * V.d;
	}

	static void PT2PRN(double P, double T, HDouble PRN, HInteger Range) {
		HDouble Cp = new HDouble();
		HDouble Eta = new HDouble();
		HDouble Ramd = new HDouble();

		PT2CP(P, T, Cp, Range);
		if (Range.i == 0) {
			PRN.d = -1d;
			return;
			// exit(1);
		}
		PT2Eta(P, T, Eta, Range);
		if (Range.i == 0) {
			PRN.d = -1d;
			return;
			// exit(1);
		}
		PT2RAMD(P, T, Ramd, Range);
		if (Range.i == 0) {
			PRN.d = -1d;
			return;
			// exit(1);
		}
		PRN.d = (Eta.d) * (Cp.d) / (Ramd.d) * 1E3;
	}

	// //////////////////////////TV
	static double TV2EPS(double Temperature, double Volume) {
		double R1V, RT, G, A, B;
		int IFor;

		R1V = Vc_Water / Volume;
		RT = Tc_Water / Temperature;
		G = 1;
		for (IFor = 1; IFor <= 11; IFor++) {
			G = G + NEps[IFor] * Math.pow(R1V, IEps[IFor])
					* Math.pow(RT, JEps[IFor]);
		}

		G = G + NEps[12] * R1V * Math.pow(Temperature / 228 - 1, -1.2);

		A = 1E3 * 6.0221367E23 * 6.138E-30 * 6.138E-30 / Volume * G / 18.015257
				/ 8.854187817E-12 / 1.380658E-23 / Temperature;
		B = 1E3 * 6.0221367E23 * 1.636E-40 / Volume / 3 / 18.015257
				/ 8.854187817E-12;
		return (1 + A + 5 * B + Math.pow(9 + 2 * A + 18 * B + A * A + 10 * A
				* B + 9 * B * B, 0.5))
				/ (4 - 4 * B);
	}

	static void PT2EPS(double P, double T, HDouble EPS, HInteger Range) {
		HDouble V = new HDouble();

		PT2V(P, T, V, Range);
		if (Range.i == 0) {
			EPS.d = -1.0;
			return;
			// exit(1);
		}
		EPS.d = TV2EPS(T, V.d);
	}

	static double TVLAMD2N(double Temperature, double Volume, double Lamd) {
		double R1V, RT, RLamd, RLamd2, A;

		R1V = 1 / (1E3 * Volume);
		RT = Temperature / 273.15;
		RLamd = (Lamd * 1E6) / 0.589;
		RLamd2 = RLamd * RLamd;

		A = R1V
				* (0.244257733 + 0.974634476E-2 * R1V + (-0.373234996E-2) * RT
						+ 0.268678472E-3 * RLamd2 * RT + 0.158920570E-2
						/ RLamd2 + 0.245934259E-2
						/ (RLamd2 - 0.229202 * 0.229202) + 0.900704920
						/ (RLamd2 - 5.432937 * 5.432937) + (-0.166626219E-1)
						* R1V * R1V);

		return Math.pow((2 * A + 1) / (1 - A), 0.5); // ((2*A+1)/(1-A),0.5)
	}

	static void PT2N(double P, double T, double Lamd, HDouble N, HInteger Range) {
		HDouble V = new HDouble();

		PT2V(P, T, V, Range);
		if (Range.i == 0) {
			N.d = -1.0;
			return;
			// exit(1);
		}
		N.d = TVLAMD2N(T, V.d, Lamd);
	}

	static void PH2T(double P, double H, HDouble T, HInteger Range) {

		SubRangeByPH(P, H, Range);
		switch (Range.i) {
		case 1: {
			T.d = PH2TReg1(P, H);
			break;
		}
		case 2: {
			T.d = PH2TReg2(P, H);
			break;
		}
		case 3: {
			T.d = PH2TReg3(P, H);
			break;
		}
		case 4: {
			T.d = P2T(P);
			break;
		}
		case 5: {
			T.d = PH2TReg5(P, H);
			break;
		}
		default: {
			T.d = -1.0;
			break;
		}
		}
	}

	static void PH2S(double P, double H, HDouble S, HInteger Range) {

		SubRangeByPH(P, H, Range);
		switch (Range.i) {
		case 1: {
			S.d = PH2SReg1(P, H);
			break;
		}
		case 2: {
			S.d = PH2SReg2(P, H);
			break;
		}
		case 3: {
			S.d = PH2SReg3(P, H);
			break;
		}
		case 4: {
			S.d = PH2SReg4(P, H);
			break;
		}
		case 5: {
			S.d = PH2SReg5(P, H);
			break;
		}
		default: {
			S.d = -1.0;
			break;
		}
		}
	}

	static void PH2V(double P, double H, HDouble V, HInteger Range) {

		SubRangeByPH(P, H, Range);
		switch (Range.i) {
		case 1: {
			V.d = PH2VReg1(P, H);
			break;
		}
		case 2: {
			V.d = PH2VReg2(P, H);
			break;
		}
		case 3: {
			V.d = PH2VReg3(P, H);
			break;
		}
		case 4: {
			V.d = PH2VReg4(P, H);
			break;
		}
		case 5: {
			V.d = PH2VReg5(P, H);
			break;
		}
		default: {
			V.d = -1.0;
			break;
		}
		}
	}

	static void PH2X(double P, double H, HDouble X, HInteger Range) {

		SubRangeByPH(P, H, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = (PH2XReg4(P, H));
			break;
		}
		default: {
			X.d = (-1.0);
			break;
		}
		}
	}

	static void PH(double P, HDouble T, double H, HDouble S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByPH(P, H, Range);
		switch (Range.i) {
		case 1: {
			T.d = (PH2TReg1(P, H));
			S.d = (PT2SReg1(P, T.d));
			V.d = (PT2VReg1(P, T.d));
			X.d = (0.0);
			break;
		}
		case 2: {
			T.d = (PH2TReg2(P, H));
			S.d = (PT2SReg2(P, T.d));
			V.d = (PT2VReg2(P, T.d));
			X.d = (0.0);
			break;
		}
		case 3: {
			T.d = (PH2TReg3(P, H));
			S.d = (PT2SReg3(P, T.d));
			V.d = (PT2VReg3(P, T.d));
			X.d = (0.0);
			break;
		}
		case 4: {

			T.d = P2T(P);
			X.d = (TH2XReg4(T.d, H));
			S.d = (TX2SReg4(T.d, X.d));
			X.d = (0.0);
			break;

		}
		case 5: {
			T.d = (PH2TReg5(P, H));
			S.d = (PT2SReg5(P, T.d));
			V.d = (PT2VReg5(P, T.d));
			X.d = (0.0);
			break;
		}
		default: {
			T.d = (-1.0);
			S.d = (-1.0);
			V.d = (-1.0);
			X.d = (-1.0);
			break;
		}
		}
	}

	static void PS2T(double P, double S, HDouble T, HInteger Range) {

		SubRangeByPS(P, S, Range);
		switch (Range.i) {
		case 1: {
			T.d = (PS2TReg1(P, S));
			break;
		}
		case 2: {
			T.d = (PS2TReg2(P, S));
			break;
		}
		case 3: {
			T.d = (PS2TReg3(P, S));
			break;
		}
		case 4: {
			T.d = (P2T(P));
			break;
		}
		case 5: {
			T.d = (PS2TReg5(P, S));
			break;
		}
		default: {
			T.d = (-1.0);
			break;
		}
		}
	}

	static void PS2H(double P, double S, HDouble H, HInteger Range) {

		SubRangeByPS(P, S, Range);
		switch (Range.i) {
		case 1: {
			H.d = (PS2HReg1(P, S));
			break;
		}
		case 2: {
			H.d = (PS2HReg2(P, S));
			break;
		}
		case 3: {
			H.d = (PS2HReg3(P, S));
			break;
		}
		case 4: {
			H.d = (PS2HReg4(P, S));
			break;
		}
		case 5: {
			H.d = (PS2HReg5(P, S));
			break;
		}
		default: {
			H.d = (-1.0);
			break;
		}
		}
	}

	static void PS2V(double P, double S, HDouble V, HInteger Range) {

		SubRangeByPS(P, S, Range);
		switch (Range.i) {
		case 1: {
			V.d = (PS2VReg1(P, S));
			break;
		}
		case 2: {
			V.d = (PS2VReg2(P, S));
			break;
		}
		case 3: {
			V.d = (PS2VReg3(P, S));
			break;
		}
		case 4: {
			V.d = (PS2VReg4(P, S));
			break;
		}
		case 5: {
			V.d = (PS2VReg5(P, S));
			break;
		}
		default: {
			V.d = (-1.0);
			break;
		}
		}
	}

	static void PS2X(double P, double S, HDouble X, HInteger Range) {

		SubRangeByPS(P, S, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = (PS2XReg4(P, S));
			break;
		}
		default: {
			X.d = (-1.0);
			break;
		}
		}
	}

	static void PS(double P, HDouble T, HDouble H, double S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByPS(P, S, Range);
		switch (Range.i) {
		case 1: {
			T.d = (PS2TReg1(P, S));
			H.d = (PT2HReg1(P, T.d));
			V.d = (PT2VReg1(P, T.d));
			X.d = (0.0);
			break;
		}
		case 2: {
			T.d = (PS2TReg2(P, S));
			H.d = (PT2HReg2(P, T.d));
			V.d = (PT2VReg2(P, T.d));
			X.d = (1.0);
			break;
		}
		case 3: {
			T.d = (PS2TReg3(P, S));
			V.d = (PT2VReg3(P, T.d));
			H.d = (TV2HReg3(T.d, V.d));
			X.d = (0.0);
			break;
		}
		case 4: {

			T.d = (P2T(P));
			X.d = (PS2XReg4(P, S));
			H.d = (TX2HReg4(T.d, X.d));
			V.d = (TX2VReg4(T.d, X.d));
			break;

		}
		case 5: {
			T.d = (PS2TReg5(P, S));
			H.d = (PT2HReg5(P, T.d));
			V.d = (PT2VReg5(P, T.d));
			X.d = (1.0);
			break;
		}
		default: {
			T.d = (-1.0);
			H.d = (-1.0);
			V.d = (-1.0);
			X.d = (-1.0);
			break;
		}
		}
	}

	static void PV2T(double P, double V, HDouble T, HInteger Range) {

		SubRangeByPV(P, V, Range);
		switch (Range.i) {
		case 1: {
			T.d = (PV2TReg1(P, V));
			break;
		}
		case 2: {
			T.d = (PV2TReg2(P, V));
			break;
		}
		case 3: {
			T.d = (PV2TReg3(P, V));
			break;
		}
		case 4: {
			T.d = (P2T(P));
			break;
		}
		case 5: {
			T.d = (PV2TReg5(P, V));
			break;
		}
		default: {
			T.d = (-1.0);
			break;
		}
		}
	}

	static void PV2H(double P, double V, HDouble H, HInteger Range) {

		SubRangeByPV(P, V, Range);
		switch (Range.i) {
		case 1: {
			H.d = (PV2HReg1(P, V));
			break;
		}
		case 2: {
			H.d = (PV2HReg2(P, V));
			break;
		}
		case 3: {
			H.d = (PV2HReg3(P, V));
			break;
		}
		case 4: {
			H.d = (PV2HReg4(P, V));
			break;
		}
		case 5: {
			H.d = (PV2HReg5(P, V));
			break;
		}
		default: {
			H.d = (-1.0);
			break;
		}
		}
	}

	static void PV2S(double P, double V, HDouble S, HInteger Range) {

		SubRangeByPV(P, V, Range);
		switch (Range.i) {
		case 1: {
			S.d = (PV2SReg1(P, V));
			break;
		}
		case 2: {
			S.d = (PV2SReg2(P, V));
			break;
		}
		case 3: {
			S.d = (PV2SReg3(P, V));
			break;
		}
		case 4: {
			S.d = (PV2SReg4(P, V));
			break;
		}
		case 5: {
			S.d = (PV2SReg5(P, V));
			break;
		}
		default: {
			S.d = (-1.0);
			break;
		}
		}
	}

	static void PV2X(double P, double V, HDouble X, HInteger Range) {

		SubRangeByPV(P, V, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = (PV2XReg4(P, V));
			break;
		}
		default: {
			X.d = (-1.0);
			break;
		}
		}
	}

	static void PV(double P, HDouble T, HDouble H, HDouble S, double V,
			HDouble X, HInteger Range) {

		SubRangeByPV(P, V, Range);
		switch (Range.i) {
		case 1: {
			T.d = (PV2TReg1(P, V));
			H.d = (PT2HReg1(P, T.d));
			S.d = (PT2SReg1(P, T.d));
			X.d = (0.0);
			break;
		}
		case 2: {
			T.d = (PV2TReg2(P, V));
			H.d = (PT2HReg2(P, T.d));
			S.d = (PT2SReg2(P, T.d));
			X.d = (0.0);
			break;
		}
		case 3: {
			T.d = (PV2TReg3(P, V));
			H.d = (TV2HReg3(T.d, V));
			S.d = (TV2SReg3(T.d, V));
			X.d = (0.0);
			break;
		}
		case 4: {

			T.d = (P2T(P));
			X.d = (TV2XReg4(T.d, V));
			H.d = (TX2HReg4(T.d, X.d));
			S.d = (TX2SReg4(T.d, X.d));
			break;

		}
		case 5: {
			T.d = (PV2TReg5(P, V));
			H.d = (PT2HReg5(P, T.d));
			S.d = (PT2SReg5(P, T.d));
			X.d = (0.0);
			break;
		}
		default: {
			T.d = (-1.0);
			H.d = (-1.0);
			S.d = (-1.0);
			X.d = (-1.0);
			break;
		}
		}
	}

	static void PX2T(double P, double X, HDouble T, HInteger Range) {

		SubRangeByPX(P, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = (P2T(P));
			break;
		}
		default: {
			Range.i = (0);
			T.d = (-1.0);
			break;
			// exit(1);
		}
		}
	}

	static void PX2H(double P, double X, HDouble H, HInteger Range) {

		SubRangeByPX(P, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = (PX2HReg4(P, X));
			break;
		}
		default: {
			Range.i = (0);
			H.d = (-1.0);
			break;
			// exit(1);
		}
		}
	}

	static void PX2S(double P, double X, HDouble S, HInteger Range) {

		SubRangeByPX(P, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = (PX2SReg4(P, X));
			break;
		}
		default: {
			Range.i = (0);
			S.d = (-1.0);
			break;
			// exit(1);
		}
		}
	}

	static void PX2V(double P, double X, HDouble V, HInteger Range) {

		SubRangeByPX(P, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = (PX2VReg4(P, X));
			break;
		}
		default: {
			Range.i = (0);
			V.d = (-1.0);
			break;
			// exit(1);
		}
		}
	}

	static void PX(double P, HDouble T, HDouble H, HDouble S, HDouble V,
			double X, HInteger Range) {
		PX2T(P, X, T, Range);
		if (Range.i == 4) {
			H.d = (TX2HReg4(T.d, X));
			S.d = (TX2SReg4(T.d, X));
			V.d = (TX2VReg4(T.d, X));
		}
	}

	static void TH2PHP(double T, double H, HDouble P, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (1);

		switch (Range.i) {
		case 1: {
			P.d = (TH2PHPReg1(T, H));
			break;
		}
		case 2: {
			P.d = (TH2PReg2(T, H));
			break;
		}
		case 3: {
			P.d = (TH2PReg3(T, H));
			break;
		}
		case 4: {
			P.d = (T2P(T));
			break;
		}
		case 5: {
			P.d = (TH2PReg5(T, H));
			break;
		}
		default: {
			P.d = (-1.0);
			break;
		}
		}
	}

	static void TH2P(double T, double H, HDouble P, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			P.d = (TH2PReg1(T, H));
			break;
		}
		case 2: {
			P.d = (TH2PReg2(T, H));
			break;
		}
		case 3: {
			P.d = (TH2PReg3(T, H));
			break;
		}
		case 4: {
			P.d = (T2P(T));
			break;
		}
		case 5: {
			P.d = (TH2PReg5(T, H));
			break;
		}
		default: {
			P.d = (-1.0);
			break;
		}
		}
	}

	static void TH2PLP(double T, double H, HDouble P, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			P.d = TH2PLPReg1(T, H);
			break;
		}
		case 2: {
			P.d = TH2PReg2(T, H);
			break;
		}
		case 3: {
			P.d = TH2PReg3(T, H);
			break;
		}
		case 4: {
			P.d = T2P(T);
			break;
		}
		case 5: {
			P.d = TH2PReg5(T, H);
			break;
		}
		default: {
			P.d = -1.0;
			break;
		}
		}
	}

	static void TH2SHP(double T, double H, HDouble S, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (1);
		switch (Range.i) {
		case 1: {
			S.d = TH2SHPReg1(T, H);
			break;
		}
		case 2: {
			S.d = TH2SReg2(T, H);
			break;
		}
		case 3: {
			S.d = TH2SReg3(T, H);
			break;
		}
		case 4: {
			S.d = TH2SReg4(T, H);
			break;
		}
		case 5: {
			S.d = TH2SReg5(T, H);
			break;
		}
		default: {
			S.d = -1.0;
			break;
		}
		}
	}

	static void TH2SLP(double T, double H, HDouble S, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			S.d = (TH2SLPReg1(T, H));
			break;
		}
		case 2: {
			S.d = (TH2SReg2(T, H));
			break;
		}
		case 3: {
			S.d = (TH2SReg3(T, H));
			break;
		}
		case 4: {
			S.d = (TH2SReg4(T, H));
			break;
		}
		case 5: {
			S.d = (TH2SReg5(T, H));
			break;
		}
		default: {
			S.d = (-1.0);
			break;
		}
		}
	}

	static void TH2S(double T, double H, HDouble S, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			S.d = (TH2SReg1(T, H));
			break;
		}
		case 2: {
			S.d = (TH2SReg2(T, H));
			break;
		}
		case 3: {
			S.d = (TH2SReg3(T, H));
			break;
		}
		case 4: {
			S.d = (TH2SReg4(T, H));
			break;
		}
		case 5: {
			S.d = (TH2SReg5(T, H));
			break;
		}
		default: {
			S.d = (-1.0);
			break;
		}
		}
	}

	static void TH2V(double T, double H, HDouble V, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			V.d = (TH2VReg1(T, H));
			break;
		}
		case 2: {
			V.d = (TH2VReg2(T, H));
			break;
		}
		case 3: {
			V.d = (TH2VReg3(T, H));
			break;
		}
		case 4: {
			V.d = (TH2VReg4(T, H));
			break;
		}
		case 5: {
			V.d = (TH2VReg5(T, H));
			break;
		}
		default: {
			V.d = (-1.0);
			break;
		}
		}
	}

	static void TH2VHP(double T, double H, HDouble V, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (1);
		switch (Range.i) {
		case 1: {
			V.d = TH2VHPReg1(T, H);
			break;
		}
		case 2: {
			V.d = TH2VReg2(T, H);
			break;
		}
		case 3: {
			V.d = TH2VReg3(T, H);
			break;
		}
		case 4: {
			V.d = TH2VReg4(T, H);
			break;
		}
		case 5: {
			V.d = TH2VReg5(T, H);
			break;
		}
		default: {
			V.d = -1.0;
			break;
		}
		}
	}

	static void TH2VLP(double T, double H, HDouble V, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			V.d = TH2VLPReg1(T, H);
			break;
		}
		case 2: {
			V.d = TH2VReg2(T, H);
			break;
		}
		case 3: {
			V.d = TH2VReg3(T, H);
			break;
		}
		case 4: {
			V.d = TH2VReg4(T, H);
			break;
		}
		case 5: {
			V.d = TH2VReg5(T, H);
			break;
		}
		default: {
			V.d = -1.0;
			break;
		}
		}
	}

	static void TH2XHP(double T, double H, HDouble X, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (1);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 4: {
			X.d = TH2XReg4(T, H);
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		default: {
			X.d = -1.0;
			break;
		}
		}
	}

	static void TH2XLP(double T, double H, HDouble X, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 4: {
			X.d = TH2XReg4(T, H);
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		default: {
			X.d = -1.0;
			break;
		}
		}
	}

	static void TH2X(double T, double H, HDouble X, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = TH2XReg4(T, H);
			break;
		}
		
		default: {
			X.d = -1.0;
			break;
		}
		}

	}

	static void TH(HDouble P, double T, double H, HDouble S, HDouble V,
			HDouble X, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			P.d = (TH2PReg1(T, H));
			S.d = (PT2SReg1(P.d, T));
			V.d = (PT2VReg1(P.d, T));
			X.d = (0.0);
			break;
		}
		case 2: {
			P.d = (TH2PReg2(T, H));
			S.d = (PT2SReg2(P.d, T));
			V.d = (PT2VReg2(P.d, T));
			X.d = (0.0);
			break;
		}
		case 3: {
			V.d = (TH2VReg2(T, H));
			P.d = (TV2PReg3(T, V.d));
			S.d = (TV2SReg3(T, V.d));
			X.d = (0.0);
			break;
		}
		case 4: {

			P.d = (T2P(T));
			X.d = (TH2XReg4(T, H));
			S.d = (TX2SReg4(T, X.d));
			V.d = (TX2VReg4(T, X.d));
			break;

		}
		case 5: {
			P.d = (TH2PReg5(T, H));
			S.d = (PT2SReg5(P.d, T));
			V.d = (PT2VReg5(P.d, T));
			X.d = (1.0);
			break;
		}
		default: {
			V.d = (-1.0);
			P.d = (-1.0);
			S.d = (-1.0);
			X.d = (-1.0);
			break;
		}
		}
	}

	static void THHP(HDouble P, double T, double H, HDouble S, HDouble V,
			HDouble X, HInteger Range) {
		HBoolean B14 = new HBoolean();

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (1);
		switch (Range.i) {
		case 1: {
			P.d = (TH2PHPReg1(T, H));
			S.d = (PT2SReg1(P.d, T));
			V.d = (PT2VReg1(P.d, T));
			X.d = (0.0);
			break;
		}
		case 2: {
			P.d = (TH2PReg2(T, H));
			S.d = (PT2SReg2(P.d, T));
			V.d = (PT2VReg2(P.d, T));
			X.d = (1.0);
			break;
		}
		case 3: {
			V.d = (TH2VReg3(T, H));
			P.d = (TV2PReg3(T, V.d));
			S.d = (TV2SReg3(T, V.d));
			X.d = (0.0);
			break;
		}
		case 4: {

			P.d = (T2P(T));
			X.d = (TH2XReg4(T, H));
			S.d = (TX2SReg4(T, X.d));
			V.d = (TX2VReg4(T, X.d));
			break;

		}
		case 5: {
			P.d = (TH2PReg5(T, H));
			S.d = (PT2SReg5(P.d, T));
			V.d = (PT2VReg5(P.d, T));
			X.d = (1.0);
			break;
		}
		default: {
			V.d = (-1.0);
			P.d = (-1.0);
			S.d = (-1.0);
			X.d = (-1.0);
			break;
		}
		}
	}

	static void THLP(HDouble P, double T, double H, HDouble S, HDouble V,
			HDouble X, HInteger Range) {
		HBoolean B14 = new HBoolean();
		;

		SubRangeByTH(T, H, Range, B14);
		if (B14.b)
			Range.i = (4);
		switch (Range.i) {
		case 1: {
			P.d = (TH2PLPReg1(T, H));
			S.d = (PT2SReg1(P.d, T));
			V.d = (PT2VReg1(P.d, T));
			X.d = (0.0);
			break;
		}
		case 2: {
			P.d = (TH2PReg2(T, H));
			S.d = (PT2SReg2(P.d, T));
			V.d = (PT2VReg2(P.d, T));
			X.d = (1.0);
			break;
		}
		case 3: {
			V.d = (TH2VReg2(T, H));
			P.d = (TV2PReg3(T, V.d));
			S.d = (TV2SReg3(T, V.d));
			X.d = (0.0);
			break;
		}
		case 4: {

			P.d = T2P(T);
			X.d = TH2XReg4(T, H);
			S.d = TX2SReg4(T, X.d);
			V.d = TX2VReg4(T, X.d);
			break;

		}
		case 5: {
			P.d = TH2PReg5(T, H);
			S.d = PT2SReg5(P.d, T);
			V.d = PT2VReg5(P.d, T);
			X.d = 1.0;
			break;
		}
		default: {
			V.d = -1.0;
			P.d = -1.0;
			S.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void TS2PHP(double T, double S, HDouble P, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = TS2PHPReg1(T, S);
			break;
		}
		case 2: {
			P.d = TS2PReg2(T, S);
			break;
		}
		case 3: {
			P.d = TS2PReg3(T, S);
			break;
		}
		case 4: {
			P.d = T2P(T);
			break;
		}
		case 5: {
			P.d = TS2PReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2PLP(double T, double S, HDouble P, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = TS2PLPReg1(T, S);
			break;
		}
		case 2: {
			P.d = TS2PReg2(T, S);
			break;
		}
		case 3: {
			P.d = TS2PReg3(T, S);
			break;
		}
		case 4: {
			P.d = T2P(T);
			break;
		}
		case 5: {
			P.d = TS2PReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2P(double T, double S, HDouble P, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = TS2PReg1(T, S);
			break;
		}
		case 2: {
			P.d = TS2PReg2(T, S);
			break;
		}
		case 3: {
			P.d = TS2PReg3(T, S);
			break;
		}
		case 4: {
			P.d = T2P(T);
			break;
		}
		case 5: {
			P.d = TS2PReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2HHP(double T, double S, HDouble H, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			H.d = TS2HHPReg1(T, S);
			break;
		}
		case 2: {
			H.d = TS2HReg2(T, S);
			break;
		}
		case 3: {
			H.d = TS2HReg3(T, S);
			break;
		}
		case 4: {
			H.d = TS2HReg4(T, S);
			break;
		}
		case 5: {
			H.d = TS2HReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2HLP(double T, double S, HDouble H, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			H.d = TS2HLPReg1(T, S);
			break;
		}
		case 2: {
			H.d = TS2HReg2(T, S);
			break;
		}
		case 3: {
			H.d = TS2HReg3(T, S);
			break;
		}
		case 4: {
			H.d = TS2HReg4(T, S);
			break;
		}
		case 5: {
			H.d = TS2HReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2H(double T, double S, HDouble H, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			H.d = TS2HReg1(T, S);
			break;
		}
		case 2: {
			H.d = TS2HReg2(T, S);
			break;
		}
		case 3: {
			H.d = TS2HReg3(T, S);
			break;
		}
		case 4: {
			H.d = TS2HReg4(T, S);
			break;
		}
		case 5: {
			H.d = TS2HReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2VHP(double T, double S, HDouble V, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			V.d = TS2VHPReg1(T, S);
			break;
		}
		case 2: {
			V.d = TS2VReg2(T, S);
			break;
		}
		case 3: {
			V.d = TS2VReg3(T, S);
			break;
		}
		case 4: {
			V.d = TS2VReg4(T, S);
			break;
		}
		case 5: {
			V.d = TS2VReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2VLP(double T, double S, HDouble V, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			V.d = (TS2VLPReg1(T, S));
			break;
		}
		case 2: {
			V.d = (TS2VReg2(T, S));
			break;
		}
		case 3: {
			V.d = (TS2VReg3(T, S));
			break;
		}
		case 4: {
			V.d = (TS2VReg4(T, S));
			break;
		}
		case 5: {
			V.d = (TS2VReg5(T, S));
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void TS2V(double T, double S, HDouble V, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			V.d = TS2VReg1(T, S);
			break;
		}
		case 2: {
			V.d = TS2VReg2(T, S);
			break;
		}
		case 3: {
			V.d = TS2VReg3(T, S);
			break;
		}
		case 4: {
			V.d = TS2VReg4(T, S);
			break;
		}
		case 5: {
			V.d = TS2VReg5(T, S);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
			// exit(1);
		}
		}
	}

	static void TS2X(double T, double S, HDouble X, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = TS2XReg4(T, S);
			break;
		}
		default: {
			X.d = -1.0;
			break;
		}
		}
	}

	static void TS(HDouble P, double T, HDouble H, double S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = TS2PReg1(T, S);
			H.d = PT2HReg1(P.d, T);
			V.d = PT2VReg1(P.d, T);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = TS2PReg2(T, S);
			H.d = PT2HReg2(P.d, T);
			V.d = PT2VReg2(P.d, T);
			X.d = 1.0;
			break;
		}
		case 3: {
			V.d = TS2VReg3(T, S);
			P.d = TV2PReg3(T, V.d);
			H.d = TV2HReg3(T, V.d);
			X.d = 0.0;
			break;
		}
		case 4: {
			P.d = T2P(T);
			X.d = TS2XReg4(T, S);
			H.d = TX2HReg4(T, X.d);
			V.d = TX2VReg4(T, X.d);
			break;
		}
		case 5: {
			P.d = TS2PReg5(T, S);
			H.d = PT2HReg5(P.d, T);
			V.d = PT2VReg5(P.d, T);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			H.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void TSHP(HDouble P, double T, HDouble H, double S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = TS2PHPReg1(T, S);
			H.d = PT2HReg1(P.d, T);
			V.d = PT2VReg1(P.d, T);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = TS2PReg2(T, S);
			H.d = PT2HReg2(P.d, T);
			V.d = PT2VReg2(P.d, T);
			X.d = 1.0;
			break;
		}
		case 3: {
			V.d = TS2VReg3(T, S);
			P.d = TV2PReg3(T, V.d);
			H.d = TV2HReg3(T, V.d);
			X.d = 0.0;
			break;
		}
		case 4: {
			P.d = T2P(T);
			X.d = TS2XReg4(T, S);
			H.d = TX2HReg4(T, X.d);
			V.d = TX2VReg4(T, X.d);
			break;
		}
		case 5: {
			P.d = TS2PReg5(T, S);
			H.d = PT2HReg5(P.d, T);
			V.d = PT2VReg5(P.d, T);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			H.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void TSLP(HDouble P, double T, HDouble H, double S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByTS(T, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = TS2PLPReg1(T, S);
			H.d = PT2HReg1(P.d, T);
			V.d = PT2VReg1(P.d, T);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = TS2PReg2(T, S);
			H.d = PT2HReg2(P.d, T);
			V.d = PT2VReg2(P.d, T);
			X.d = 1.0;
			break;
		}
		case 3: {
			V.d = TS2VReg3(T, S);
			P.d = TV2PReg3(T, V.d);
			H.d = TV2HReg3(T, V.d);
			X.d = 0.0;
			break;
		}
		case 4: {
			P.d = T2P(T);
			X.d = TS2XReg4(T, S);
			H.d = TX2HReg4(T, X.d);
			V.d = TX2VReg4(T, X.d);
			break;
		}
		case 5: {
			P.d = TS2PReg5(T, S);
			H.d = PT2HReg5(P.d, T);
			V.d = PT2VReg5(P.d, T);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			H.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void TV2P(double T, double V, HDouble P, HInteger Range) {

		SubRangeByTV(T, V, Range);
		switch (Range.i) {
		case 1: {
			P.d = TV2PReg1(T, V);
			break;
		}
		case 2: {
			P.d = TV2PReg2(T, V);
			break;
		}
		case 3: {
			P.d = TV2PReg3(T, V);
			break;
		}
		case 4: {
			P.d = T2P(T);
			break;
		}
		case 5: {
			P.d = TV2PReg5(T, V);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
			// exit(1);
		}
		}
	}

	static void TV2H(double T, double V, HDouble H, HInteger Range) {

		SubRangeByTV(T, V, Range);
		switch (Range.i) {
		case 1: {
			H.d = TV2HReg1(T, V);
			break;
		}
		case 2: {
			H.d = TV2HReg2(T, V);
			break;
		}
		case 3: {
			H.d = TV2HReg3(T, V);
			break;
		}
		case 4: {
			H.d = TV2HReg4(T, V);
			break;
		}
		case 5: {
			H.d = TV2HReg5(T, V);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
			// exit(1);
		}
		}
	}

	static void TV2S(double T, double V, HDouble S, HInteger Range) {

		SubRangeByTV(T, V, Range);
		switch (Range.i) {
		case 1: {
			S.d = TV2SReg1(T, V);
			break;
		}
		case 2: {
			S.d = TV2SReg2(T, V);
			break;
		}
		case 3: {
			S.d = TV2SReg3(T, V);
			break;
		}
		case 4: {
			S.d = TV2SReg4(T, V);
			break;
		}
		case 5: {
			S.d = TV2SReg5(T, V);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
			// exit(1);
		}
		}
	}

	static void TV2X(double T, double V, HDouble X, HInteger Range) {

		SubRangeByTV(T, V, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = TV2XReg4(T, V);
			break;
		}
		default: {
			Range.i = (0);
			X.d = -1.0;
			break;
		}
		}
	}

	static void TV(HDouble P, double T, HDouble H, HDouble S, double V,
			HDouble X, HInteger Range) {

		SubRangeByTV(T, V, Range);
		switch (Range.i) {
		case 1: {
			P.d = TV2PReg1(T, V);
			H.d = PT2HReg1(P.d, T);
			S.d = PT2SReg1(P.d, T);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = TV2PReg2(T, V);
			H.d = PT2HReg2(P.d, T);
			S.d = PT2SReg2(P.d, T);
			X.d = 1.0;
			break;
		}
		case 3: {
			P.d = TV2PReg3(T, V);
			H.d = TV2HReg3(T, V);
			S.d = TV2SReg3(T, V);
			X.d = 0.0;
			break;
		}
		case 4: {
			P.d = T2P(T);
			X.d = TV2XReg4(T, V);
			H.d = TX2HReg4(T, X.d);
			S.d = TX2SReg4(T, X.d);
			break;
		}
		case 5: {
			P.d = TV2PReg5(T, V);
			H.d = PT2HReg5(P.d, T);
			S.d = PT2SReg5(P.d, T);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			H.d = -1.0;
			S.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void TX2P(double T, double X, HDouble P, HInteger Range) {

		SubRangeByTX(T, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = T2P(T);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void TX2H(double T, double X, HDouble H, HInteger Range) {

		SubRangeByTX(T, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = TX2HReg4(T, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void TX2S(double T, double X, HDouble S, HInteger Range) {

		SubRangeByTX(T, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = TX2SReg4(T, X);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void TX2V(double T, double X, HDouble V, HInteger Range) {

		SubRangeByTX(T, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = TX2VReg4(T, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	// UEwasp97.cpp �޸�

	// ////////////222222

	static void TX(HDouble P, double T, HDouble H, HDouble S, HDouble V,
			double X, HInteger Range) {
		TX2P(T, X, P, Range);
		if (Range.i == 4) {
			H.d = (TX2HReg4(T, X));
			S.d = (TX2SReg4(T, X));
			V.d = (TX2VReg4(T, X));
		}
	}

	static void H2TL(double H, HDouble T, HInteger Range) {

		SUBRANGEBYHL(H, Range);
		switch (Range.i) {
		case 4: {
			T.d = HL2TREG4(H);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void HS2P(double H, double S, HDouble P, HInteger Range) {

		SubRangeByHS(H, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = HS2PReg1(H, S);
			break;
		}
		case 2: {
			P.d = HS2PReg2(H, S);
			break;
		}
		case 3: {
			P.d = HS2PReg3(H, S);
			break;
		}
		case 4: {
			P.d = HS2PReg4(H, S);
			break;
		}
		case 5: {
			P.d = HS2PReg5(H, S);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void HS2T(double H, double S, HDouble T, HInteger Range) {

		SubRangeByHS(H, S, Range);
		switch (Range.i) {
		case 1: {
			T.d = HS2TReg1(H, S);
			break;
		}
		case 2: {
			T.d = HS2TReg2(H, S);
			break;
		}
		case 3: {
			T.d = HS2TReg3(H, S);
			break;
		}
		case 4: {
			T.d = HS2TReg4(H, S);
			break;
		}
		case 5: {
			T.d = HS2TReg5(H, S);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void HS2V(double H, double S, HDouble V, HInteger Range) {

		SubRangeByHS(H, S, Range);
		switch (Range.i) {
		case 1: {
			V.d = HS2VReg1(H, S);
			break;
		}
		case 2: {
			V.d = HS2VReg2(H, S);
			break;
		}
		case 3: {
			V.d = HS2VReg3(H, S);
			break;
		}
		case 4: {
			V.d = HS2VReg4(H, S);
			break;
		}
		case 5: {
			V.d = HS2VReg5(H, S);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void HS2X(double H, double S, HDouble X, HInteger Range) {

		SubRangeByHS(H, S, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = HS2XReg4(H, S);
			break;
		}
		default: {
			Range.i = (0);
			X.d = -1.0;
			break;
		}
		}
	}

	static void HS(HDouble P, HDouble T, double H, double S, HDouble V,
			HDouble X, HInteger Range) {

		SubRangeByHS(H, S, Range);
		switch (Range.i) {
		case 1: {
			P.d = HS2PReg1(H, S);
			T.d = PH2TReg1(P.d, H);
			V.d = PT2VReg1(P.d, T.d);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = HS2PReg2(H, S);
			T.d = PH2TReg2(P.d, H);
			V.d = PT2VReg2(P.d, T.d);
			X.d = 0.0;
			break;
		}
		case 3: {
			T.d = HS2TReg3(H, S);
			V.d = HS2VReg3(H, S);
			P.d = TV2PReg3(T.d, V.d);
			X.d = 0.0;
			break;
		}
		case 4: {
			T.d = HS2TReg4(H, S);
			P.d = T2P(T.d);
			X.d = TH2XReg4(T.d, H);
			V.d = TX2VReg4(T.d, X.d);
			break;
		}
		case 5: {
			P.d = HS2PReg5(H, S);
			T.d = PH2TReg5(P.d, H);
			V.d = PT2VReg5(P.d, T.d);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			T.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void HV2P(double H, double V, HDouble P, HInteger Range) {

		SubRangeByHV(H, V, Range);
		switch (Range.i) {
		case 1: {
			P.d = HV2PReg1(H, V);
			break;
		}
		case 2: {
			P.d = HV2PReg2(H, V);
			break;
		}
		case 3: {
			P.d = HV2PReg3(H, V);
			break;
		}
		case 4: {
			P.d = HV2PReg4(H, V);
			break;
		}
		case 5: {
			P.d = HV2PReg5(H, V);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void HV2T(double H, double V, HDouble T, HInteger Range) {

		SubRangeByHV(H, V, Range);
		switch (Range.i) {
		case 1: {
			T.d = HV2TReg1(H, V);
			break;
		}
		case 2: {
			T.d = HV2TReg2(H, V);
			break;
		}
		case 3: {
			T.d = HV2TReg3(H, V);
			break;
		}
		case 4: {
			T.d = HV2TReg4(H, V);
			break;
		}
		case 5: {
			T.d = HV2TReg5(H, V);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			// exit(1);
			break;
		}
		}
	}

	static void HV2S(double H, double V, HDouble S, HInteger Range) {

		SubRangeByHV(H, V, Range);
		switch (Range.i) {
		case 1: {
			S.d = HV2SReg1(H, V);
			break;
		}
		case 2: {
			S.d = HV2SReg2(H, V);
			break;
		}
		case 3: {
			S.d = HV2SReg3(H, V);
			break;
		}
		case 4: {
			S.d = HV2SReg4(H, V);
			break;
		}
		case 5: {
			S.d = HV2SReg5(H, V);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void HV2X(double H, double V, HDouble X, HInteger Range) {

		SubRangeByHV(H, V, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = HV2XReg4(H, V);
			break;
		}
		default: {
			Range.i = (0);
			X.d = -1.0;
			break;
		}
		}
	}

	static void HV(HDouble P, HDouble T, double H, HDouble S, double V,
			HDouble X, HInteger Range) {

		SubRangeByHV(H, V, Range);
		switch (Range.i) {
		case 1: {
			P.d = HV2PReg1(H, V);
			T.d = PH2TReg1(P.d, H);
			S.d = PT2SReg1(P.d, T.d);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = HV2PReg2(H, V);
			T.d = PH2TReg2(P.d, H);
			S.d = PT2SReg2(P.d, T.d);
			X.d = 0.0;
			break;
		}
		case 3: {
			T.d = HV2TReg3(H, V);
			P.d = TV2PReg3(T.d, V);
			S.d = TV2SReg3(T.d, V);
			X.d = 0.0;
			break;
		}
		case 4: {
			T.d = HV2TReg4(H, V);
			P.d = T2P(T.d);
			X.d = TV2XReg4(T.d, V);
			S.d = TX2SReg4(T.d, X.d);
			break;
		}
		case 5: {
			P.d = HV2PReg5(H, V);
			T.d = PH2TReg5(P.d, H);
			S.d = PT2SReg5(P.d, T.d);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			T.d = -1.0;
			S.d = -1.0;
			X.d = -1.0;
			break;
		}
		}

	}

	static void HX2T(double H, double X, HDouble T, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = HX2TReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void HX2P(double H, double X, HDouble P, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = HX2PReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void HX2S(double H, double X, HDouble S, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = HX2SReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void HX2V(double H, double X, HDouble V, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = HX2VReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void HX(HDouble P, HDouble T, double H, HDouble S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		T.d = -1d;
		S.d = -1d;
		V.d = -1d;
		HX2T(H, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			S.d = TX2SReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void HX2THP(double H, double X, HDouble T, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = HX2THPReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void HX2PHP(double H, double X, HDouble P, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = HX2PHPReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void HX2SHP(double H, double X, HDouble S, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = HX2SHPReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void HX2VHP(double H, double X, HDouble V, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = HX2VHPReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void HXHP(HDouble P, HDouble T, double H, HDouble S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		S.d = -1d;
		V.d = -1d;
		HX2THP(H, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			S.d = TX2SReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void HX2TLP(double H, double X, HDouble T, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = HX2TReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void HX2PLP(double H, double X, HDouble P, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = HX2PReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void HX2SLP(double H, double X, HDouble S, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = HX2SReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void HX2VLP(double H, double X, HDouble V, HInteger Range) {

		SubRangeByHX(H, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = HX2VReg4(H, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void HXLP(HDouble P, HDouble T, double H, HDouble S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		S.d = -1d;
		V.d = -1d;
		HX2T(H, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			S.d = TX2SReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void S2TG(double S, HDouble T, HInteger Range) {

		SUBRANGEBYSG(S, Range);
		switch (Range.i) {
		case 4: {
			T.d = SG2TREG4(S);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
			// exit(1);
		}
		}
	}

	static void SV2P(double S, double V, HDouble P, HInteger Range) {

		SubRangeBySV(S, V, Range);
		switch (Range.i) {
		case 1: {
			P.d = SV2PReg1(S, V);
			break;
		}
		case 2: {
			P.d = SV2PReg2(S, V);
			break;
		}
		case 3: {
			P.d = SV2PReg3(S, V);
			break;
		}
		case 4: {
			P.d = SV2PReg4(S, V);
			break;
		}
		case 5: {
			P.d = SV2PReg5(S, V);
			break;
		}
		default: {
			P.d = -1.0;
			break;
		}
		}
	}

	static void SV2T(double S, double V, HDouble T, HInteger Range) {

		SubRangeBySV(S, V, Range);
		switch (Range.i) {
		case 1: {
			T.d = SV2TReg1(S, V);
			break;
		}
		case 2: {
			T.d = SV2TReg2(S, V);
			break;
		}
		case 3: {
			T.d = SV2TReg3(S, V);
			break;
		}
		case 4: {
			T.d = SV2TReg4(S, V);
			break;
		}
		case 5: {
			T.d = SV2TReg5(S, V);
			break;
		}
		default: {
			T.d = -1.0;
			break;
		}
		}
	}

	static void SV2H(double S, double V, HDouble H, HInteger Range) {

		SubRangeBySV(S, V, Range);
		switch (Range.i) {
		case 1: {
			H.d = SV2HReg1(S, V);
			break;
		}
		case 2: {
			H.d = SV2HReg2(S, V);
			break;
		}
		case 3: {
			H.d = SV2HReg3(S, V);
			break;
		}
		case 4: {
			H.d = SV2HReg4(S, V);
			break;
		}
		case 5: {
			H.d = SV2HReg5(S, V);
			break;
		}
		default: {
			H.d = -1.0;
			break;
		}
		}
	}

	static void SV2X(double S, double V, HDouble X, HInteger Range) {
		SubRangeBySV(S, V, Range);
		switch (Range.i) {
		case 1: {
			X.d = 0.0;
			break;
		}
		case 2: {
			X.d = 1.0;
			break;
		}
		case 3: {
			X.d = 0.0;
			break;
		}
		case 5: {
			X.d = 1.0;
			break;
		}
		case 4: {
			X.d = SV2XReg4(S, V);
			break;
		}
		default: {
			X.d = -1.0;
			break;
		}
		}
	}

	static void SV(HDouble P, HDouble T, HDouble H, double S, double V,
			HDouble X, HInteger Range) {

		SubRangeBySV(S, V, Range);
		switch (Range.i) {
		case 1: {
			P.d = SV2PReg1(S, V);
			T.d = PS2TReg1(P.d, S);
			H.d = PT2HReg1(P.d, T.d);
			X.d = 0.0;
			break;
		}
		case 2: {
			P.d = SV2PReg2(S, V);
			T.d = PS2TReg2(P.d, S);
			H.d = PT2HReg2(P.d, T.d);
			X.d = 1.0;
			break;
		}
		case 3: {
			T.d = SV2TReg3(S, V);
			P.d = TV2PReg3(T.d, V);
			H.d = TV2HReg3(T.d, V);
			X.d = 0.0;
			break;
		}
		case 4: {
			P.d = SV2PReg4(S, V);
			T.d = P2T(P.d);
			X.d = TS2XReg4(T.d, S);
			H.d = TX2HReg4(T.d, X.d);
			break;
		}
		case 5: {
			P.d = SV2PReg5(S, V);
			T.d = PS2TReg5(P.d, S);
			H.d = PT2HReg5(P.d, T.d);
			X.d = 1.0;
			break;
		}
		default: {
			P.d = -1.0;
			T.d = -1.0;
			H.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	static void SX2T(double S, double X, HDouble T, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = SX2TReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void SX2P(double S, double X, HDouble P, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = SX2PReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void SX2H(double S, double X, HDouble H, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = SX2HReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void SX2V(double S, double X, HDouble V, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = SX2VReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void SX(HDouble P, HDouble T, HDouble H, double S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		H.d = -1d;
		V.d = -1d;
		SX2T(S, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void SX2THP(double S, double X, HDouble T, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = SX2THPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void SX2PHP(double S, double X, HDouble P, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = SX2PHPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void SX2HHP(double S, double X, HDouble H, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = SX2HHPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void SX2VHP(double S, double X, HDouble V, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = SX2VHPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void SXHP(HDouble P, HDouble T, HDouble H, double S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		H.d = -1d;
		V.d = -1d;
		SX2THP(S, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void SX2TMP(double S, double X, HDouble T, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = SX2TMPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void SX2PMP(double S, double X, HDouble P, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = SX2PMPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void SX2HMP(double S, double X, HDouble H, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = SX2HMPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void SX2VMP(double S, double X, HDouble V, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = SX2VMPReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void SXMP(HDouble P, HDouble T, HDouble H, double S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		V.d = -1d;
		H.d = -1d;
		SX2TMP(S, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void SX2TLP(double S, double X, HDouble T, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = SX2TReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void SX2PLP(double S, double X, HDouble P, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = SX2PReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void SX2HLP(double S, double X, HDouble H, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = SX2HReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void SX2VLP(double S, double X, HDouble V, HInteger Range) {

		SubRangeBySX(S, X, Range);
		switch (Range.i) {
		case 4: {
			V.d = SX2VReg4(S, X);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	static void SXLP(HDouble P, HDouble T, HDouble H, double S, HDouble V,
			double X, HInteger Range) {
		P.d = -1d;
		H.d = -1d;
		V.d = -1d;
		SX2TLP(S, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			V.d = TX2VReg4(T.d, X);
		}
	}

	static void T_VMinX(double Temp_Min, double Temp_Max, double X, HDouble T) {
		double Temp_Mid;
		double Temp_Mid_Plus, V_Mid_Plus;
		double Temp_Mid_Minus, V_Mid_Minus;
		double Temp_Min2, Temp_Max2;

		if (Math.abs(Temp_Max - Temp_Min) < 0.02) {
			T.d = (Temp_Max + Temp_Min) / 2;
			return;
			// exit(1);
		}

		Temp_Mid = (Temp_Max + Temp_Min) / 2;

		Temp_Mid_Plus = Temp_Mid + 0.01;
		V_Mid_Plus = TX2VReg4(Temp_Mid_Plus, X);

		Temp_Mid_Minus = Temp_Mid - 0.01;
		V_Mid_Minus = TX2VReg4(Temp_Mid_Minus, X);

		Temp_Min2 = Temp_Min;
		Temp_Max2 = Temp_Max;
		if (V_Mid_Plus > V_Mid_Minus)
			Temp_Max2 = Temp_Mid;
		else
			Temp_Min2 = Temp_Mid;

		T_VMinX(Temp_Min2, Temp_Max2, X, T);
	}

	static double VMinX(double X) {
		double Temp_Min, Temp_Max;
		HDouble T = new HDouble();
		double Result;

		Result = Vc_Water;
		if (X >= 0.4935)
			return Result;

		Temp_Min = 273.16;
		Temp_Max = Tc_Water;
		T_VMinX(Temp_Min, Temp_Max, X, T);
		return TX2VReg4(T.d, X);
	}

	static double VMaxX(double X) {
		return PX2VReg4(0.00611213, X);
	}

	static void V2TG(double V, HDouble T, HInteger Range) {

		SUBRANGEBYVG(V, Range);
		switch (Range.i) {
		case 4: {
			T.d = VG2TREG4(V);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
			// exit(1);
		}
		}
	}

	static void VX2T(double V, double X, HDouble T, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = VX2TReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void VX2P(double V, double X, HDouble P, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = VX2PReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void VX2H(double V, double X, HDouble H, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = VX2HReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void VX2S(double V, double X, HDouble S, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = (VX2SReg4(V, X));
			break;
		}
		default: {
			Range.i = (0);
			S.d = (-1.0);
			break;
		}
		}
	}

	static void VX(HDouble P, HDouble T, HDouble H, HDouble S, double V,
			double X, HInteger Range) {
		P.d = -1d;
		H.d = -1d;
		S.d = -1d;
		VX2T(V, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			S.d = TX2SReg4(T.d, X);
		}
	}

	static void VX2THP(double V, double X, HDouble T, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = VX2THPReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void VX2PHP(double V, double X, HDouble P, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = VX2PHPReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void VX2HHP(double V, double X, HDouble H, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = VX2HHPReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void VX2SHP(double V, double X, HDouble S, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = VX2SHPReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void VXHP(HDouble P, HDouble T, HDouble H, HDouble S, double V,
			double X, HInteger Range) {
		S.d = 0d;
		P.d = 0d;
		H.d = 0d;
		VX2THP(V, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			S.d = TX2SReg4(T.d, X);
		}
	}

	static void VX2TLP(double V, double X, HDouble T, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			T.d = VX2TReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	static void VX2PLP(double V, double X, HDouble P, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			P.d = VX2PReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	static void VX2HLP(double V, double X, HDouble H, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			H.d = VX2HReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	static void VX2SLP(double V, double X, HDouble S, HInteger Range) {

		SubRangeByVX(V, X, Range);
		switch (Range.i) {
		case 4: {
			S.d = VX2SReg4(V, X);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	static void VXLP(HDouble P, HDouble T, HDouble H, HDouble S, double V,
			double X, HInteger Range) {
		S.d = 0d;
		P.d = 0d;
		H.d = 0d;
		VX2TLP(V, X, T, Range);
		if (Range.i == 4) {
			P.d = T2P(T.d);
			H.d = TX2HReg4(T.d, X);
			S.d = TX2SReg4(T.d, X);
		}
	}

	// **********************************************P
	public static void P2T97(double P, HDouble T, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			T.d = P2T(P * 10) - T000C;
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			break;
		}
		}
	}

	public static void P2HL97(double P, HDouble H, HInteger Range) {
		P2HL(P * 10, H, Range);
	}

	public static void P2HG97(double P, HDouble H, HInteger Range) {
		P2HG(P * 10, H, Range);
	}

	public static void P2SL97(double P, HDouble S, HInteger Range) {
		P2SL(P * 10, S, Range);
	}

	public static void P2SG97(double P, HDouble S, HInteger Range) {
		P2SG(P * 10, S, Range);
	}

	public static void P2VL97(double P, HDouble V, HInteger Range) {
		P2VL(P * 10, V, Range);
	}

	public static void P2VG97(double P, HDouble V, HInteger Range) {
		P2VG(P * 10, V, Range);
	}

	public static void P2CPL97(double P, HDouble CP, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			CP.d = P2CPL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			CP.d = -1.0;
			break;
		}
		}
	}

	public static void P2CPG97(double P, HDouble CP, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			CP.d = P2CPG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			CP.d = -1.0;
			break;
		}
		}
	}

	public static void P2CVL97(double P, HDouble CV, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			CV.d = (P2CVL(P * 10));
			break;
		}
		default: {
			Range.i = (0);
			CV.d = (-1.0);
			break;
		}
		}
	}

	public static void P2CVG97(double P, HDouble CV, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			CV.d = (P2CVG(P * 10));
			break;
		}
		default: {
			Range.i = (0);
			CV.d = (-1.0);
			break;
		}
		}
	}

	public static void P2EL97(double P, HDouble E, HInteger Range) {
		P2EL(P * 10, E, Range);
	}

	public static void P2EG97(double P, HDouble E, HInteger Range) {
		P2EG(P * 10, E, Range);
	}

	public static void P2SSPL97(double P, HDouble SSP, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			SSP.d = P2SSPL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			SSP.d = -1.0;
			break;
		}
		}
	}

	public static void P2SSPG97(double P, HDouble SSP, HInteger Range) {
		Range.i = (1);

		SSP.d = P2SSPG(P * 10);
		if (SSP.d < -0.5) {
			Range.i = (0);
			return;
			// exit(1);
		}
		Range.i = (4);
	}

	public static void P2KSL97(double P, HDouble KS, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			KS.d = P2KSL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			KS.d = -1.0;
			break;
		}
		}
	}

	public static void P2KSG97(double P, HDouble KS, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			KS.d = P2KSG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			KS.d = -1.0;
			break;
		}
		}
	}

	public static void P2ETAL97(double P, HDouble ETA, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			ETA.d = P2ETAL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			ETA.d = -1.0;
			break;
		}
		}
	}

	public static void P2ETAG97(double P, HDouble ETA, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			ETA.d = P2ETAG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			ETA.d = -1.0;
			break;
		}
		}
	}

	public static void P2UL97(double P, HDouble U, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			U.d = P2UL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			U.d = -1.0;
			break;
		}
		}
	}

	public static void P2UG97(double P, HDouble U, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			U.d = P2UG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			U.d = -1.0;
			break;
		}
		}
	}

	public static void P2RAMDL97(double P, HDouble RAMD, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			RAMD.d = P2RAMDL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			RAMD.d = -1.0;
			break;
		}
		}
	}

	public static void P2RAMDG97(double P, HDouble RAMD, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			RAMD.d = P2RAMDG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			RAMD.d = -1.0;
			break;
		}
		}
	}

	public static void P2PRNL97(double P, HDouble PRN, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			PRN.d = P2PRNL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			PRN.d = -1.0;
			break;
		}
		}
	}

	public static void P2PRNG97(double P, HDouble PRN, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			PRN.d = P2PRNG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			PRN.d = -1.0;
			break;
		}
		}
	}

	public static void P2EPSL97(double P, HDouble EPS, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			EPS.d = P2EPSL(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			EPS.d = -1.0;
			break;
		}
		}
	}

	public static void P2EPSG97(double P, HDouble EPS, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			EPS.d = P2EPSG(P * 10);
			break;
		}
		default: {
			Range.i = (0);
			EPS.d = -1.0;
			break;
		}
		}
	}

	public static void P2NL97(double P, double LAMD, HDouble N, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			N.d = P2NL(P * 10, LAMD);
			break;
		}
		default: {
			Range.i = (0);
			N.d = -1.0;
			break;
		}
		}
	}

	public static void P2NG97(double P, double LAMD, HDouble N, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			N.d = P2NG(P * 10, LAMD);
			break;
		}
		default: {
			Range.i = (0);
			N.d = -1.0;
			break;
		}
		}
	}

	public static void P2L97(double P, HDouble T, HDouble H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			T.d = P2T(P * 10) - T000C;
			H.d = P2HLReg4(P * 10);
			S.d = P2SLReg4(P * 10);
			V.d = P2VLReg4(P * 10);
			X.d = 0.0;
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			H.d = -1.0;
			S.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	public static void P2G97(double P, HDouble T, HDouble H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		SubRangeByP(P * 10, Range);
		switch (Range.i) {
		case 4: {
			T.d = P2T(P * 10) - T000C;
			H.d = P2HGReg4(P * 10);
			S.d = P2SGReg4(P * 10);
			V.d = P2VGReg4(P * 10);
			X.d = 1.0;
			break;
		}
		default: {
			Range.i = (0);
			T.d = -1.0;
			H.d = -1.0;
			S.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	// **********************************************PT
	public static void PT2H97(double P, double T, HDouble H, HInteger Range) {
		PT2H(P * 10, T + T000C, H, Range);
	}

	public static void PT2S97(double P, double T, HDouble S, HInteger Range) {
		PT2S(P * 10, T + T000C, S, Range);
	}

	public static void PT2V97(double P, double T, HDouble V, HInteger Range) {
		PT2V(P * 10, T + T000C, V, Range);
	}

	public static void PT2X97(double P, double T, HDouble X, HInteger Range) {
		PT2X_KK(P * 10, T + T000C, X, Range);
	}

	public static void PT2CP97(double P, double T, HDouble CP, HInteger Range) {
		PT2CP(P * 10, T + T000C, CP, Range);
	}

	public static void PT2CV97(double P, double T, HDouble CV, HInteger Range) {
		PT2CV(P * 10, T + T000C, CV, Range);
	}

	public static void PT2E97(double P, double T, HDouble E, HInteger Range) {
		PT2E(P * 10, T + T000C, E, Range);
	}

	public static void PT2SSP97(double P, double T, HDouble SSP, HInteger Range) {
		PT2SSP(P * 10, T + T000C, SSP, Range);
	}

	public static void PT2KS97(double P, double T, HDouble KS, HInteger Range) {
		PT2KS(P * 10, T + T000C, KS, Range);
	}

	public static void PT2ETA97(double P, double T, HDouble ETA, HInteger Range) {
		PT2Eta(P * 10, T + T000C, ETA, Range);
	}

	public static void PT2U97(double P, double T, HDouble U, HInteger Range) {
		PT2U(P * 10, T + T000C, U, Range);
	}

	public static void PT2RAMD97(double P, double T, HDouble RAMD,
			HInteger Range) {
		PT2RAMD(P * 10, T + T000C, RAMD, Range);
	}

	public static void PT2PRN97(double P, double T, HDouble PRN, HInteger Range) {
		PT2PRN(P * 10, T + T000C, PRN, Range);
	}

	public static void PT2EPS97(double P, double T, HDouble EPS, HInteger Range) {
		PT2EPS(P * 10, T + T000C, EPS, Range);
	}

	public static void PT2N97(double P, double T, double LAMD, HDouble N,
			HInteger Range) {
		PT2N(P * 10, T + T000C, LAMD, N, Range);
	}

	public static void PT97(double P, double T, HDouble H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		PT(P * 10, T + T000C, H, S, V, X, Range);
	}

	// **********************************************PH
	public static void PH2T97(double P, double H, HDouble T, HInteger Range) {
		PH2T(P * 10, H, T, Range);
		if (Range.i != 0)
			T.d = (T.d - T000C);
	}

	public static void PH2S97(double P, double H, HDouble S, HInteger Range) {
		PH2S(P * 10, H, S, Range);
	}

	public static void PH2V97(double P, double H, HDouble V, HInteger Range) {
		PH2V(P * 10, H, V, Range);
	}

	public static void PH2X97(double P, double H, HDouble X, HInteger Range) {
		PH2X(P * 10, H, X, Range);
	}

	public static void PH97(double P, HDouble T, double H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		PH(P * 10, T, H, S, V, X, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	// **********************************************PS
	public static void PS2T97(double P, double S, HDouble T, HInteger Range) {
		PS2T(P * 10, S, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void PS2H97(double P, double S, HDouble H, HInteger Range) {
		PS2H(P * 10, S, H, Range);
	}

	public static void PS2V97(double P, double S, HDouble V, HInteger Range) {
		PS2V(P * 10, S, V, Range);
	}

	public static void PS2X97(double P, double S, HDouble X, HInteger Range) {
		PS2X(P * 10, S, X, Range);
	}

	public static void PS97(double P, HDouble T, HDouble H, double S,
			HDouble V, HDouble X, HInteger Range) {
		PS(P * 10, T, H, S, V, X, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	// **********************************************PV
	public static void PV2T97(double P, double V, HDouble T, HInteger Range) {
		PV2T(P * 10, V, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void PV2H97(double P, double V, HDouble H, HInteger Range) {
		PV2H(P * 10, V, H, Range);
	}

	public static void PV2S97(double P, double V, HDouble S, HInteger Range) {
		PV2S(P * 10, V, S, Range);
	}

	public static void PV2X97(double P, double V, HDouble X, HInteger Range) {
		PV2X(P * 10, V, X, Range);
	}

	public static void PV97(double P, HDouble T, HDouble H, HDouble S,
			double V, HDouble X, HInteger Range) {
		PV(P * 10, T, H, S, V, X, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	// **********************************************PX
	public static void PX2T97(double P, double X, HDouble T, HInteger Range) {

		PX2T(P * 10, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void PX2H97(double P, double X, HDouble H, HInteger Range) {

		PX2H(P * 10, X, H, Range);
	}

	public static void PX2S97(double P, double X, HDouble S, HInteger Range) {

		PX2S(P * 10, X, S, Range);
	}

	public static void PX2V97(double P, double X, HDouble V, HInteger Range) {

		PX2V(P * 10, X, V, Range);
	}

	public static void PX97(double P, HDouble T, HDouble H, HDouble S,
			HDouble V, double X, HInteger Range) {
		PX(P * 10, T, H, S, V, X, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	// /////////////////////////////T
	public static void T2P97(double T, HDouble P, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			P.d = T2P(T + T000C) / 10;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			break;
		}
		}
	}

	public static void T2HL97(double T, HDouble H, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			H.d = T2HL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	public static void T2HG97(double T, HDouble H, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			H.d = T2HG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			H.d = -1.0;
			break;
		}
		}
	}

	public static void T2SL97(double T, HDouble S, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			S.d = T2SL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	public static void T2SG97(double T, HDouble S, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			S.d = T2SG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			S.d = -1.0;
			break;
		}
		}
	}

	public static void T2VL97(double T, HDouble V, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			V.d = T2VL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	public static void T2VG97(double T, HDouble V, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			V.d = T2VG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			V.d = -1.0;
			break;
		}
		}
	}

	public static void T2CPL97(double T, HDouble CP, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			CP.d = T2CPL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			CP.d = -1.0;
			break;
		}
		}
	}

	public static void T2CPG97(double T, HDouble CP, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			CP.d = T2CPG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			CP.d = -1.0;
			break;
		}
		}
	}

	public static void T2CVL97(double T, HDouble CV, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			CV.d = T2CVL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			CV.d = -1.0;
			break;
		}
		}
	}

	public static void T2CVG97(double T, HDouble CV, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			CV.d = T2CVG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			CV.d = -1.0;
			break;
		}
		}
	}

	public static void T2EL97(double T, HDouble E, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			E.d = T2EL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			E.d = -1.0;
			break;
		}
		}
	}

	public static void T2EG97(double T, HDouble E, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			E.d = T2EG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			E.d = -1.0;
			break;
		}
		}
	}

	public static void T2SSPL97(double T, HDouble SSP, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			SSP.d = T2SSPL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			SSP.d = -1.0;
			break;
		}
		}
	}

	public static void T2SSPG97(double T, HDouble SSP, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			SSP.d = T2SSPG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			SSP.d = -1.0;
			break;
		}
		}
	}

	public static void T2KSL97(double T, HDouble KS, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			KS.d = T2KSL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			KS.d = -1.0;
			break;
		}
		}
	}

	public static void T2KSG97(double T, HDouble KS, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			KS.d = T2KSG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			KS.d = -1.0;
			break;
		}
		}
	}

	public static void T2ETAL97(double T, HDouble ETA, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			ETA.d = T2ETAL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			ETA.d = -1.0;
			break;
		}
		}
	}

	public static void T2ETAG97(double T, HDouble ETA, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			ETA.d = T2ETAG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			ETA.d = -1.0;
			break;
		}
		}
	}

	public static void T2UL97(double T, HDouble U, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			U.d = (T2UL(T + T000C));
			break;
		}
		default: {
			Range.i = (0);
			U.d = (-1.0);
			break;
		}
		}
	}

	public static void T2UG97(double T, HDouble U, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			U.d = T2UG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			U.d = -1.0;
			break;
		}
		}
	}

	public static void T2RAMDL97(double T, HDouble RAMD, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			RAMD.d = T2RAMDL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			RAMD.d = -1.0;
			break;
		}
		}
	}

	public static void T2RAMDG97(double T, HDouble RAMD, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			RAMD.d = T2RAMDG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			RAMD.d = -1.0;
			break;
		}
		}
	}

	public static void T2PRNL97(double T, HDouble PRN, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			PRN.d = T2PRNL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			PRN.d = -1.0;
			break;
		}
		}
	}

	public static void T2PRNG97(double T, HDouble PRN, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			PRN.d = T2PRNG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			PRN.d = -1.0;
			break;
		}
		}
	}

	public static void T2EPSL97(double T, HDouble EPS, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			EPS.d = T2EPSL(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			EPS.d = -1.0;
			break;
		}
		}
	}

	public static void T2EPSG97(double T, HDouble EPS, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			EPS.d = T2EPSG(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			EPS.d = -1.0;
			break;
		}
		}
	}

	public static void T2NL97(double T, double LAMD, HDouble N, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			N.d = (T2NL(T + T000C, LAMD));
			break;
		}
		default: {
			Range.i = (0);
			N.d = (-1.0);
			break;
		}
		}
	}

	public static void T2NG97(double T, double LAMD, HDouble N, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			N.d = T2NG(T + T000C, LAMD);
			break;
		}
		default: {
			Range.i = (0);
			N.d = -1.0;
			break;
		}
		}
	}

	public static void T2SURFT97(double T, HDouble SURFT, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			SURFT.d = T2SURFT(T + T000C);
			break;
		}
		default: {
			Range.i = (0);
			SURFT.d = -1.0;
			break;
		}
		}
	}

	public static void T2L97(HDouble P, double T, HDouble H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			P.d = T2P(T + T000C) / 10;
			H.d = T2HL(T + T000C);
			S.d = T2SL(T + T000C);
			V.d = T2VL(T + T000C);
			X.d = 0.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			H.d = -1.0;
			S.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	public static void T2G97(HDouble P, double T, HDouble H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		SubRangeByT(T + T000C, Range);
		switch (Range.i) {
		case 4: {
			P.d = T2P(T + T000C) / 10;
			H.d = T2HG(T + T000C);
			S.d = T2SG(T + T000C);
			V.d = T2VG(T + T000C);
			X.d = 0.0;
			break;
		}
		default: {
			Range.i = (0);
			P.d = -1.0;
			H.d = -1.0;
			S.d = -1.0;
			V.d = -1.0;
			X.d = -1.0;
			break;
		}
		}
	}

	// **********************************************TH
	public static void TH2PHP97(double T, double H, HDouble P, HInteger Range) {
		TH2PHP(T + T000C, H, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TH2PLP97(double T, double H, HDouble P, HInteger Range) {
		TH2PLP(T + T000C, H, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TH2P97(double T, double H, HDouble P, HInteger Range) {
		TH2P(T + T000C, H, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TH2SHP97(double T, double H, HDouble S, HInteger Range) {
		TH2SHP(T + T000C, H, S, Range);
	}

	public static void TH2SLP97(double T, double H, HDouble S, HInteger Range) {
		TH2SLP(T + T000C, H, S, Range);
	}

	public static void TH2S97(double T, double H, HDouble S, HInteger Range) {
		TH2S(T + T000C, H, S, Range);
	}

	public static void TH2VHP97(double T, double H, HDouble V, HInteger Range) {
		TH2VHP(T + T000C, H, V, Range);
	}

	public static void TH2VLP97(double T, double H, HDouble V, HInteger Range) {
		TH2VLP(T + T000C, H, V, Range);
	}

	public static void TH2V97(double T, double H, HDouble V, HInteger Range) {
		TH2V(T + T000C, H, V, Range);
	}

	public static void TH2XHP97(double T, double H, HDouble X, HInteger Range) {
		TH2XHP(T + T000C, H, X, Range);
	}

	public static void TH2XLP97(double T, double H, HDouble X, HInteger Range) {
		TH2XLP(T + T000C, H, X, Range);
	}

	public static void TH2X97(double T, double H, HDouble X, HInteger Range) {
		TH2X(T + T000C, H, X, Range);
	}

	public static void TH97(HDouble P, double T, double H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		TH(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void THHP97(HDouble P, double T, double H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		THHP(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void THLP97(HDouble P, double T, double H, HDouble S,
			HDouble V, HDouble X, HInteger Range) {
		THLP(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	// **********************************************TS
	public static void TS2PHP97(double T, double S, HDouble P, HInteger Range) {
		TS2PHP(T + T000C, S, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TS2PLP97(double T, double S, HDouble P, HInteger Range) {
		TS2PLP(T + T000C, S, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TS2P97(double T, double S, HDouble P, HInteger Range) {
		TS2P(T + T000C, S, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TS2HHP97(double T, double S, HDouble H, HInteger Range) {
		TS2HHP(T + T000C, S, H, Range);
	}

	public static void TS2HLP97(double T, double S, HDouble H, HInteger Range) {
		TS2HLP(T + T000C, S, H, Range);
	}

	public static void TS2H97(double T, double S, HDouble H, HInteger Range) {
		TS2H(T + T000C, S, H, Range);
	}

	public static void TS2VHP97(double T, double S, HDouble V, HInteger Range) {
		TS2VHP(T + T000C, S, V, Range);
	}

	public static void TS2VLP97(double T, double S, HDouble V, HInteger Range) {
		TS2VLP(T + T000C, S, V, Range);
	}

	public static void TS2V97(double T, double S, HDouble V, HInteger Range) {
		TS2V(T + T000C, S, V, Range);
	}

	public static void TS2X97(double T, double S, HDouble X, HInteger Range) {
		TS2X(T + T000C, S, X, Range);
	}

	public static void TS97(HDouble P, double T, HDouble H, double S,
			HDouble V, HDouble X, HInteger Range) {
		TS(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TSHP97(HDouble P, double T, HDouble H, double S,
			HDouble V, HDouble X, HInteger Range) {
		TSHP(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TSLP97(HDouble P, double T, HDouble H, double S,
			HDouble V, HDouble X, HInteger Range) {
		TSLP(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	// **********************************************TV
	public static void TV2P97(double T, double V, HDouble P, HInteger Range) {
		TV2P(T + T000C, V, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TV2H97(double T, double V, HDouble H, HInteger Range) {
		TV2H(T + T000C, V, H, Range);
	}

	public static void TV2S97(double T, double V, HDouble S, HInteger Range) {
		TV2S(T + T000C, V, S, Range);
	}

	public static void TV2X97(double T, double V, HDouble X, HInteger Range) {
		TV2X(T + T000C, V, X, Range);
	}

	public static void TV97(HDouble P, double T, HDouble H, HDouble S,
			double V, HDouble X, HInteger Range) {
		TV(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	// **********************************************TX
	public static void TX2P97(double T, double X, HDouble P, HInteger Range) {
		TX2P(T + T000C, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void TX2H97(double T, double X, HDouble H, HInteger Range) {
		TX2H(T + T000C, X, H, Range);
	}

	public static void TX2S97(double T, double X, HDouble S, HInteger Range) {
		TX2S(T + T000C, X, S, Range);
	}

	public static void TX2V97(double T, double X, HDouble V, HInteger Range) {
		TX2V(T + T000C, X, V, Range);
	}

	public static void TX97(HDouble P, double T, HDouble H, HDouble S,
			HDouble V, double X, HInteger Range) {
		TX(P, T + T000C, H, S, V, X, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	// *********************************************HS
	public static void H2TL97(double H, HDouble T, HInteger Range) {
		H2TL(H, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void HS2P97(double H, double S, HDouble P, HInteger Range) {
		HS2P(H, S, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void HS2T97(double H, double S, HDouble T, HInteger Range) {
		HS2T(H, S, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void HS2V97(double H, double S, HDouble V, HInteger Range) {
		HS2V(H, S, V, Range);
	}

	public static void HS2X97(double H, double S, HDouble X, HInteger Range) {
		HS2X(H, S, X, Range);
	}

	public static void HS97(HDouble P, HDouble T, double H, double S,
			HDouble V, HDouble X, HInteger Range) {
		HS(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			P.d = P.d / 10;
			T.d = T.d - T000C;
		}
	}

	// **********************************************HV
	public static void HV2P97(double H, double V, HDouble P, HInteger Range) {
		HV2P(H, V, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void HV2T97(double H, double V, HDouble T, HInteger Range) {
		HV2T(H, V, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void HV2S97(double H, double V, HDouble S, HInteger Range) {
		HV2S(H, V, S, Range);
	}

	public static void HV2X97(double H, double V, HDouble X, HInteger Range) {
		HV2X(H, V, X, Range);
	}

	public static void HV97(HDouble P, HDouble T, double H, HDouble S,
			double V, HDouble X, HInteger Range) {
		HV(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			P.d = P.d / 10;
			T.d = T.d - T000C;
		}
	}

	// **********************************************HX
	public static void HX2T97(double H, double X, HDouble T, HInteger Range) {
		HX2T(H, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void HX2P97(double H, double X, HDouble P, HInteger Range) {
		HX2P(H, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void HX2S97(double H, double X, HDouble S, HInteger Range) {
		HX2S(H, X, S, Range);
	}

	public static void HX2V97(double H, double X, HDouble V, HInteger Range) {
		HX2V(H, X, V, Range);
	}

	public static void HX97(HDouble P, HDouble T, double H, HDouble S,
			HDouble V, double X, HInteger Range) {
		HX(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	public static void HX2THP97(double H, double X, HDouble T, HInteger Range) {
		HX2THP(H, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void HX2PHP97(double H, double X, HDouble P, HInteger Range) {
		HX2PHP(H, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void HX2SHP97(double H, double X, HDouble S, HInteger Range) {
		HX2SHP(H, X, S, Range);
	}

	public static void HX2VHP97(double H, double X, HDouble V, HInteger Range) {
		HX2VHP(H, X, V, Range);
	}

	public static void HXHP97(HDouble P, HDouble T, double H, HDouble S,
			HDouble V, double X, HInteger Range) {
		HXHP(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	public static void HX2TLP97(double H, double X, HDouble T, HInteger Range) {
		HX2T(H, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void HX2PLP97(double H, double X, HDouble P, HInteger Range) {
		HX2P(H, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void HX2SLP97(double H, double X, HDouble S, HInteger Range) {
		HX2S(H, X, S, Range);
	}

	public static void HX2VLP97(double H, double X, HDouble V, HInteger Range) {
		HX2V(H, X, V, Range);
	}

	public static void HXLP97(HDouble P, HDouble T, double H, HDouble S,
			HDouble V, double X, HInteger Range) {
		HX(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	public static void S2TG97(double S, HDouble T, HInteger Range) {
		S2TG(S, T, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
		}
	}

	// **********************************************SV
	public static void SV2P97(double S, double V, HDouble P, HInteger Range) {
		SV2P(S, V, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void SV2T97(double S, double V, HDouble T, HInteger Range) {
		SV2T(S, V, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void SV2H97(double S, double V, HDouble H, HInteger Range) {
		SV2H(S, V, H, Range);
	}

	public static void SV2X97(double S, double V, HDouble X, HInteger Range) {
		SV2X(S, V, X, Range);
	}

	public static void SV97(HDouble P, HDouble T, HDouble H, double S,
			double V, HDouble X, HInteger Range) {
		SV(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			P.d = P.d / 10;
			T.d = T.d - T000C;
		}
	}

	// **********************************************SX
	public static void SX2T97(double S, double X, HDouble T, HInteger Range) {
		SX2T(S, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void SX2P97(double S, double X, HDouble P, HInteger Range) {
		SX2P(S, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void SX2H97(double S, double X, HDouble H, HInteger Range) {
		SX2H(S, X, H, Range);
	}

	public static void SX2V97(double S, double X, HDouble V, HInteger Range) {
		SX2V(S, X, V, Range);
	}

	public static void SX97(HDouble P, HDouble T, HDouble H, double S,
			HDouble V, double X, HInteger Range) {
		SX(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	public static void SX2THP97(double S, double X, HDouble T, HInteger Range) {
		SX2THP(S, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void SX2PHP97(double S, double X, HDouble P, HInteger Range) {
		SX2PHP(S, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void SX2HHP97(double S, double X, HDouble H, HInteger Range) {
		SX2HHP(S, X, H, Range);
	}

	public static void SX2VHP97(double S, double X, HDouble V, HInteger Range) {
		SX2VHP(S, X, V, Range);
	}

	public static void SXHP97(HDouble P, HDouble T, HDouble H, double S,
			HDouble V, double X, HInteger Range) {
		SXHP(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	public static void SX2TMP97(double S, double X, HDouble T, HInteger Range) {
		SX2TMP(S, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void SX2PMP97(double S, double X, HDouble P, HInteger Range) {
		SX2PMP(S, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void SX2HMP97(double S, double X, HDouble H, HInteger Range) {
		SX2HMP(S, X, H, Range);
	}

	public static void SX2VMP97(double S, double X, HDouble V, HInteger Range) {
		SX2VMP(S, X, V, Range);
	}

	public static void SXMP97(HDouble P, HDouble T, HDouble H, double S,
			HDouble V, double X, HInteger Range) {
		SXMP(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	public static void SX2TLP97(double S, double X, HDouble T, HInteger Range) {
		SX2TLP(S, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void SX2PLP97(double S, double X, HDouble P, HInteger Range) {
		SX2PLP(S, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void SX2HLP97(double S, double X, HDouble H, HInteger Range) {
		SX2HLP(S, X, H, Range);
	}

	public static void SX2VLP97(double S, double X, HDouble V, HInteger Range) {
		SX2VLP(S, X, V, Range);
	}

	public static void SXLP97(HDouble P, HDouble T, HDouble H, double S,
			HDouble V, double X, HInteger Range) {
		SXLP(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
			P.d = P.d / 10;
		}
	}

	// **********************************************VX
	public static void V2TG97(double V, HDouble T, HInteger Range) {
		V2TG(V, T, Range);
		if (Range.i != 0) {
			T.d = T.d - T000C;
		}
	}

	public static void VX2T97(double V, double X, HDouble T, HInteger Range) {
		VX2T(V, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void VX2P97(double V, double X, HDouble P, HInteger Range) {
		VX2P(V, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void VX2H97(double V, double X, HDouble H, HInteger Range) {
		VX2H(V, X, H, Range);
	}

	public static void VX2S97(double V, double X, HDouble S, HInteger Range) {
		VX2S(V, X, S, Range);
	}

	public static void VX97(HDouble P, HDouble T, HDouble H, HDouble S,
			double V, double X, HInteger Range) {
		VX(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			P.d = P.d / 10;
			T.d = T.d - T000C;
		}
	}

	public static void VX2THP97(double V, double X, HDouble T, HInteger Range) {
		VX2THP(V, X, T, Range);
		if (Range.i != 0)
			T.d = T.d - T000C;
	}

	public static void VX2PHP97(double V, double X, HDouble P, HInteger Range) {
		VX2PHP(V, X, P, Range);
		if (Range.i != 0)
			P.d = P.d / 10;
	}

	public static void VX2HHP97(double V, double X, HDouble H, HInteger Range) {
		VX2HHP(V, X, H, Range);
	}

	public static void VX2SHP97(double V, double X, HDouble S, HInteger Range) {
		VX2SHP(V, X, S, Range);
	}

	public static void VXHP97(HDouble P, HDouble T, HDouble H, HDouble S,
			double V, double X, HInteger Range) {
		VXHP(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			P.d = P.d / 10;
			T.d = T.d - T000C;
		}
	}

	public static void VX2TLP97(double V, double X, HDouble T, HInteger Range) {
		VX2TLP(V, X, T, Range);
		if (Range.i != 0)
			T.d = (T.d - T000C);
	}

	public static void VX2PLP97(double V, double X, HDouble P, HInteger Range) {
		VX2PLP(V, X, P, Range);
		if (Range.i != 0)
			P.d = (P.d / 10);
	}

	public static void VX2HLP97(double V, double X, HDouble H, HInteger Range) {
		VX2HLP(V, X, H, Range);
	}

	public static void VX2SLP97(double V, double X, HDouble S, HInteger Range) {
		VX2SLP(V, X, S, Range);
	}

	public static void VXLP97(HDouble P, HDouble T, HDouble H, HDouble S,
			double V, double X, HInteger Range) {
		VXLP(P, T, H, S, V, X, Range);
		if (Range.i != 0) {
			P.d = (P.d / 10);
			T.d = (T.d - T000C);
		}
	}

	public IFC97() {
		//
		// TODO: Add constructor Math.logic here
		//
	}
}
